{"version":3,"sources":["file:///home/circleci/bemuse/node_modules/audio-context/index.js","file:///home/circleci/bemuse/node_modules/buffer/index.js","file:///home/circleci/bemuse/node_modules/base64-js/index.js","file:///home/circleci/bemuse/node_modules/ieee754/index.js","file:///home/circleci/bemuse/node_modules/buffer/node_modules/isarray/index.js","file:///home/circleci/bemuse/node_modules/libarchive.js/src/compressed-file.js","file:///home/circleci/bemuse/node_modules/libarchive.js/src/libarchive.js","file:///home/circleci/bemuse/node_modules/webpack/buildin/module.js"],"names":["cache","module","exports","options","window","OfflineContext","OfflineAudioContext","webkitOfflineAudioContext","Context","AudioContext","webkitAudioContext","sampleRate","offline","channels","length","ctx","err","global","base64","__webpack_require__","ieee754","isArray","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","Uint8Array","__proto__","prototype","arg","encodingOrOffset","this","Error","allocUnsafe","from","value","TypeError","ArrayBuffer","array","byteOffset","byteLength","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","len","checked","copy","buffer","val","isnan","type","data","fromObject","assertSize","size","i","toString","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","b","n","m","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","indexOf","call","lastIndexOf","arr","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","push","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","base64Slice","start","end","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","Symbol","species","Object","defineProperty","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","join","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","Array","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","tripletToBase64","num","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","abs","log","LN2","CompressedFile","[object Object]","name","path","archiveRef","_name","_size","_path","_archiveRef","extractSingleFile","libarchive_Archive","_options","workerUrl","file","init","console","warn","open","_worker","Worker","addEventListener","_workerMsg","bind","_callbacks","_content","_processed","_file","_postMessage","resolve","reject","msg","status","archivePassword","passphrase","Promise","then","entry","prop","_getProp","fileName","_cloneContent","getFilesObject","_objectToArray","File","fileData","extractCallback","setTimeout","terminate","o","keys","files","key","split","pop","cur","prev","part","callback","postMessage","_msgHandler","error","webpackPolyfill","deprecate","paths","children","enumerable","get","l"],"mappings":"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","file":"build/vendors~comingSoonDemo-3f3c40c18f3d663a7637.js","sourcesContent":["'use strict'\r\n\r\nvar cache = {}\r\n\r\nmodule.exports = function getContext (options) {\r\n\tif (typeof window === 'undefined') return null\r\n\t\r\n\tvar OfflineContext = window.OfflineAudioContext || window.webkitOfflineAudioContext\r\n\tvar Context = window.AudioContext || window.webkitAudioContext\r\n\t\r\n\tif (!Context) return null\r\n\r\n\tif (typeof options === 'number') {\r\n\t\toptions = {sampleRate: options}\r\n\t}\r\n\r\n\tvar sampleRate = options && options.sampleRate\r\n\r\n\r\n\tif (options && options.offline) {\r\n\t\tif (!OfflineContext) return null\r\n\r\n\t\treturn new OfflineContext(options.channels || 2, options.length, sampleRate || 44100)\r\n\t}\r\n\r\n\r\n\t//cache by sampleRate, rather strong guess\r\n\tvar ctx = cache[sampleRate]\r\n\r\n\tif (ctx) return ctx\r\n\r\n\t//several versions of firefox have issues with the\r\n\t//constructor argument\r\n\t//see: https://bugzilla.mozilla.org/show_bug.cgi?id=1361475\r\n\ttry {\r\n\t\tctx = new Context(options)\r\n\t}\r\n\tcatch (err) {\r\n\t\tctx = new Context()\r\n\t}\r\n\tcache[ctx.sampleRate] = cache[sampleRate] = ctx\r\n\r\n\treturn ctx\r\n}\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","\r\n/**\r\n * Represents compressed file before extraction\r\n */\r\nexport class CompressedFile{\r\n\r\n    constructor(name,size,path,archiveRef){\r\n        this._name = name;\r\n        this._size = size;\r\n        this._path = path;\r\n        this._archiveRef = archiveRef;\r\n    }\r\n\r\n    /**\r\n     * file name\r\n     */\r\n    get name(){\r\n        return this._name;\r\n    }\r\n    /**\r\n     * file size\r\n     */\r\n    get size(){\r\n        return this._size;\r\n    }\r\n\r\n    /**\r\n     * Extract file from archive\r\n     * @returns {Promise<File>} extracted file\r\n     */\r\n    extract(){\r\n        return this._archiveRef.extractSingleFile(this._path);\r\n    }\r\n\r\n}","import { CompressedFile } from \"./compressed-file.js\";\r\n\r\n\r\nexport class Archive{\r\n\r\n    /**\r\n     * Initialize libarchivejs\r\n     * @param {Object} options \r\n     */\r\n    static init(options = {}){\r\n        Archive._options = {\r\n            workerUrl: '../dist/worker-bundle.js',\r\n            ...options\r\n        };\r\n        return Archive._options;\r\n    }\r\n\r\n    /**\r\n     * Creates new archive instance from browser native File object\r\n     * @param {File} file\r\n     * @param {object} options\r\n     * @returns {Archive}\r\n     */\r\n    static open(file, options = null){\r\n        options =   options || \r\n                    Archive._options || \r\n                    Archive.init() && console.warn('Automatically initializing using options: ', Archive._options);\r\n        const arch = new Archive(file,options);\r\n        return arch.open();\r\n    }\r\n\r\n    /**\r\n     * Create new archive\r\n     * @param {File} file \r\n     * @param {Object} options \r\n     */\r\n    constructor(file,options){\r\n        this._worker = new Worker(options.workerUrl);\r\n        this._worker.addEventListener('message', this._workerMsg.bind(this));\r\n        this._callbacks = [];\r\n        this._content = {};\r\n        this._processed = 0;\r\n        this._file = file;\r\n    }\r\n\r\n    /**\r\n     * Prepares file for reading\r\n     * @returns {Promise<Archive>} archive instance\r\n     */\r\n    async open(){\r\n        await this._postMessage({type: 'HELLO'},(resolve,reject,msg) => {\r\n            if( msg.type === 'READY' ){\r\n                resolve();\r\n            }\r\n        });\r\n        return await this._postMessage({type: 'OPEN', file: this._file}, (resolve,reject,msg) => {\r\n            if(msg.type === 'OPENED'){\r\n                resolve(this);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * detect if archive has encrypted data\r\n     * @returns {boolean|null} null if could not be determined\r\n     */\r\n    hasEncryptedData(){\r\n        return this._postMessage({type: 'CHECK_ENCRYPTION'}, \r\n            (resolve,reject,msg) => {\r\n                if( msg.type === 'ENCRYPTION_STATUS' ){\r\n                    resolve(msg.status);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * set password to be used when reading archive\r\n     */\r\n    usePassword(archivePassword){\r\n        return this._postMessage({type: 'SET_PASSPHRASE', passphrase: archivePassword},\r\n            (resolve,reject,msg) => {\r\n                if( msg.type === 'PASSPHRASE_STATUS' ){\r\n                    resolve(msg.status);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns object containing directory structure and file information \r\n     * @returns {Promise<object>}\r\n     */\r\n    getFilesObject(){\r\n        if( this._processed > 0 ){\r\n            return Promise.resolve().then( () => this._content );\r\n        }\r\n        return this._postMessage({type: 'LIST_FILES'}, (resolve,reject,msg) => {\r\n            if( msg.type === 'ENTRY' ){\r\n                const entry = msg.entry;\r\n                const [ target, prop ] = this._getProp(this._content,entry.path);\r\n                if( entry.type === 'FILE' ){\r\n                    target[prop] = new CompressedFile(entry.fileName,entry.size,entry.path,this);                    \r\n                }\r\n                return true;\r\n            }else if( msg.type === 'END' ){\r\n                this._processed = 1;\r\n                resolve(this._cloneContent(this._content));\r\n            }\r\n        });\r\n    }\r\n\r\n    getFilesArray(){\r\n        return this.getFilesObject().then( (obj) => {\r\n            return this._objectToArray(obj);\r\n        });\r\n    }\r\n\r\n    extractSingleFile(target){\r\n        return this._postMessage({type: 'EXTRACT_SINGLE_FILE', target: target}, \r\n            (resolve,reject,msg) => {\r\n                if( msg.type === 'FILE' ){\r\n                    const file = new File([msg.entry.fileData], msg.entry.fileName, {\r\n                        type: 'application/octet-stream'\r\n                    });\r\n                    resolve(file);\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Returns object containing directory structure and extracted File objects \r\n     * @param {Function} extractCallback\r\n     * \r\n     */\r\n    extractFiles(extractCallback){\r\n        if( this._processed > 1 ){\r\n            return Promise.resolve().then( () => this._content );\r\n        }\r\n        return this._postMessage({type: 'EXTRACT_FILES'}, (resolve,reject,msg) => {\r\n            if( msg.type === 'ENTRY' ){\r\n                const [ target, prop ] = this._getProp(this._content,msg.entry.path);\r\n                if( msg.entry.type === 'FILE' ){\r\n                    target[prop] = new File([msg.entry.fileData], msg.entry.fileName, {\r\n                        type: 'application/octet-stream'\r\n                    });\r\n                    if (extractCallback !== undefined) {\r\n                        setTimeout(extractCallback.bind(null,{\r\n                            file: target[prop],\r\n                            path: msg.entry.path,\r\n                        }));\r\n                    }\r\n                }\r\n                return true;\r\n            }else if( msg.type === 'END' ){\r\n                this._processed = 2;\r\n                this._worker.terminate();\r\n                resolve(this._cloneContent(this._content));\r\n            }\r\n        });\r\n    }\r\n\r\n    _cloneContent(obj){\r\n        if( obj instanceof File || obj instanceof CompressedFile || obj === null ) return obj;\r\n        const o = {};\r\n        for( const prop of Object.keys(obj) ){\r\n            o[prop] = this._cloneContent(obj[prop]);\r\n        }\r\n        return o;\r\n    }\r\n\r\n    _objectToArray(obj,path = ''){\r\n        const files = [];\r\n        for( const key of Object.keys(obj) ){\r\n            if( obj[key] instanceof File || obj[key] instanceof CompressedFile || obj[key] === null ){\r\n                files.push({\r\n                    file: obj[key] || key,\r\n                    path: path\r\n                });\r\n            }else{\r\n                files.push( ...this._objectToArray(obj[key],`${path}${key}/`) );\r\n            }\r\n        }\r\n        return files;\r\n    }\r\n\r\n    _getProp(obj,path){\r\n        const parts = path.split('/');\r\n        if( parts[parts.length -1] === '' ) parts.pop();\r\n        let cur = obj, prev = null;\r\n        for( const part of parts ){\r\n            cur[part] = cur[part] || {};\r\n            prev = cur;\r\n            cur = cur[part];\r\n        }\r\n        return [ prev, parts[parts.length-1] ];\r\n    }\r\n\r\n    _postMessage(msg,callback){\r\n        this._worker.postMessage(msg);\r\n        return new Promise((resolve,reject) => {\r\n            this._callbacks.push( this._msgHandler.bind(this,callback,resolve,reject) );\r\n        });\r\n    }\r\n\r\n    _msgHandler(callback,resolve,reject,msg){\r\n        if( msg.type === 'BUSY' ){\r\n            reject('worker is busy');\r\n        }else if( msg.type === 'ERROR' ){\r\n            reject(msg.error);\r\n        }else{\r\n            return callback(resolve,reject,msg);\r\n        }\r\n    }\r\n\r\n    _workerMsg({data: msg}){\r\n        const callback = this._callbacks[this._callbacks.length -1];\r\n        const next = callback(msg);\r\n        if( !next ){\r\n            this._callbacks.pop();\r\n        }\r\n    }\r\n\r\n}","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n"],"sourceRoot":""}