{"version":3,"file":"build/928-c2f5089f3701e6103aa8.js","mappings":";AACA,MAAMA,EAAe,EAAQ,OACvBC,EAAa,EAAQ;AAI3B,MAAMC,UAAuBC,MAC5BC,YAAYC,GACX,IAAKC,MAAMC,QAAQF,GAClB,MAAM,IAAIG,UAAU,6CAA6CH;AAgBlE,IAAII,GAbJJ,EAAS,IAAIA,GAAQK,KAAIC,GACpBA,aAAiBR,MACbQ,EAGM,OAAVA,GAAmC,iBAAVA,EAErBC,OAAOC,OAAO,IAAIV,MAAMQ,EAAMF,SAAUE,GAGzC,IAAIR,MAAMQ,MAIhBD,KAAIC,GAE0B,iBAAhBA,EAAMG,MAAwCb,EAAWU,EAAMG,OAxBvCC,QAAQ,gDAAiD,IAwBRC,OAAOL,KAE9FM,KAAK;AACPR,EAAU,KAAOT,EAAaS,EAAS,GACvCS,MAAMT,GAENU,KAAKC,KAAO,iBAEZR,OAAOS,eAAeF,KAAM,UAAW,CAACG,MAAOjB,GAChD,CAEA,EAAGkB,OAAOC,YACT,IAAK,MAAMb,KAASQ,KAAKM,cAClBd,CAER,EAGDe,EAAOC,QAAUzB,C;AC7CjB,MAAM0B,EAAK,EAAQ,OAEbC,EAAmB,0BACnBC,EAAY,+GACZC,OAAgC,IAAfH,EAAGI,QAA0B,GAAKJ,EAAGI;AAE5DN,EAAOC,QAAU,CAACb,EAAOmB,KACxBA,EAAUrB,OAAOC,OAAO,CAACqB,QAAQ,GAAQD,GAElCnB,EAAMC,QAAQ,MAAO,KAC1BoB,MAAM,MACNC,QAAOC,IACP,MAAMC,EAAcD,EAAKE,MAAMV;AAC/B,GAAoB,OAAhBS,IAAyBA,EAAY,GACxC,OAAO;AAGR,MAAMC,EAAQD,EAAY;AAG1B,OACCC,EAAMC,SAAS,2CACfD,EAAMC,SAAS,8CAKRV,EAAUW,KAAKF,EAAM,IAE7BH,QAAOC,GAAwB,KAAhBA,EAAKK,SACpBhC,KAAI2B,GACAJ,EAAQC,OACJG,EAAKtB,QAAQc,GAAkB,CAACc,EAAGC,IAAOD,EAAE5B,QAAQ6B,EAAIA,EAAG7B,QAAQgB,EAAS,QAG7EM,IAEPpB,KAAK,M;ACpCRS,EAAOC,QAAU,CAACkB,EAAQC,EAAQ,EAAGb,KAOpC,GANAA,EAAU,CACTc,OAAQ,IACRC,mBAAmB,KAChBf,GAGkB,iBAAXY,EACV,MAAM,IAAIrC,UACT,uDAAuDqC;AAIzD,GAAqB,iBAAVC,EACV,MAAM,IAAItC,UACT,uDAAuDsC;AAIzD,GAA8B,iBAAnBb,EAAQc,OAClB,MAAM,IAAIvC,UACT,gEAAgEyB,EAAQc;AAI1E,GAAc,IAAVD,EACH,OAAOD;AAGR,MAAMI,EAAQhB,EAAQe,kBAAoB,MAAQ;AAElD,OAAOH,EAAO9B,QAAQkC,EAAOhB,EAAQc,OAAOG,OAAOJ,GAAO,C;AChC3D,MAAM5C,EAAiB,EAAQ;AAE/BwB,EAAOC,QAAUwB,MAChBC,EACAC,GAECC,cAAcC,IACdC,eAAc,GACX,CAAC,IAEE,IAAIC,SAAQ,CAACC,EAASC,KAC5B,GAAsB,mBAAXN,EACV,MAAM,IAAI7C,UAAU;AAGrB,IAAOoD,OAAOC,cAAcP,IAAgBA,IAAgBC,OAAaD,GAAe,GACvF,MAAM,IAAI9C,UAAU,kFAAkF8C,eAAyBA;AAGhI,MAAMQ,EAAS,GACTzD,EAAS,GACTmB,EAAW4B,EAAS7B,OAAOC;AACjC,IAAIuC,GAAa,EACbC,GAAiB,EACjBC,EAAiB,EACjBC,EAAe;AAEnB,MAAMC,EAAO,KACZ,GAAIJ,EACH;AAGD,MAAMK,EAAW5C,EAAS2C,OACpBE,EAAQH;AAGd,GAFAA,IAEIE,EAASE,KAWZ,OAVAN,GAAiB,OAEM,IAAnBC,IACET,GAAiC,IAAlBnD,EAAOkE,OAG1Bb,EAAQI,GAFRH,EAAO,IAAIzD,EAAeG;AAS7B4D,IAEA,WACC,IACC,MAAMO,QAAgBJ,EAAS9C;AAC/BwC,EAAOO,SAAehB,EAAOmB,EAASH,GACtCJ,IACAE,GAUD,CATE,MAAOxD,GACJ6C,GACHO,GAAa,EACbJ,EAAOhD,KAEPN,EAAOoE,KAAK9D,GACZsD,IACAE,IAEF,CACA,EAhBD,EAgBI;AAGL,IAAK,IAAIO,EAAI,EAAGA,EAAIpB,IACnBa,KAEIH,GAH4BU,KAMjC,G;AC7EF,IAAIC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBC,EAAiB,EAAQ,OAIzBC,EAAgB,SAAUC,GAE1B,SAASD,IACLC,EAAOC,MAAMpE,KAAMqE,WACnBrE,KAAKG,MAAQ,KACbH,KAAKsE,SAAU,EACftE,KAAKuE,cAAe,CACxB,CA+BA,OArCAf,EAAUU,EAAcC,GAOaD,EAAaJ,UAAUU,WAAa,SAAUC,GAC/E,OAAIzE,KAAK0E,UACLD,EAAWjF,MAAMQ,KAAK2E,aACfV,EAAeW,aAAaC,OAE9B7E,KAAKuE,cAAgBvE,KAAKsE,SAC/BG,EAAWzB,KAAKhD,KAAKG,OACrBsE,EAAWK,WACJb,EAAeW,aAAaC,OAEhCV,EAAOL,UAAUU,WAAWO,KAAK/E,KAAMyE,EAClD,EACAP,EAAaJ,UAAUd,KAAO,SAAU7C,GAC/BH,KAAKuE,eACNvE,KAAKG,MAAQA,EACbH,KAAKsE,SAAU,EAEvB,EACAJ,EAAaJ,UAAUtE,MAAQ,SAAUA,GAChCQ,KAAKuE,cACNJ,EAAOL,UAAUtE,MAAMuF,KAAK/E,KAAMR,EAE1C,EACA0E,EAAaJ,UAAUgB,SAAW,WAC9B9E,KAAKuE,cAAe,EAChBvE,KAAKsE,SACLH,EAAOL,UAAUd,KAAK+B,KAAK/E,KAAMA,KAAKG,OAE1CgE,EAAOL,UAAUgB,SAASC,KAAK/E,KACnC,EACOkE,CACX,CAvCmB,CAuCjBF,EAAUgB;AACZxE,EAAQ0D,aAAeA,C;AClDvB,IAAIV,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBiB,EAA4B,EAAQ,OAIpCC,EAAmB,SAAUf,GAE7B,SAASe,EAAgBC,GACrBhB,EAAOY,KAAK/E,MACZA,KAAKmF,OAASA,CAClB,CA6BA,OAjCA3B,EAAU0B,EAAiBf,GAK3B1E,OAAOS,eAAegF,EAAgBpB,UAAW,QAAS,CACtDsB,IAAK,WACD,OAAOpF,KAAKqF,UAChB,EACAC,YAAY,EACZC,cAAc,IAEmBL,EAAgBpB,UAAUU,WAAa,SAAUC,GAClF,IAAIe,EAAerB,EAAOL,UAAUU,WAAWO,KAAK/E,KAAMyE;AAI1D,OAHIe,IAAiBA,EAAaC,QAC9BhB,EAAWzB,KAAKhD,KAAKmF,QAElBK,CACX,EACAN,EAAgBpB,UAAUuB,SAAW,WACjC,GAAIrF,KAAK0E,SACL,MAAM1E,KAAK2E;AAEV,GAAI3E,KAAKyF,OACV,MAAM,IAAIR,EAA0BS;AAGpC,OAAO1F,KAAKmF,MAEpB,EACAD,EAAgBpB,UAAUd,KAAO,SAAU7C,GACvCgE,EAAOL,UAAUd,KAAK+B,KAAK/E,KAAMA,KAAKmF,OAAShF,EACnD,EACO+E,CACX,CAnCsB,CAmCpBlB,EAAUgB;AACZxE,EAAQ0E,gBAAkBA,C;AC9C1B,IAAI1B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAOI8B,EAAmB,SAAUxB,GAE7B,SAASwB,EAAgBC,EAAQC,EAAYC,GACzC3B,EAAOY,KAAK/E,MACZA,KAAK4F,OAASA,EACd5F,KAAK6F,WAAaA,EAClB7F,KAAK8F,WAAaA,EAClB9F,KAAKkD,MAAQ,CACjB,CAYA,OAnBAM,EAAUmC,EAAiBxB,GAQ3BwB,EAAgB7B,UAAUiC,MAAQ,SAAU5F,GACxCH,KAAK4F,OAAOI,WAAWhG,KAAK6F,WAAY1F,EAAOH,KAAK8F,WAAY9F,KAAKkD,QAASlD,KAClF,EACA2F,EAAgB7B,UAAUmC,OAAS,SAAUzG,GACzCQ,KAAK4F,OAAOM,YAAY1G,EAAOQ,MAC/BA,KAAKmG,aACT,EACAR,EAAgB7B,UAAUsC,UAAY,WAClCpG,KAAK4F,OAAOS,eAAerG,MAC3BA,KAAKmG,aACT,EACOR,CACX,CArBsB,CANH,EAAQ,OA2BZW;AACf9F,EAAQmF,gBAAkBA,C;ACjC1B,IAAIY,EAAe,EAAQ,OAevBC,EAAgB,WAChB,SAASA,EAAaC,EAAMtG,EAAOX,GAC/BQ,KAAKyG,KAAOA,EACZzG,KAAKG,MAAQA,EACbH,KAAKR,MAAQA,EACbQ,KAAK0G,SAAoB,MAATD,CACpB,CAqGA,OA/FAD,EAAa1C,UAAU6C,QAAU,SAAUC,GACvC,OAAQ5G,KAAKyG,MACT,IAAK,IACD,OAAOG,EAAS5D,MAAQ4D,EAAS5D,KAAKhD,KAAKG;AAC/C,IAAK,IACD,OAAOyG,EAASpH,OAASoH,EAASpH,MAAMQ,KAAKR;AACjD,IAAK,IACD,OAAOoH,EAAS9B,UAAY8B,EAAS9B,WAEjD,EASA0B,EAAa1C,UAAU+C,GAAK,SAAU7D,EAAMxD,EAAOsF,GAE/C,OADW9E,KAAKyG,MAEZ,IAAK,IACD,OAAOzD,GAAQA,EAAKhD,KAAKG;AAC7B,IAAK,IACD,OAAOX,GAASA,EAAMQ,KAAKR;AAC/B,IAAK,IACD,OAAOsF,GAAYA,IAE/B,EAUA0B,EAAa1C,UAAUgD,OAAS,SAAUC,EAAgBvH,EAAOsF,GAC7D,OAAIiC,GAAiD,mBAAxBA,EAAe/D,KACjChD,KAAK2G,QAAQI,GAGb/G,KAAK6G,GAAGE,EAAgBvH,EAAOsF,EAE9C,EAMA0B,EAAa1C,UAAUkD,aAAe,WAElC,OADWhH,KAAKyG,MAEZ,IAAK,IACD,OAAOF,EAAaU,WAAWC,GAAGlH,KAAKG;AAC3C,IAAK,IACD,OAAOoG,EAAaU,WAAWE,MAAMnH,KAAKR;AAC9C,IAAK,IACD,OAAO+G,EAAaU,WAAWG,QAEvC,MAAM,IAAIpI,MAAM,qCACpB,EAQAwH,EAAaa,WAAa,SAAUlH,GAChC,YAAqB,IAAVA,EACA,IAAIqG,EAAa,IAAKrG,GAE1BqG,EAAac,0BACxB,EAQAd,EAAae,YAAc,SAAUC,GACjC,OAAO,IAAIhB,EAAa,SAAKiB,EAAWD,EAC5C,EAKAhB,EAAakB,eAAiB,WAC1B,OAAOlB,EAAamB,oBACxB,EACAnB,EAAamB,qBAAuB,IAAInB,EAAa,KACrDA,EAAac,2BAA6B,IAAId,EAAa,SAAKiB,GACzDjB,CACX,CA5GmB;AA6GnBhG,EAAQgG,aAAeA,C;AC5HvB,IAAIoB,EAAS,EAAQ,OACjBC,EAAiB,EAAQ,OACzBC,EAAe,EAAQ,OACvBC,EAAS,EAAQ,OAOjBd,EAAc,WAQd,SAASA,EAAWe,GAChBhI,KAAKiI,WAAY,EACbD,IACAhI,KAAKwE,WAAawD,EAE1B,CAqRA,OA7QAf,EAAWnD,UAAUoE,KAAO,SAAUC,GAClC,IAAIC,EAAa,IAAInB;AAGrB,OAFAmB,EAAWC,OAASrI,KACpBoI,EAAWD,SAAWA,EACfC,CACX,EAmHAnB,EAAWnD,UAAUkE,UAAY,SAAUM,EAAgB9I,EAAOsF,GAC9D,IAAIqD,EAAWnI,KAAKmI,SAChBI,EAAOV,EAAeW,aAAaF,EAAgB9I,EAAOsF;AAO9D,GANIqD,EACAA,EAASpD,KAAKwD,EAAMvI,KAAKqI,QAGzBE,EAAKE,IAAIzI,KAAKqI,SAAWE,EAAKG,mBAAqB1I,KAAKwE,WAAW+D,GAAQvI,KAAK2I,cAAcJ,IAE9FA,EAAKG,qBACLH,EAAKG,oBAAqB,EACtBH,EAAKK,iBACL,MAAML,EAAKM;AAGnB,OAAON,CACX,EACAtB,EAAWnD,UAAU6E,cAAgB,SAAUJ,GAC3C,IACI,OAAOvI,KAAKwE,WAAW+D,EAM3B,CAJA,MAAOf,GACHe,EAAKK,iBAAkB,EACvBL,EAAKM,eAAiBrB,EACtBe,EAAK/I,MAAMgI,EACf,CACJ,EAQAP,EAAWnD,UAAUgF,QAAU,SAAU9F,EAAM+F,GAC3C,IAAIC,EAAQhJ;AASZ,GARK+I,IACGnB,EAAOqB,KAAKC,IAAMtB,EAAOqB,KAAKC,GAAGC,QAAUvB,EAAOqB,KAAKC,GAAGC,OAAO7G,QACjEyG,EAAcnB,EAAOqB,KAAKC,GAAGC,OAAO7G,QAE/BsF,EAAOqB,KAAK3G,UACjByG,EAAcnB,EAAOqB,KAAK3G,WAG7ByG,EACD,MAAM,IAAI/J,MAAM;AAEpB,OAAO,IAAI+J,GAAY,SAAUxG,EAASC,GAGtC,IAAIgD;AACJA,EAAewD,EAAMhB,WAAU,SAAU7H,GACrC,GAAIqF,EAKA,IACIxC,EAAK7C,EAKT,CAHA,MAAOqH,GACHhF,EAAOgF,GACPhC,EAAaW,aACjB,MASAnD,EAAK7C,EAEb,GAAGqC,EAAQD,EACf,GACJ,EACqC0E,EAAWnD,UAAUU,WAAa,SAAUC,GAC7E,OAAOzE,KAAKqI,OAAOL,UAAUvD,EACjC,EAMAwC,EAAWnD,UAAUgE,EAAaM,YAAc,WAC5C,OAAOpI,IACX,EAoBAiH,EAAWnD,UAAUsF,KAAO,WAExB,IADA,IAAIC,EAAa,GACRC,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCD,EAAWC,EAAK,GAAKjF,UAAUiF;AAEnC,OAA0B,IAAtBD,EAAWjG,OACJpD,KAEJ+H,EAAOwB,cAAcF,EAArBtB,CAAiC/H,KAC5C,EAEAiH,EAAWnD,UAAU0F,UAAY,SAAUT,GACvC,IAAIC,EAAQhJ;AASZ,GARK+I,IACGnB,EAAOqB,KAAKC,IAAMtB,EAAOqB,KAAKC,GAAGC,QAAUvB,EAAOqB,KAAKC,GAAGC,OAAO7G,QACjEyG,EAAcnB,EAAOqB,KAAKC,GAAGC,OAAO7G,QAE/BsF,EAAOqB,KAAK3G,UACjByG,EAAcnB,EAAOqB,KAAK3G,WAG7ByG,EACD,MAAM,IAAI/J,MAAM;AAEpB,OAAO,IAAI+J,GAAY,SAAUxG,EAASC,GACtC,IAAIrC;AACJ6I,EAAMhB,WAAU,SAAUyB,GAAK,OAAOtJ,EAAQsJ,CAAG,IAAG,SAAUjC,GAAO,OAAOhF,EAAOgF,EAAM,IAAG,WAAc,OAAOjF,EAAQpC,EAAQ,GACrI,GACJ,EAWA8G,EAAWlD,OAAS,SAAUiE,GAC1B,OAAO,IAAIf,EAAWe,EAC1B,EACOf,CACX,CAnSiB;AAoSjBzG,EAAQyG,WAAaA,C;AC9SrBzG,EAAQ4G,MAAQ,CACZ3B,QAAQ,EACRzC,KAAM,SAAU7C,GAAS,EACzBX,MAAO,SAAUgI,GAAO,MAAMA,CAAK,EACnC1C,SAAU,WAAc,E;ACJ5B,IAAItB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAOI6F,EAAmB,SAAUvF,GAE7B,SAASuF,IACLvF,EAAOC,MAAMpE,KAAMqE,UACvB,CAUA,OAbAb,EAAUkG,EAAiBvF,GAI3BuF,EAAgB5F,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC7F7J,KAAK8J,YAAY9G,KAAK2G,EAC1B,EACAD,EAAgB5F,UAAUoC,YAAc,SAAU1G,EAAOqK,GACrD7J,KAAK8J,YAAYtK,MAAMA,EAC3B,EACAkK,EAAgB5F,UAAUuC,eAAiB,SAAUwD,GACjD7J,KAAK8J,YAAYhF,UACrB,EACO4E,CACX,CAfsB,CANH,EAAQ,OAqBZpD;AACf9F,EAAQkJ,gBAAkBA,C;AC3B1B,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpB+F,EAAU,EAAQ,OAClB9F,EAAiB,EAAQ,OACzB+F,EAAc,EAAQ,OACtB/E,EAA4B,EAAQ,OACpCgF,EAAwB,EAAQ,OAIhCC,EAAiB,SAAU/F,GAE3B,SAAS+F,EAAcC,EAAYC,EAAYC,QACxB,IAAfF,IAAyBA,EAAa1H,OAAO6H,wBAC9B,IAAfF,IAAyBA,EAAa3H,OAAO6H,mBACjDnG,EAAOY,KAAK/E,MACZA,KAAKqK,UAAYA,EACjBrK,KAAKuK,QAAU,GACfvK,KAAKwK,YAAcL,EAAa,EAAI,EAAIA,EACxCnK,KAAKyK,YAAcL,EAAa,EAAI,EAAIA,CAC5C,CAkEA,OA3EA5G,EAAU0G,EAAe/F,GAUzB+F,EAAcpG,UAAUd,KAAO,SAAU7C,GACrC,IAAIuK,EAAM1K,KAAK2K;AACf3K,KAAKuK,QAAQjH,KAAK,IAAIsH,EAAYF,EAAKvK,IACvCH,KAAK6K,2BACL1G,EAAOL,UAAUd,KAAK+B,KAAK/E,KAAMG,EACrC,EACqC+J,EAAcpG,UAAUU,WAAa,SAAUC,GAChF,IAEIe,EAFA+E,EAAUvK,KAAK6K,2BACfR,EAAYrK,KAAKqK;AAErB,GAAIrK,KAAKyF,OACL,MAAM,IAAIR,EAA0BS;AAE/B1F,KAAK0E,UAGL1E,KAAK8K,UAFVtF,EAAevB,EAAeW,aAAaC,OAM3C7E,KAAK+K,UAAUzH,KAAKmB,GACpBe,EAAe,IAAIyE,EAAsBe,oBAAoBhL,KAAMyE,IAEnE4F,GACA5F,EAAWgE,IAAIhE,EAAa,IAAIuF,EAAYiB,oBAAoBxG,EAAY4F;AAGhF,IADA,IAAIa,EAAMX,EAAQnH,OACTG,EAAI,EAAGA,EAAI2H,IAAQzG,EAAWgB,OAAQlC,IAC3CkB,EAAWzB,KAAKuH,EAAQhH,GAAGpD;AAQ/B,OANIH,KAAK0E,SACLD,EAAWjF,MAAMQ,KAAK2E,aAEjB3E,KAAK8K,WACVrG,EAAWK,WAERU,CACX,EACA0E,EAAcpG,UAAU6G,QAAU,WAC9B,OAAQ3K,KAAKqK,WAAaN,EAAQoB,OAAOT,KAC7C,EACAR,EAAcpG,UAAU+G,yBAA2B,WAU/C,IATA,IAAIH,EAAM1K,KAAK2K,UACXH,EAAcxK,KAAKwK,YACnBC,EAAczK,KAAKyK,YACnBF,EAAUvK,KAAKuK,QACfa,EAAcb,EAAQnH,OACtBiI,EAAc,EAIXA,EAAcD,KACZV,EAAMH,EAAQc,GAAaC,KAAQb,IAGxCY;AAQJ,OANID,EAAcZ,IACda,EAAcE,KAAKC,IAAIH,EAAaD,EAAcZ,IAElDa,EAAc,GACdd,EAAQkB,OAAO,EAAGJ,GAEfd,CACX,EACOL,CACX,CA7EoB,CA6ElBlG,EAAUgB;AACZxE,EAAQ0J,cAAgBA;AACxB,IAAIU,EACA,SAAqBU,EAAMnL,GACvBH,KAAKsL,KAAOA,EACZtL,KAAKG,MAAQA,CACjB,C;IC7FA6D,EAAY,EAAQ;AACxBxD,EAAQ,GAAUwD,EAAUgB,QACDhB,EAAU0H;AAErC,IAAInF,EAAe,EAAQ;AAC3B/F,EAAQ,GAAa+F,EAAaU,WAGla,EAAQ,OACSrC,aACnB,EAAQ,OACO0B,WACb,EAAQ,OACSpC,aAChB,EAAQ,OACUgG,cAChB,EAAQ,OACYhF,gBACd,EAAQ,OACkByG,sBACnC,EAAQ,OACSnF,aACnB,EAAQ,OACOoF,WACF,EAAQ,OACoBC,wBAC5B,EAAQ,OACoBnG,wBACvC,EAAQ,OACSoG,aACV,EAAQ,OACgBC,oBAC/B,EAAQ,OACSC,aACpB,EAAQ,OACMC,UACV,EAAQ,OACUC,cACX,EAAQ,OACiBC;AACtD,IAAIC,EAAmB,EAAQ;AACRA,EAAiBC,aACpBD,EAAiBE,UACVF,EAAiBG,iBAC/B,EAAQ,OACCnD;AACtB,IAAIoD,EAAS,EAAQ,OACjBC,EAAU,EAAQ,OAClB1C,EAAU,EAAQ,OAClB2C,EAAmB,EAAQ,OAC3BC,EAAiB,EAAQ,OACzBC,EAAa,EAAQ,MACrB9E,EAAe,EAAQ;AACV,EAAQ,OAiBf0E,EAAOK,KACN9C,EAAQoB,MACCuB,EAAiBI,eAC1BL,EAAQzK,MAiBD2K,EAAeI,aACjBjF,EAAaM,WACfwE,EAAWvM,Q;ACpNzB,IAAI2M,EAAa,WACb,SAASA,EAAUC,EAAiBvC,QACpB,IAARA,IAAkBA,EAAMsC,EAAUtC,KACtC1K,KAAKiN,gBAAkBA,EACvBjN,KAAK0K,IAAMA,CACf,CAuBA,OALAsC,EAAUlJ,UAAUoJ,SAAW,SAAUC,EAAMC,EAAOC,GAElD,YADc,IAAVD,IAAoBA,EAAQ,GACzB,IAAIpN,KAAKiN,gBAAgBjN,KAAMmN,GAAMD,SAASG,EAAOD,EAChE,EACAJ,EAAUtC,IAAM4C,KAAK5C,IAAM4C,KAAK5C,IAAM,WAAc,OAAQ,IAAI4C,IAAQ,EACjEN,CACX,CA7BgB;AA8BhBxM,EAAQwM,UAAYA,C;AC9CpB,IAAIxJ,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBgH,EAAe,EAAQ,OACvBtJ,EAAiB,EAAQ,OACzBgB,EAA4B,EAAQ,OACpCgF,EAAwB,EAAQ,OAChC0C,EAAiB,EAAQ,OAIzBa,EAAqB,SAAUrJ,GAE/B,SAASqJ,EAAkB1D,GACvB3F,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8J,YAAcA,CACvB,CACA,OALAtG,EAAUgK,EAAmBrJ,GAKtBqJ,CACX,CAPwB,CAOtBD,EAAajH;AACf9F,EAAQgN,kBAAoBA;AAI5B,IAAIxI,EAAW,SAAUb,GAErB,SAASa,IACLb,EAAOY,KAAK/E,MACZA,KAAK+K,UAAY,GACjB/K,KAAKyF,QAAS,EACdzF,KAAK8K,WAAY,EACjB9K,KAAK0E,UAAW,EAChB1E,KAAK2E,YAAc,IACvB,CAwFA,OAhGAnB,EAAUwB,EAASb,GASnBa,EAAQlB,UAAU6I,EAAeI,cAAgB,WAC7C,OAAO,IAAIS,EAAkBxN,KACjC,EACAgF,EAAQlB,UAAUoE,KAAO,SAAUC,GAC/B,IAAIsF,EAAU,IAAI/B,EAAiB1L,KAAMA;AAEzC,OADAyN,EAAQtF,SAAWA,EACZsF,CACX,EACAzI,EAAQlB,UAAUd,KAAO,SAAU7C,GAC/B,GAAIH,KAAKyF,OACL,MAAM,IAAIR,EAA0BS;AAExC,IAAK1F,KAAK8K,UAIN,IAHA,IAAIC,EAAY/K,KAAK+K,UACjBG,EAAMH,EAAU3H,OAChBsK,EAAO3C,EAAU4C,QACZpK,EAAI,EAAGA,EAAI2H,EAAK3H,IACrBmK,EAAKnK,GAAGP,KAAK7C,EAGzB,EACA6E,EAAQlB,UAAUtE,MAAQ,SAAUgI,GAChC,GAAIxH,KAAKyF,OACL,MAAM,IAAIR,EAA0BS;AAExC1F,KAAK0E,UAAW,EAChB1E,KAAK2E,YAAc6C,EACnBxH,KAAK8K,WAAY;AAIjB,IAHA,IAAIC,EAAY/K,KAAK+K,UACjBG,EAAMH,EAAU3H,OAChBsK,EAAO3C,EAAU4C,QACZpK,EAAI,EAAGA,EAAI2H,EAAK3H,IACrBmK,EAAKnK,GAAG/D,MAAMgI;AAElBxH,KAAK+K,UAAU3H,OAAS,CAC5B,EACA4B,EAAQlB,UAAUgB,SAAW,WACzB,GAAI9E,KAAKyF,OACL,MAAM,IAAIR,EAA0BS;AAExC1F,KAAK8K,WAAY;AAIjB,IAHA,IAAIC,EAAY/K,KAAK+K,UACjBG,EAAMH,EAAU3H,OAChBsK,EAAO3C,EAAU4C,QACZpK,EAAI,EAAGA,EAAI2H,EAAK3H,IACrBmK,EAAKnK,GAAGuB;AAEZ9E,KAAK+K,UAAU3H,OAAS,CAC5B,EACA4B,EAAQlB,UAAUqC,YAAc,WAC5BnG,KAAK8K,WAAY,EACjB9K,KAAKyF,QAAS,EACdzF,KAAK+K,UAAY,IACrB,EACA/F,EAAQlB,UAAU6E,cAAgB,SAAUlE,GACxC,GAAIzE,KAAKyF,OACL,MAAM,IAAIR,EAA0BS;AAGpC,OAAOvB,EAAOL,UAAU6E,cAAc5D,KAAK/E,KAAMyE,EAEzD,EACqCO,EAAQlB,UAAUU,WAAa,SAAUC,GAC1E,GAAIzE,KAAKyF,OACL,MAAM,IAAIR,EAA0BS;AAEnC,OAAI1F,KAAK0E,UACVD,EAAWjF,MAAMQ,KAAK2E,aACfV,EAAeW,aAAaC,OAE9B7E,KAAK8K,WACVrG,EAAWK,WACJb,EAAeW,aAAaC,QAGnC7E,KAAK+K,UAAUzH,KAAKmB,GACb,IAAIwF,EAAsBe,oBAAoBhL,KAAMyE,GAEnE,EACAO,EAAQlB,UAAU8J,aAAe,WAC7B,IAAIxF,EAAa,IAAI7B,EAAaU;AAElC,OADAmB,EAAWC,OAASrI,KACboI,CACX,EACApD,EAAQjB,OAAS,SAAU+F,EAAazB,GACpC,OAAO,IAAIqD,EAAiB5B,EAAazB,EAC7C,EACOrD,CACX,CAlGc,CAkGZuB,EAAaU;AACfzG,EAAQwE,QAAUA;AAIlB,IAAI0G,EAAoB,SAAUvH,GAE9B,SAASuH,EAAiB5B,EAAazB,GACnClE,EAAOY,KAAK/E,MACZA,KAAK8J,YAAcA,EACnB9J,KAAKqI,OAASA,CAClB,CA4BA,OAjCA7E,EAAUkI,EAAkBvH,GAM5BuH,EAAiB5H,UAAUd,KAAO,SAAU7C,GACxC,IAAI2J,EAAc9J,KAAK8J;AACnBA,GAAeA,EAAY9G,MAC3B8G,EAAY9G,KAAK7C,EAEzB,EACAuL,EAAiB5H,UAAUtE,MAAQ,SAAUgI,GACzC,IAAIsC,EAAc9J,KAAK8J;AACnBA,GAAeA,EAAYtK,OAC3BQ,KAAK8J,YAAYtK,MAAMgI,EAE/B,EACAkE,EAAiB5H,UAAUgB,SAAW,WAClC,IAAIgF,EAAc9J,KAAK8J;AACnBA,GAAeA,EAAYhF,UAC3B9E,KAAK8J,YAAYhF,UAEzB,EACqC4G,EAAiB5H,UAAUU,WAAa,SAAUC,GAEnF,OADazE,KAAKqI,OAEPrI,KAAKqI,OAAOL,UAAUvD,GAGtBR,EAAeW,aAAaC,KAE3C,EACO6G,CACX,CAnCuB,CAmCrB1G;AACFxE,EAAQkL,iBAAmBA,C;ACrK3B,IAAIlI,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAOImH,EAAuB,SAAU7G,GAEjC,SAAS6G,EAAoByC,EAAShJ,GAClCN,EAAOY,KAAK/E,MACZA,KAAKyN,QAAUA,EACfzN,KAAKyE,WAAaA,EAClBzE,KAAKyF,QAAS,CAClB,CAiBA,OAvBAjC,EAAUwH,EAAqB7G,GAO/B6G,EAAoBlH,UAAUqC,YAAc,WACxC,IAAInG,KAAKyF,OAAT,CAGAzF,KAAKyF,QAAS;AACd,IAAIgI,EAAUzN,KAAKyN,QACf1C,EAAY0C,EAAQ1C;AAExB,GADA/K,KAAKyN,QAAU,KACV1C,GAAkC,IAArBA,EAAU3H,SAAgBqK,EAAQ3C,YAAa2C,EAAQhI,OAAzE,CAGA,IAAIoI,EAAkB9C,EAAU+C,QAAQ9N,KAAKyE,aACpB,IAArBoJ,GACA9C,EAAUU,OAAOoC,EAAiB,EAHtC,CAPA,CAYJ,EACO7C,CACX,CAzB0B,CANL,EAAQ,OA+BZpG;AACjBpE,EAAQwK,oBAAsBA,C;ACrC9B,IAAIxH,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIkK,EAAe,EAAQ,OACvB9J,EAAiB,EAAQ,OACzB+J,EAAa,EAAQ,MACrBrB,EAAiB,EAAQ,OAWzBrG,EAAc,SAAUnC,GAUxB,SAASmC,EAAW2H,EAAmBzO,EAAOsF,GAM1C,OALAX,EAAOY,KAAK/E,MACZA,KAAK6I,eAAiB,KACtB7I,KAAK4I,iBAAkB,EACvB5I,KAAK0I,oBAAqB,EAC1B1I,KAAK8K,WAAY,EACTzG,UAAUjB,QACd,KAAK,EACDpD,KAAK8J,YAAckE,EAAW5G;AAC9B;AACJ,KAAK,EACD,IAAK6G,EAAmB,CACpBjO,KAAK8J,YAAckE,EAAW5G;AAC9B,KACJ,CACA,GAAiC,iBAAtB6G,EAAgC,CAGvC,GAAIC,EAAoBD,GAAoB,CACxC,IAAIE,EAAoBF,EAAkBtB,EAAeI;AACzD/M,KAAK0I,mBAAqByF,EAAkBzF,mBAC5C1I,KAAK8J,YAAcqE,EACnBA,EAAkB1F,IAAIzI,KAC1B,MAEIA,KAAK0I,oBAAqB,EAC1B1I,KAAK8J,YAAc,IAAIsE,EAAepO,KAAMiO;AAEhD,KACJ,CACJ,QACIjO,KAAK0I,oBAAqB,EAC1B1I,KAAK8J,YAAc,IAAIsE,EAAepO,KAAMiO,EAAmBzO,EAAOsF,GAGlF,CAoFA,OAhIAtB,EAAU8C,EAAYnC,GA6CtBmC,EAAWxC,UAAU6I,EAAeI,cAAgB,WAAc,OAAO/M,IAAM,EAY/EsG,EAAWvC,OAAS,SAAUf,EAAMxD,EAAOsF,GACvC,IAAIL,EAAa,IAAI6B,EAAWtD,EAAMxD,EAAOsF;AAE7C,OADAL,EAAWiE,oBAAqB,EACzBjE,CACX,EAQA6B,EAAWxC,UAAUd,KAAO,SAAU7C,GAC7BH,KAAK8K,WACN9K,KAAK+F,MAAM5F,EAEnB,EAQAmG,EAAWxC,UAAUtE,MAAQ,SAAUgI,GAC9BxH,KAAK8K,YACN9K,KAAK8K,WAAY,EACjB9K,KAAKiG,OAAOuB,GAEpB,EAOAlB,EAAWxC,UAAUgB,SAAW,WACvB9E,KAAK8K,YACN9K,KAAK8K,WAAY,EACjB9K,KAAKoG,YAEb,EACAE,EAAWxC,UAAUqC,YAAc,WAC3BnG,KAAKyF,SAGTzF,KAAK8K,WAAY,EACjB3G,EAAOL,UAAUqC,YAAYpB,KAAK/E,MACtC,EACAsG,EAAWxC,UAAUiC,MAAQ,SAAU5F,GACnCH,KAAK8J,YAAY9G,KAAK7C,EAC1B,EACAmG,EAAWxC,UAAUmC,OAAS,SAAUuB,GACpCxH,KAAK8J,YAAYtK,MAAMgI,GACvBxH,KAAKmG,aACT,EACAG,EAAWxC,UAAUsC,UAAY,WAC7BpG,KAAK8J,YAAYhF,WACjB9E,KAAKmG,aACT,EACqCG,EAAWxC,UAAUuK,uBAAyB,WAC/E,IAAeC,EAANtO,KAAmBsO,QAASC,EAA5BvO,KAA0CuO;AAQnD,OAPAvO,KAAKsO,QAAU,KACftO,KAAKuO,SAAW,KAChBvO,KAAKmG,cACLnG,KAAKyF,QAAS,EACdzF,KAAK8K,WAAY,EACjB9K,KAAKsO,QAAUA,EACftO,KAAKuO,SAAWA,EACTvO,IACX,EACOsG,CACX,CAlIiB,CAkIfrC,EAAeW;AACjBpE,EAAQ8F,WAAaA;AAMrB,IAAI8H,EAAkB,SAAUjK,GAE5B,SAASiK,EAAeI,EAAmBlG,EAAgB9I,EAAOsF,GAG9D,IAAI9B;AAFJmB,EAAOY,KAAK/E,MACZA,KAAKwO,kBAAoBA;AAEzB,IAAIC,EAAUzO;AACV+N,EAAaW,WAAWpG,GACxBtF,EAAOsF,EAEFA,IACLtF,EAAOsF,EAAetF,KACtBxD,EAAQ8I,EAAe9I,MACvBsF,EAAWwD,EAAexD,SACtBwD,IAAmB0F,EAAW5G,QAC9BqH,EAAUhP,OAAOsE,OAAOuE,GACpByF,EAAaW,WAAWD,EAAQtI,cAChCnG,KAAKyI,IAAIgG,EAAQtI,YAAYwI,KAAKF,IAEtCA,EAAQtI,YAAcnG,KAAKmG,YAAYwI,KAAK3O,QAGpDA,KAAK4O,SAAWH,EAChBzO,KAAK+F,MAAQ/C,EACbhD,KAAKiG,OAASzG,EACdQ,KAAKoG,UAAYtB,CACrB,CAkFA,OA3GAtB,EAAU4K,EAAgBjK,GA0B1BiK,EAAetK,UAAUd,KAAO,SAAU7C,GACtC,IAAKH,KAAK8K,WAAa9K,KAAK+F,MAAO,CAC/B,IAAIyI,EAAoBxO,KAAKwO;AACxBA,EAAkB9F,mBAGd1I,KAAK6O,gBAAgBL,EAAmBxO,KAAK+F,MAAO5F,IACzDH,KAAKmG,cAHLnG,KAAK8O,aAAa9O,KAAK+F,MAAO5F,EAKtC,CACJ,EACAiO,EAAetK,UAAUtE,MAAQ,SAAUgI,GACvC,IAAKxH,KAAK8K,UAAW,CACjB,IAAI0D,EAAoBxO,KAAKwO;AAC7B,GAAIxO,KAAKiG,OACAuI,EAAkB9F,oBAKnB1I,KAAK6O,gBAAgBL,EAAmBxO,KAAKiG,OAAQuB,GACrDxH,KAAKmG,gBALLnG,KAAK8O,aAAa9O,KAAKiG,OAAQuB,GAC/BxH,KAAKmG;IAOR,KAAKqI,EAAkB9F,mBAExB,MADA1I,KAAKmG,cACCqB;AAGNgH,EAAkB3F,eAAiBrB,EACnCgH,EAAkB5F,iBAAkB,EACpC5I,KAAKmG,aACT,CACJ,CACJ,EACAiI,EAAetK,UAAUgB,SAAW,WAChC,IAAIkE,EAAQhJ;AACZ,IAAKA,KAAK8K,UAAW,CACjB,IAAI0D,EAAoBxO,KAAKwO;AAC7B,GAAIxO,KAAKoG,UAAW,CAChB,IAAI2I,EAAkB,WAAc,OAAO/F,EAAM5C,UAAUrB,KAAKiE,EAAM4F,SAAW;AAC5EJ,EAAkB9F,oBAKnB1I,KAAK6O,gBAAgBL,EAAmBO,GACxC/O,KAAKmG,gBALLnG,KAAK8O,aAAaC,GAClB/O,KAAKmG,cAMb,MAEInG,KAAKmG,aAEb,CACJ,EACAiI,EAAetK,UAAUgL,aAAe,SAAUE,EAAI7O,GAClD,IACI6O,EAAGjK,KAAK/E,KAAK4O,SAAUzO,EAK3B,CAHA,MAAOqH,GAEH,MADAxH,KAAKmG,cACCqB,CACV,CACJ,EACA4G,EAAetK,UAAU+K,gBAAkB,SAAUjJ,EAAQoJ,EAAI7O,GAC7D,IACI6O,EAAGjK,KAAK/E,KAAK4O,SAAUzO,EAM3B,CAJA,MAAOqH,GAGH,OAFA5B,EAAOiD,eAAiBrB,EACxB5B,EAAOgD,iBAAkB,GAClB,CACX,CACA,OAAO,CACX,EACqCwF,EAAetK,UAAUmL,aAAe,WACzE,IAAIT,EAAoBxO,KAAKwO;AAC7BxO,KAAK4O,SAAW,KAChB5O,KAAKwO,kBAAoB,KACzBA,EAAkBrI,aACtB,EACOiI,CACX,CA7GqB,CA6GnB9H;AACF,SAAS4H,EAAoBgB,GACzB,OAAOA,aAAe5I,GAAe,uBAAwB4I,GAAOA,EAAIvC,EAAeI,aAC3F,C;AC5QA,IAAIoC,EAAY,EAAQ,OACpBC,EAAa,EAAQ,OACrBrB,EAAe,EAAQ,OACvBsB,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBC,EAAwB,EAAQ,OAahC3K,EAAgB,WAKhB,SAASA,EAAauB,GAKlBnG,KAAKyF,QAAS,EACdzF,KAAKsO,QAAU,KACftO,KAAKuO,SAAW,KAChBvO,KAAKwP,eAAiB,KAClBrJ,IACAnG,KAAKiP,aAAe9I,EAE5B,CAkJsB,IAAUiB;AAIhC,OA/IAxC,EAAad,UAAUqC,YAAc,WACjC,IACIjH,EADAuQ,GAAY;AAEhB,IAAIzP,KAAKyF,OAAT,CAGA,IAAIiK,EAAK1P,KAAMsO,EAAUoB,EAAGpB,QAASC,EAAWmB,EAAGnB,SAAUU,EAAeS,EAAGT,aAAcO,EAAiBE,EAAGF;AACjHxP,KAAKyF,QAAS,EACdzF,KAAKsO,QAAU,KACftO,KAAKuO,SAAW,KAGhBvO,KAAKwP,eAAiB;AAKtB,IAJA,IAAItM,GAAS,EACTgI,EAAMqD,EAAWA,EAASnL,OAAS,EAGhCkL,GACHA,EAAQqB,OAAO3P,MAGfsO,IAAYpL,EAAQgI,GAAOqD,EAASrL,IAAU;AAElD,GAAI6K,EAAaW,WAAWO,GACZI,EAAWO,SAASX,GAAclK,KAAK/E,QACrCsP,EAAcO,cACxBJ,GAAY,EACZvQ,EAASA,IAAWoQ,EAAcO,YAAYC,aAAaP,EAAsBxD,oBAC7EgE,EAA4BT,EAAcO,YAAYC,EAAE5Q,QAAU,CAACoQ,EAAcO,YAAYC;AAGzG,GAAIX,EAAU/P,QAAQoQ,GAGlB,IAFAtM,GAAS,EACTgI,EAAMsE,EAAepM,SACZF,EAAQgI,GAAK,CAClB,IAAI8E,EAAMR,EAAetM;AACzB,GAAIkM,EAAWa,SAASD,GAEpB,GADYX,EAAWO,SAASI,EAAI7J,aAAapB,KAAKiL,KACxCV,EAAcO,YAAa,CACrCJ,GAAY,EACZvQ,EAASA,GAAU;AACnB,IAAIsI,EAAM8H,EAAcO,YAAYC;AAChCtI,aAAe+H,EAAsBxD,oBACrC7M,EAASA,EAAOgR,OAAOH,EAA4BvI,EAAItI,SAGvDA,EAAOoE,KAAKkE,EAEpB,CAER,CAEJ,GAAIiI,EACA,MAAM,IAAIF,EAAsBxD,oBAAoB7M,EAhDxD,CAkDJ,EAmBA0F,EAAad,UAAU2E,IAAM,SAAU0H,GACnC,IAAKA,GAAaA,IAAavL,EAAaC,MACxC,OAAOD,EAAaC;AAExB,GAAIsL,IAAanQ,KACb,OAAOA;AAEX,IAAIwF,EAAe2K;AACnB,cAAeA,GACX,IAAK,WACD3K,EAAe,IAAIZ,EAAauL;AACpC,IAAK,SACD,GAAI3K,EAAaC,QAA8C,mBAA7BD,EAAaW,YAC3C,OAAOX;AAEN,GAAIxF,KAAKyF,OAEV,OADAD,EAAaW,cACNX;AAEN,GAAuC,mBAA5BA,EAAa4K,WAA6C,CACtE,IAAIC,EAAM7K,GACVA,EAAe,IAAIZ,GACN4K,eAAiB,CAACa,EACnC,CACA;AACJ,QACI,MAAM,IAAIrR,MAAM,yBAA2BmR,EAAW,2BAK9D,OAHoBnQ,KAAKwP,iBAAmBxP,KAAKwP,eAAiB,KACpDlM,KAAKkC,GACnBA,EAAa4K,WAAWpQ,MACjBwF,CACX,EAOAZ,EAAad,UAAU6L,OAAS,SAAUnK,GACtC,IAAI8K,EAAgBtQ,KAAKwP;AACzB,GAAIc,EAAe,CACf,IAAIC,EAAoBD,EAAcxC,QAAQtI,IACnB,IAAvB+K,GACAD,EAAc7E,OAAO8E,EAAmB,EAEhD,CACJ,EACA3L,EAAad,UAAUsM,WAAa,SAAUxK,GAC1C,IAAe0I,EAANtO,KAAmBsO,QAASC,EAA5BvO,KAA0CuO;AAC9CD,GAAWA,IAAY1I,EAKlB2I,GAK6B,IAA9BA,EAAST,QAAQlI,IAEtB2I,EAASjL,KAAKsC,GAJd5F,KAAKuO,SAAW,CAAC3I,GALjB5F,KAAKsO,QAAU1I,CAWvB,EACAhB,EAAaC,QAAmBuC,EAG9B,IAAIxC,GAFIa,QAAS,EACR2B,GAEJxC,CACX,CAxKmB;AA0KnB,SAASmL,EAA4B7Q,GACjC,OAAOA,EAAOsR,QAAO,SAAUC,EAAMjJ,GAAO,OAAOiJ,EAAKP,OAAQ1I,aAAe+H,EAAsBxD,oBAAuBvE,EAAItI,OAASsI,EAAM,GAAG,GACtJ,CAHAhH,EAAQoE,aAAeA,C;AC3LvB,IAAI2B,EAAe,EAAQ,OACvBmK,EAAiB,EAAQ;AAC7BnK,EAAaU,WAAW0J,aAAeD,EAAeC,Y;ACFtD,IAAIpK,EAAe,EAAQ,OACvBqK,EAAqB,EAAQ;AACjCrK,EAAaU,WAAW4J,iBAAmBD,EAAmBC,gB;ACF9D,IAAItK,EAAe,EAAQ,OACvBuK,EAAkB,EAAQ;AAC9BvK,EAAaU,WAAW8J,cAAgBD,EAAgBC,a;ACFxD,IAAIxK,EAAe,EAAQ,OACvByK,EAAW,EAAQ;AACvBzK,EAAaU,WAAWiJ,OAASc,EAASd,M;ACF1C,IAAI3J,EAAe,EAAQ,OACvB0K,EAAU,EAAQ;AACtB1K,EAAaU,WAAWiK,MAAQD,EAAQC,K;ACFxC,IAAI3K,EAAe,EAAQ,OACvB4K,EAAS,EAAQ;AACrB5K,EAAaU,WAAWmK,KAAOD,EAAOC,I;ACFtC,IAAI7K,EAAe,EAAQ,OACvB8K,EAAc,EAAQ;AAC1B9K,EAAaU,WAAWqK,UAAYD,EAAYC,S;ACFhD,IAAI/K,EAAe,EAAQ,OACvBgL,EAAU,EAAQ;AACtBhL,EAAaU,WAAWG,MAAQmK,EAAQnK,K;ACFxC,IAAIb,EAAe,EAAQ,OACvBiL,EAAa,EAAQ;AACzBjL,EAAaU,WAAWwK,SAAWD,EAAWC,Q;ACF9C,IAAIlL,EAAe,EAAQ,OACvBmL,EAAS,EAAQ;AACrBnL,EAAaU,WAAW0K,KAAOD,EAAOC,I;ACFtC,IAAIpL,EAAe,EAAQ,OACvBqL,EAAc,EAAQ;AAC1BrL,EAAaU,WAAW4K,UAAYD,EAAYC,S;ACFhD,IAAItL,EAAe,EAAQ,OACvBuL,EAAqB,EAAQ;AACjCvL,EAAaU,WAAW8K,iBAAmBD,EAAmBC,gB;ACF9D,IAAIxL,EAAe,EAAQ,OACvByL,EAAgB,EAAQ;AAC5BzL,EAAaU,WAAWgL,YAAcD,EAAcC,W;ACFpD,IAAI1L,EAAe,EAAQ,OACvB2L,EAAa,EAAQ;AACzB3L,EAAaU,WAAWkL,SAAWD,EAAWC,Q;ACF9C,IAAI5L,EAAe,EAAQ,OACvB6L,EAAO,EAAQ;AACnB7L,EAAaU,WAAWoL,GAAKD,EAAKE,G;ACFlC,IAAI/L,EAAe,EAAQ,OACvBgM,EAAa,EAAQ;AACzBhM,EAAaU,WAAWuL,SAAWD,EAAWC,Q;ACF9C,IAAIjM,EAAe,EAAQ,OACvBkM,EAAU,EAAQ;AACtBlM,EAAaU,WAAWyL,MAAQD,EAAQC,K;ACFxC,IAAInM,EAAe,EAAQ,OACvBoM,EAAU,EAAQ;AACtBpM,EAAaU,WAAW2L,MAAQD,EAAQC,K;ACFxC,IAAIrM,EAAe,EAAQ,OACvBsM,EAAO,EAAQ;AACnBtM,EAAaU,WAAWC,GAAK2L,EAAK3L,E;ACFlC,IAAIX,EAAe,EAAQ,OACvBuM,EAAsB,EAAQ;AAClCvM,EAAaU,WAAW8L,kBAAoBD,EAAoBC,iB;ACFhE,IAAIxM,EAAe,EAAQ,OACvByM,EAAU,EAAQ;AACtBzM,EAAaU,WAAWgM,MAAQD,EAAQC,K;ACFxC,IAAI1M,EAAe,EAAQ,OACvB2M,EAAS,EAAQ;AACrB3M,EAAaU,WAAWkM,KAAOD,EAAOC,I;ACFtC,IAAI5M,EAAe,EAAQ,OACvB6M,EAAU,EAAQ;AACtB7M,EAAaU,WAAWoM,MAAQD,EAAQC,K;ACFxC,IAAI9M,EAAe,EAAQ,OACvB+M,EAAU,EAAQ;AACtB/M,EAAaU,WAAWE,MAAQmM,EAAQC,M;ACFxC,IAAIhN,EAAe,EAAQ,OACvBiN,EAAU,EAAQ;AACtBjN,EAAaU,WAAWwM,MAAQD,EAAQC,K;ACFxC,IAAIlN,EAAe,EAAQ,OACvBmN,EAAU,EAAQ;AACtBnN,EAAaU,WAAW0M,MAAQD,EAAQC,K;ACFxC,IAAIpN,EAAe,EAAQ,OACvBqN,EAAQ,EAAQ;AACpBrN,EAAaU,WAAW4M,IAAMD,EAAMC,G;ACFpC,IAAItN,EAAe,EAAQ,OACvBuN,EAAU,EAAQ;AACtBvN,EAAaU,WAAWnD,UAAUiQ,MAAQD,EAAQC,K;ACFlD,IAAIxN,EAAe,EAAQ,OACvByN,EAAc,EAAQ;AAC1BzN,EAAaU,WAAWnD,UAAUmQ,UAAYD,EAAYC,S;ACF1D,IAAI1N,EAAe,EAAQ,OACvB2N,EAAW,EAAQ;AACvB3N,EAAaU,WAAWnD,UAAUqQ,OAASD,EAASC,M;ACFpD,IAAI5N,EAAe,EAAQ,OACvB6N,EAAgB,EAAQ;AAC5B7N,EAAaU,WAAWnD,UAAUuQ,YAAcD,EAAcC,W;ACF9D,IAAI9N,EAAe,EAAQ,OACvB+N,EAAe,EAAQ;AAC3B/N,EAAaU,WAAWnD,UAAUyQ,WAAaD,EAAaC,U;ACF5D,IAAIhO,EAAe,EAAQ,OACvBiO,EAAiB,EAAQ;AAC7BjO,EAAaU,WAAWnD,UAAU2Q,aAAeD,EAAeC,Y;ACFhE,IAAIlO,EAAe,EAAQ,OACvBmO,EAAe,EAAQ;AAC3BnO,EAAaU,WAAWnD,UAAU6Q,WAAaD,EAAaC,U;ACF5D,IAAIpO,EAAe,EAAQ,OACvBqO,EAAU,EAAQ;AACtBrO,EAAaU,WAAWnD,UAAU+Q,MAAQD,EAAQE,OAClDvO,EAAaU,WAAWnD,UAAUgR,OAASF,EAAQE,M;ACHnD,IAAIvO,EAAe,EAAQ,OACvBwO,EAAe,EAAQ;AAC3BxO,EAAaU,WAAWnD,UAAUkR,WAAaD,EAAaC,U;ACF5D,IAAIzO,EAAe,EAAQ,OACvBuK,EAAkB,EAAQ;AAC9BvK,EAAaU,WAAWnD,UAAUiN,cAAgBD,EAAgBC,a;ACFlE,IAAIxK,EAAe,EAAQ,OACvByK,EAAW,EAAQ;AACvBzK,EAAaU,WAAWnD,UAAUoM,OAASc,EAASd,M;ACFpD,IAAI3J,EAAe,EAAQ,OACvB0O,EAAc,EAAQ;AAC1B1O,EAAaU,WAAWnD,UAAUoR,UAAYD,EAAYC,S;ACF1D,IAAI3O,EAAe,EAAQ,OACvB4O,EAAc,EAAQ;AAC1B5O,EAAaU,WAAWnD,UAAUsR,UAAYD,EAAYC,S;ACF1D,IAAI7O,EAAe,EAAQ,OACvB8O,EAAgB,EAAQ;AAC5B9O,EAAaU,WAAWnD,UAAUwR,YAAcD,EAAcC,W;ACF9D,IAAI/O,EAAe,EAAQ,OACvBgP,EAAU,EAAQ;AACtBhP,EAAaU,WAAWnD,UAAUnC,MAAQ4T,EAAQ5T,K;ACFlD,IAAI4E,EAAe,EAAQ,OACvBiP,EAAa,EAAQ;AACzBjP,EAAaU,WAAWnD,UAAU2R,SAAWD,EAAWC,Q;ACFxD,IAAIlP,EAAe,EAAQ,OACvBmP,EAAiB,EAAQ;AAC7BnP,EAAaU,WAAWnD,UAAU6R,aAAeD,EAAeC,Y;ACFhE,IAAIpP,EAAe,EAAQ,OACvBqP,EAAmB,EAAQ;AAC/BrP,EAAaU,WAAWnD,UAAU+R,eAAiBD,EAAiBC,c;ACFpE,IAAItP,EAAe,EAAQ,OACvBuP,EAAU,EAAQ;AACtBvP,EAAaU,WAAWnD,UAAUsJ,MAAQ0I,EAAQ1I,K;ACFlD,IAAI7G,EAAe,EAAQ,OACvBwP,EAAc,EAAQ;AAC1BxP,EAAaU,WAAWnD,UAAUkS,UAAYD,EAAYC,S;ACF1D,IAAIzP,EAAe,EAAQ,OACvB0P,EAAkB,EAAQ;AAC9B1P,EAAaU,WAAWnD,UAAUoS,cAAgBD,EAAgBC,a;ACFlE,IAAI3P,EAAe,EAAQ,OACvB4P,EAAa,EAAQ;AACzB5P,EAAaU,WAAWnD,UAAUsS,SAAWD,EAAWC,Q;ACFxD,IAAI7P,EAAe,EAAQ,OACvB8P,EAAyB,EAAQ;AACrC9P,EAAaU,WAAWnD,UAAUwS,qBAAuBD,EAAuBC,oB;ACFhF,IAAI/P,EAAe,EAAQ,OACvBgQ,EAA4B,EAAQ;AACxChQ,EAAaU,WAAWnD,UAAU0S,wBAA0BD,EAA0BC,uB;ACFtF,IAAIjQ,EAAe,EAAQ,OACvBkQ,EAAO,EAAQ;AACnBlQ,EAAaU,WAAWnD,UAAU+C,GAAK4P,EAAKC,IAC5CnQ,EAAaU,WAAWnD,UAAU4S,IAAMD,EAAKC,G;ACH7C,IAAInQ,EAAe,EAAQ,OACvBoQ,EAAc,EAAQ;AAC1BpQ,EAAaU,WAAWnD,UAAU8S,UAAYD,EAAYC,S;ACF1D,IAAIrQ,EAAe,EAAQ,OACvBsQ,EAAU,EAAQ;AACtBtQ,EAAaU,WAAWnD,UAAUgT,MAAQD,EAAQC,K;ACFlD,IAAIvQ,EAAe,EAAQ,OACvBwQ,EAAY,EAAQ;AACxBxQ,EAAaU,WAAWnD,UAAUkT,QAAUD,EAAUC,O;ACFtD,IAAIzQ,EAAe,EAAQ,OACvB0Q,EAAe,EAAQ;AAC3B1Q,EAAaU,WAAWnD,UAAUoT,WAAaD,EAAaC,U;ACF5D,IAAI3Q,EAAe,EAAQ,OACvB4Q,EAAW,EAAQ;AACvB5Q,EAAaU,WAAWnD,UAAUsT,OAASD,EAASC,M;ACFpD,IAAI7Q,EAAe,EAAQ,OACvB8Q,EAAW,EAAQ;AACvB9Q,EAAaU,WAAWnD,UAAU7C,OAASoW,EAASpW,M;ACFpD,IAAIsF,EAAe,EAAQ,OACvB+Q,EAAY,EAAQ;AACxB/Q,EAAaU,WAAWnD,UAAUyT,QAAUD,EAAUE,SACtDjR,EAAaU,WAAWnD,UAAU0T,SAAWF,EAAUE,Q;ACHvD,IAAIjR,EAAe,EAAQ,OACvBkR,EAAS,EAAQ;AACrBlR,EAAaU,WAAWnD,UAAU4T,KAAOD,EAAOC,I;ACFhD,IAAInR,EAAe,EAAQ,OACvBoR,EAAc,EAAQ;AAC1BpR,EAAaU,WAAWnD,UAAU8T,UAAYD,EAAYC,S;ACF1D,IAAIrR,EAAe,EAAQ,OACvBsR,EAAU,EAAQ;AACtBtR,EAAaU,WAAWnD,UAAUgU,MAAQD,EAAQC,K;ACFlD,IAAIvR,EAAe,EAAQ,OACvBwR,EAAY,EAAQ;AACxBxR,EAAaU,WAAWnD,UAAUkU,QAAUD,EAAUC,O;ACFtD,IAAIzR,EAAe,EAAQ,OACvB0R,EAAmB,EAAQ;AAC/B1R,EAAaU,WAAWnD,UAAUoU,eAAiBD,EAAiBC,c;ACFpE,IAAI3R,EAAe,EAAQ,OACvB4R,EAAY,EAAQ;AACxB5R,EAAaU,WAAWnD,UAAUsU,QAAUD,EAAUC,O;ACFtD,IAAI7R,EAAe,EAAQ,OACvB8R,EAAS,EAAQ;AACrB9R,EAAaU,WAAWnD,UAAUwU,KAAOD,EAAOC,I;ACFhD,IAAI/R,EAAe,EAAQ,OACvBgS,EAAQ,EAAQ;AACpBhS,EAAaU,WAAWnD,UAAU0U,IAAMD,EAAME,SAC9ClS,EAAaU,WAAWnD,UAAU4U,QAAUH,EAAME,Q;ACHlD,IAAIlS,EAAe,EAAQ,OACvBoS,EAAQ,EAAQ;AACpBpS,EAAaU,WAAWnD,UAAUvE,IAAMoZ,EAAMpZ,G;ACF9C,IAAIgH,EAAe,EAAQ,OACvBqS,EAAU,EAAQ;AACtBrS,EAAaU,WAAWnD,UAAU+U,MAAQD,EAAQC,K;ACFlD,IAAItS,EAAe,EAAQ,OACvBuS,EAAgB,EAAQ;AAC5BvS,EAAaU,WAAWnD,UAAUiV,YAAcD,EAAcC,W;ACF9D,IAAIxS,EAAe,EAAQ,OACvByS,EAAQ,EAAQ;AACpBzS,EAAaU,WAAWnD,UAAU0H,IAAMwN,EAAMxN,G;ACF9C,IAAIjF,EAAe,EAAQ,OACvBkM,EAAU,EAAQ;AACtBlM,EAAaU,WAAWnD,UAAU4O,MAAQD,EAAQC,K;ACFlD,IAAInM,EAAe,EAAQ,OACvB0S,EAAa,EAAQ;AACzB1S,EAAaU,WAAWnD,UAAUoV,SAAWD,EAAWC,Q;ACFxD,IAAI3S,EAAe,EAAQ,OACvB4S,EAAa,EAAQ;AACzB5S,EAAaU,WAAWnD,UAAUsV,SAAWD,EAAWC,SACxD7S,EAAaU,WAAWnD,UAAUuV,QAAUF,EAAWC,Q;ACHvD,IAAI7S,EAAe,EAAQ,OACvB+S,EAAe,EAAQ;AAC3B/S,EAAaU,WAAWnD,UAAUyV,UAAYD,EAAaE,WAC3DjT,EAAaU,WAAWnD,UAAU0V,WAAaF,EAAaE,U;ACH5D,IAAIjT,EAAe,EAAQ,OACvBkT,EAAc,EAAQ;AAC1BlT,EAAaU,WAAWnD,UAAU4V,UAAYD,EAAYC,S;ACF1D,IAAInT,EAAe,EAAQ,OACvBoT,EAAQ,EAAQ;AACpBpT,EAAaU,WAAWnD,UAAU8V,IAAMD,EAAMC,G;ACF9C,IAAIrT,EAAe,EAAQ,OACvBsT,EAAc,EAAQ;AAC1BtT,EAAaU,WAAWnD,UAAUgW,UAAYD,EAAYC,S;ACF1D,IAAIvT,EAAe,EAAQ,OACvByD,EAAc,EAAQ;AAC1BzD,EAAaU,WAAWnD,UAAUiW,UAAY/P,EAAY+P,S;ACF1D,IAAIxT,EAAe,EAAQ,OACvBuM,EAAsB,EAAQ;AAClCvM,EAAaU,WAAWnD,UAAUiP,kBAAoBD,EAAoBC,iB;ACF1E,IAAIxM,EAAe,EAAQ,OACvByT,EAAa,EAAQ;AACzBzT,EAAaU,WAAWnD,UAAUmW,SAAWD,EAAWC,Q;ACFxD,IAAI1T,EAAe,EAAQ,OACvB2T,EAAc,EAAQ;AAC1B3T,EAAaU,WAAWnD,UAAUqW,UAAYD,EAAYC,S;ACF1D,IAAI5T,EAAe,EAAQ,OACvB6T,EAAU,EAAQ;AACtB7T,EAAaU,WAAWnD,UAAUuW,MAAQD,EAAQC,K;ACFlD,IAAI9T,EAAe,EAAQ,OACvB+T,EAAY,EAAQ;AACxB/T,EAAaU,WAAWnD,UAAUyW,QAAUD,EAAUC,O;ACFtD,IAAIhU,EAAe,EAAQ,OACvBiU,EAAoB,EAAQ;AAChCjU,EAAaU,WAAWnD,UAAU2W,gBAAkBD,EAAkBC,e;ACFtE,IAAIlU,EAAe,EAAQ,OACvBmU,EAAgB,EAAQ;AAC5BnU,EAAaU,WAAWnD,UAAU6W,YAAcD,EAAcC,W;ACF9D,IAAIpU,EAAe,EAAQ,OACvBqU,EAAkB,EAAQ;AAC9BrU,EAAaU,WAAWnD,UAAU+W,cAAgBD,EAAgBC,a;ACFlE,IAAItU,EAAe,EAAQ,OACvB2M,EAAS,EAAQ;AACrB3M,EAAaU,WAAWnD,UAAUqP,KAAOD,EAAOC,I;ACFhD,IAAI5M,EAAe,EAAQ,OACvBuU,EAAW,EAAQ;AACvBvU,EAAaU,WAAWnD,UAAU0M,OAASsK,EAAStK,M;ACFpD,IAAIjK,EAAe,EAAQ,OACvBwU,EAAW,EAAQ;AACvBxU,EAAaU,WAAWnD,UAAU/B,OAASgZ,EAAShZ,M;ACFpD,IAAIwE,EAAe,EAAQ,OACvByU,EAAe,EAAQ;AAC3BzU,EAAaU,WAAWnD,UAAUmX,WAAaD,EAAaC,U;ACF5D,IAAI1U,EAAe,EAAQ,OACvB2U,EAAU,EAAQ;AACtB3U,EAAaU,WAAWnD,UAAUqX,MAAQD,EAAQC,K;ACFlD,IAAI5U,EAAe,EAAQ,OACvB6U,EAAc,EAAQ;AAC1B7U,EAAaU,WAAWnD,UAAUuX,UAAYD,EAAYC,S;ACF1D,IAAI9U,EAAe,EAAQ,OACvB+U,EAAW,EAAQ;AACvB/U,EAAaU,WAAWnD,UAAUyX,OAASD,EAASC,M;ACFpD,IAAIhV,EAAe,EAAQ,OACvBiV,EAAe,EAAQ;AAC3BjV,EAAaU,WAAWnD,UAAU2X,WAAaD,EAAaC,U;ACF5D,IAAIlV,EAAe,EAAQ,OACvBmV,EAAS,EAAQ;AACrBnV,EAAaU,WAAWnD,UAAU6X,KAAOD,EAAOC,I;ACFhD,IAAIpV,EAAe,EAAQ,OACvBqV,EAAkB,EAAQ;AAC9BrV,EAAaU,WAAWnD,UAAU+X,cAAgBD,EAAgBC,a;ACFlE,IAAItV,EAAe,EAAQ,OACvBuV,EAAU,EAAQ;AACtBvV,EAAaU,WAAWnD,UAAUiY,MAAQD,EAAQC,K;ACFlD,IAAIxV,EAAe,EAAQ,OACvByV,EAAgB,EAAQ;AAC5BzV,EAAaU,WAAWnD,UAAUmY,YAAcD,EAAcC,W;ACF9D,IAAI1V,EAAe,EAAQ,OACvB2V,EAAW,EAAQ;AACvB3V,EAAaU,WAAWnD,UAAUqY,OAASD,EAASC,M;ACFpD,IAAI5V,EAAe,EAAQ,OACvB6V,EAAS,EAAQ;AACrB7V,EAAaU,WAAWnD,UAAUuY,KAAOD,EAAOC,I;ACFhD,IAAI9V,EAAe,EAAQ,OACvB+V,EAAa,EAAQ;AACzB/V,EAAaU,WAAWnD,UAAUyY,SAAWD,EAAWC,Q;ACFxD,IAAIhW,EAAe,EAAQ,OACvBiW,EAAc,EAAQ;AAC1BjW,EAAaU,WAAWnD,UAAU2Y,UAAYD,EAAYC,S;ACF1D,IAAIlW,EAAe,EAAQ,OACvBmW,EAAc,EAAQ;AAC1BnW,EAAaU,WAAWnD,UAAU6Y,UAAYD,EAAYC,S;ACF1D,IAAIpW,EAAe,EAAQ,OACvBqW,EAAc,EAAQ;AAC1BrW,EAAaU,WAAWnD,UAAU+Y,UAAYD,EAAYC,S;ACF1D,IAAItW,EAAe,EAAQ,OACvBuW,EAAgB,EAAQ;AAC5BvW,EAAaU,WAAWnD,UAAUiZ,YAAcD,EAAcC,W;ACF9D,IAAIxW,EAAe,EAAQ,OACvByW,EAAW,EAAQ;AACvBzW,EAAaU,WAAWnD,UAAUmZ,OAASD,EAASE,QACpD3W,EAAaU,WAAWnD,UAAUoZ,QAAUF,EAASE,O;ACHrD,IAAI3W,EAAe,EAAQ,OACvB4W,EAAc,EAAQ;AAC1B5W,EAAaU,WAAWnD,UAAUsZ,UAAYD,EAAYC,S;ACF1D,IAAI7W,EAAe,EAAQ,OACvB8W,EAAgB,EAAQ;AAC5B9W,EAAaU,WAAWnD,UAAUwZ,YAAcD,EAAcC,W;ACF9D,IAAI/W,EAAe,EAAQ,OACvBgX,EAAS,EAAQ;AACrBhX,EAAaU,WAAWnD,UAAU0Z,KAAOD,EAAOC,I;ACFhD,IAAIjX,EAAe,EAAQ,OACvBkX,EAAa,EAAQ;AACzBlX,EAAaU,WAAWnD,UAAU4Z,SAAWD,EAAWC,Q;ACFxD,IAAInX,EAAe,EAAQ,OACvBoX,EAAc,EAAQ;AAC1BpX,EAAaU,WAAWnD,UAAU8Z,UAAYD,EAAYC,S;ACF1D,IAAIrX,EAAe,EAAQ,OACvBsX,EAAc,EAAQ;AAC1BtX,EAAaU,WAAWnD,UAAUga,UAAYD,EAAYC,S;ACF1D,IAAIvX,EAAe,EAAQ,OACvBwX,EAAa,EAAQ;AACzBxX,EAAaU,WAAWnD,UAAUka,SAAWD,EAAWC,Q;ACFxD,IAAIzX,EAAe,EAAQ,OACvB0X,EAAiB,EAAQ;AAC7B1X,EAAaU,WAAWnD,UAAUoa,aAAeD,EAAeC,Y;ACFhE,IAAI3X,EAAe,EAAQ,OACvB4X,EAAiB,EAAQ;AAC7B5X,EAAaU,WAAWnD,UAAUsa,aAAeD,EAAeC,Y;ACFhE,IAAI7X,EAAe,EAAQ,OACvB8X,EAAY,EAAQ;AACxB9X,EAAaU,WAAWnD,UAAUwa,QAAUD,EAAUC,O;ACFtD,IAAI/X,EAAe,EAAQ,OACvBgY,EAAgB,EAAQ;AAC5BhY,EAAaU,WAAWnD,UAAU0a,YAAcD,EAAcC,W;ACF9D,IAAIjY,EAAe,EAAQ,OACvBkY,EAAc,EAAQ;AAC1BlY,EAAaU,WAAWnD,UAAU4a,UAAYD,EAAYC,S;ACF1D,IAAInY,EAAe,EAAQ,OACvBoY,EAAY,EAAQ;AACxBpY,EAAaU,WAAWnD,UAAU8a,QAAUD,EAAUC,O;ACFtD,IAAIrY,EAAe,EAAQ,OACvBsY,EAAW,EAAQ;AACvBtY,EAAaU,WAAWnD,UAAUgb,OAASD,EAASC,M;ACFpD,IAAIvY,EAAe,EAAQ,OACvBwY,EAAgB,EAAQ;AAC5BxY,EAAaU,WAAWnD,UAAUkb,YAAcD,EAAcC,W;ACF9D,IAAIzY,EAAe,EAAQ,OACvB0Y,EAAe,EAAQ;AAC3B1Y,EAAaU,WAAWnD,UAAUsG,WAAa6U,EAAa7U,U;ACF5D,IAAI7D,EAAe,EAAQ,OACvB2Y,EAAiB,EAAQ;AAC7B3Y,EAAaU,WAAWnD,UAAUqb,aAAeD,EAAeC,Y;ACFhE,IAAI5Y,EAAe,EAAQ,OACvB6Y,EAAe,EAAQ;AAC3B7Y,EAAaU,WAAWnD,UAAUub,WAAaD,EAAaC,U;ACF5D,IAAI9Y,EAAe,EAAQ,OACvB+Y,EAAmB,EAAQ;AAC/B/Y,EAAaU,WAAWnD,UAAUyb,eAAiBD,EAAiBC,c;ACFpE,IAAIhZ,EAAe,EAAQ,OACvBqN,EAAQ,EAAQ;AACpBrN,EAAaU,WAAWnD,UAAU+P,IAAMD,EAAM4L,Q;ACF9C,IAAIjZ,EAAe,EAAQ,OACvBkZ,EAAW,EAAQ;AACvBlZ,EAAaU,WAAWnD,UAAU4b,OAASD,EAASC,M;ACFpD,IAAIlc,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBoZ,EAAqB,EAAQ,OAC7BC,EAAoB,EAAQ,OAM5BC,EAAuB,SAAU1b,GAEjC,SAAS0b,EAAoBC,EAAWzV,GACpClG,EAAOY,KAAK/E,MACZA,KAAK8f,UAAYA,EACjB9f,KAAKqK,UAAYA,EACZA,GAAkC,IAArByV,EAAU1c,SACxBpD,KAAKiI,WAAY,EACjBjI,KAAKG,MAAQ2f,EAAU,GAE/B,CA0CA,OAnDAtc,EAAUqc,EAAqB1b,GAU/B0b,EAAoB9b,OAAS,SAAU+b,EAAWzV,GAC9C,IAAIjH,EAAS0c,EAAU1c;AACvB,OAAe,IAAXA,EACO,IAAIwc,EAAkBG,gBAEb,IAAX3c,EACE,IAAIuc,EAAmBK,iBAAiBF,EAAU,GAAIzV,GAGtD,IAAIwV,EAAoBC,EAAWzV,EAElD,EACAwV,EAAoBI,SAAW,SAAU5S,GACrC,IAAIyS,EAAYzS,EAAMyS,UAAW5c,EAAQmK,EAAMnK,MAAOE,EAASiK,EAAMjK,OAAQqB,EAAa4I,EAAM5I;AAC5FA,EAAWgB,SAGXvC,GAASE,EACTqB,EAAWK,YAGfL,EAAWzB,KAAK8c,EAAU5c,IAC1BmK,EAAMnK,MAAQA,EAAQ,EACtBlD,KAAKkN,SAASG,IAClB,EACqCwS,EAAoB/b,UAAUU,WAAa,SAAUC,GACtF,IACeqb,EAAN9f,KAAqB8f,UAAWzV,EAAhCrK,KAA+CqK,UACpDjH,EAAS0c,EAAU1c;AACvB,GAAIiH,EACA,OAAOA,EAAU6C,SAAS2S,EAAoBI,SAAU,EAAG,CACvDH,UAAWA,EAAW5c,MALlB,EAKgCE,OAAQA,EAAQqB,WAAYA;AAIpE,IAAK,IAAIlB,EAAI,EAAGA,EAAIH,IAAWqB,EAAWgB,OAAQlC,IAC9CkB,EAAWzB,KAAK8c,EAAUvc;AAE9BkB,EAAWK,UAEnB,EACO+a,CACX,CArD0B,CAqDxBtZ,EAAaU;AACfzG,EAAQqf,oBAAsBA,C;ACnE9B,IAAIrc,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBoZ,EAAqB,EAAQ,OAC7BC,EAAoB,EAAQ,OAC5BM,EAAgB,EAAQ,OAMxBC,EAAmB,SAAUhc,GAE7B,SAASgc,EAAgBC,EAAO/V,GAC5BlG,EAAOY,KAAK/E,MACZA,KAAKogB,MAAQA,EACbpgB,KAAKqK,UAAYA,EACZA,GAA8B,IAAjB+V,EAAMhd,SACpBpD,KAAKiI,WAAY,EACjBjI,KAAKG,MAAQigB,EAAM,GAE3B,CA6FA,OAtGA5c,EAAU2c,EAAiBhc,GAU3Bgc,EAAgBpc,OAAS,SAAUqc,EAAO/V,GACtC,OAAO,IAAI8V,EAAgBC,EAAO/V,EACtC,EAqCA8V,EAAgBjZ,GAAK,WAEjB,IADA,IAAIkZ,EAAQ,GACH9W,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8W,EAAM9W,EAAK,GAAKjF,UAAUiF;AAE9B,IAAIe,EAAY+V,EAAMA,EAAMhd,OAAS;AACjC8c,EAAcG,YAAYhW,GAC1B+V,EAAME,MAGNjW,EAAY;AAEhB,IAAIa,EAAMkV,EAAMhd;AAChB,OAAI8H,EAAM,EACC,IAAIiV,EAAgBC,EAAO/V,GAErB,IAARa,EACE,IAAIyU,EAAmBK,iBAAiBI,EAAM,GAAI/V,GAGlD,IAAIuV,EAAkBG,gBAAgB1V,EAErD,EACA8V,EAAgBF,SAAW,SAAU5S,GACjC,IAAI+S,EAAQ/S,EAAM+S,MAAOld,EAAQmK,EAAMnK,MAAOvB,EAAQ0L,EAAM1L,MAAO8C,EAAa4I,EAAM5I;AAClFvB,GAASvB,EACT8C,EAAWK,YAGfL,EAAWzB,KAAKod,EAAMld,IAClBuB,EAAWgB,SAGf4H,EAAMnK,MAAQA,EAAQ,EACtBlD,KAAKkN,SAASG,IAClB,EACqC8S,EAAgBrc,UAAUU,WAAa,SAAUC,GAClF,IACI2b,EAAQpgB,KAAKogB,MACbze,EAAQye,EAAMhd,OACdiH,EAAYrK,KAAKqK;AACrB,GAAIA,EACA,OAAOA,EAAU6C,SAASiT,EAAgBF,SAAU,EAAG,CACnDG,MAAOA,EAAOld,MANV,EAMwBvB,MAAOA,EAAO8C,WAAYA;AAI1D,IAAK,IAAIlB,EAAI,EAAGA,EAAI5B,IAAU8C,EAAWgB,OAAQlC,IAC7CkB,EAAWzB,KAAKod,EAAM7c;AAE1BkB,EAAWK,UAEnB,EACOqb,CACX,CAxGsB,CAwGpB5Z,EAAaU;AACfzG,EAAQ2f,gBAAkBA,C;ACvH1B,IAAI3c,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvB8I,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBiR,EAAiB,EAAQ,OAMzBC,EAA2B,SAAUrc,GAErC,SAASqc,EAAwBC,EAAcC,EAAUC,EAAMlS,EAASpE,GACpElG,EAAOY,KAAK/E,MACZA,KAAKygB,aAAeA,EACpBzgB,KAAK0gB,SAAWA,EAChB1gB,KAAK2gB,KAAOA,EACZ3gB,KAAKyO,QAAUA,EACfzO,KAAKqK,UAAYA,CACrB,CAmOA,OA3OA7G,EAAUgd,EAAyBrc,GAiJnCqc,EAAwBzc,OAAS,SAAU6c,EAAMF,EAAUrW,GAEvD,YADiB,IAAbqW,IAAuBA,OAAWjZ,GAC/B,WAEH,IADA,IAAIkZ,EAAO,GACFrX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCqX,EAAKrX,EAAK,GAAKjF,UAAUiF;AAE7B,OAAO,IAAIkX,EAAwBI,EAAMF,EAAUC,EAAM3gB,KAAMqK,EACnE,CACJ,EACqCmW,EAAwB1c,UAAUU,WAAa,SAAUC,GAC1F,IAAIgc,EAAezgB,KAAKygB,aACpBE,EAAO3gB,KAAK2gB,KACZtW,EAAYrK,KAAKqK,UACjBoD,EAAUzN,KAAKyN;AACnB,GAAKpD,EAmCD,OAAOA,EAAU6C,SAASsT,EAAwBP,SAAU,EAAG,CAAE5X,OAAQrI,KAAMyE,WAAYA,EAAYgK,QAASzO,KAAKyO;AAlCrH,IAAKhB,EAAS,CACVA,EAAUzN,KAAKyN,QAAU,IAAI8S,EAAerc;AAC5C,IAAI2c,EAAU,SAASC,IAEnB,IADA,IAAIC,EAAY,GACPzX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCyX,EAAUzX,EAAK,GAAKjF,UAAUiF;AAElC,IAAIjB,EAASyY,EAAUzY,OACnBqY,EAAWrY,EAAOqY,SAAUjT,EAAUpF,EAAOoF;AACjD,GAAIiT,EAAU,CACV,IAAIM,EAAW3R,EAAWO,SAAS8Q,GAAUtc,MAAMpE,KAAM+gB;AACrDC,IAAa1R,EAAcO,YAC3BpC,EAAQjO,MAAM8P,EAAcO,YAAYC,IAGxCrC,EAAQzK,KAAKge,GACbvT,EAAQ3I,WAEhB,MAEI2I,EAAQzK,KAAK+d,EAAU3d,QAAU,EAAI2d,EAAU,GAAKA,GACpDtT,EAAQ3I,UAEhB;AAEA+b,EAAQxY,OAASrI,KACJqP,EAAWO,SAAS6Q,GAAcrc,MAAMpE,KAAKyO,QAASkS,EAAKzQ,OAAO2Q,MAChEvR,EAAcO,aACzBpC,EAAQjO,MAAM8P,EAAcO,YAAYC,EAEhD,CACA,OAAOrC,EAAQzF,UAAUvD,EAKjC,EACA+b,EAAwBP,SAAW,SAAU5S,GACzC,IAAI4T,EAAOjhB,KACPqI,EAASgF,EAAMhF,OAAQ5D,EAAa4I,EAAM5I,WAAYgK,EAAUpB,EAAMoB,QACtEgS,EAAepY,EAAOoY,aAAcE,EAAOtY,EAAOsY,KAAMtW,EAAYhC,EAAOgC,UAC3EoD,EAAUpF,EAAOoF;AACrB,IAAKA,EAAS,CACVA,EAAUpF,EAAOoF,QAAU,IAAI8S,EAAerc;AAC9C,IAAI2c,EAAU,SAASC,IAEnB,IADA,IAAIC,EAAY,GACPzX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCyX,EAAUzX,EAAK,GAAKjF,UAAUiF;AAElC,IAAIjB,EAASyY,EAAUzY,OACnBqY,EAAWrY,EAAOqY,SAAUjT,EAAUpF,EAAOoF;AACjD,GAAIiT,EAAU,CACV,IAAIQ,EAAW7R,EAAWO,SAAS8Q,GAAUtc,MAAMpE,KAAM+gB;AACrDG,IAAa5R,EAAcO,YAC3BoR,EAAKxY,IAAI4B,EAAU6C,SAASiU,EAAe,EAAG,CAAE3Z,IAAK8H,EAAcO,YAAYC,EAAGrC,QAASA,KAG3FwT,EAAKxY,IAAI4B,EAAU6C,SAASkU,EAAc,EAAG,CAAEjhB,MAAO+gB,EAAUzT,QAASA,IAEjF,KACK,CACD,IAAItN,EAAQ4gB,EAAU3d,QAAU,EAAI2d,EAAU,GAAKA;AACnDE,EAAKxY,IAAI4B,EAAU6C,SAASkU,EAAc,EAAG,CAAEjhB,MAAOA,EAAOsN,QAASA,IAC1E,CACJ;AAEAoT,EAAQxY,OAASA,EACJgH,EAAWO,SAAS6Q,GAAcrc,MAAMqK,EAASkS,EAAKzQ,OAAO2Q,MAC3DvR,EAAcO,aACzBpC,EAAQjO,MAAM8P,EAAcO,YAAYC,EAEhD,CACAmR,EAAKxY,IAAIgF,EAAQzF,UAAUvD,GAC/B,EACO+b,CACX,CA7O8B,CA6O5Bja,EAAaU;AAEf,SAASma,EAAaC,GAClB,IAAIlhB,EAAQkhB,EAAIlhB,MAAOsN,EAAU4T,EAAI5T;AACrCA,EAAQzK,KAAK7C,GACbsN,EAAQ3I,UACZ,CACA,SAASqc,EAAcE,GACnB,IAAI7Z,EAAM6Z,EAAI7Z;AAAe6Z,EAAI5T,QACzBjO,MAAMgI,EAClB,CATAhH,EAAQggB,wBAA0BA,C;AC5PlC,IAAIhd,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvB8I,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBiR,EAAiB,EAAQ,OAMzBe,EAA+B,SAAUnd,GAEzC,SAASmd,EAA4Bb,EAAcC,EAAUC,EAAMlS,EAASpE,GACxElG,EAAOY,KAAK/E,MACZA,KAAKygB,aAAeA,EACpBzgB,KAAK0gB,SAAWA,EAChB1gB,KAAK2gB,KAAOA,EACZ3gB,KAAKyO,QAAUA,EACfzO,KAAKqK,UAAYA,CACrB,CAwLA,OAhMA7G,EAAU8d,EAA6Bnd,GAuIvCmd,EAA4Bvd,OAAS,SAAU6c,EAAMF,EAAUrW,GAE3D,YADiB,IAAbqW,IAAuBA,OAAWjZ,GAC/B,WAEH,IADA,IAAIkZ,EAAO,GACFrX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCqX,EAAKrX,EAAK,GAAKjF,UAAUiF;AAE7B,OAAO,IAAIgY,EAA4BV,EAAMF,EAAUC,EAAM3gB,KAAMqK,EACvE,CACJ,EACqCiX,EAA4Bxd,UAAUU,WAAa,SAAUC,GAC9F,IAAIgc,EAAezgB,KAAKygB,aACpBE,EAAO3gB,KAAK2gB,KACZtW,EAAYrK,KAAKqK,UACjBoD,EAAUzN,KAAKyN;AACnB,GAAKpD,EAuCD,OAAOA,EAAU6C,SAAS+S,EAAU,EAAG,CAAE5X,OAAQrI,KAAMyE,WAAYA,EAAYgK,QAASzO,KAAKyO;AAtC7F,IAAKhB,EAAS,CACVA,EAAUzN,KAAKyN,QAAU,IAAI8S,EAAerc;AAC5C,IAAI2c,EAAU,SAASC,IAEnB,IADA,IAAIC,EAAY,GACPzX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCyX,EAAUzX,EAAK,GAAKjF,UAAUiF;AAElC,IAAIjB,EAASyY,EAAUzY,OACnBqY,EAAWrY,EAAOqY,SAAUjT,EAAUpF,EAAOoF,QAC7CjG,EAAMuZ,EAAUQ;AACpB,GAAI/Z,EACAiG,EAAQjO,MAAMgI;KAEb,GAAIkZ,EAAU,CACf,IAAIM,EAAW3R,EAAWO,SAAS8Q,GAAUtc,MAAMpE,KAAM+gB;AACrDC,IAAa1R,EAAcO,YAC3BpC,EAAQjO,MAAM8P,EAAcO,YAAYC,IAGxCrC,EAAQzK,KAAKge,GACbvT,EAAQ3I,WAEhB,MAEI2I,EAAQzK,KAAK+d,EAAU3d,QAAU,EAAI2d,EAAU,GAAKA,GACpDtT,EAAQ3I,UAEhB;AAEA+b,EAAQxY,OAASrI,KACJqP,EAAWO,SAAS6Q,GAAcrc,MAAMpE,KAAKyO,QAASkS,EAAKzQ,OAAO2Q,MAChEvR,EAAcO,aACzBpC,EAAQjO,MAAM8P,EAAcO,YAAYC,EAEhD,CACA,OAAOrC,EAAQzF,UAAUvD,EAKjC,EACO6c,CACX,CAlMkC,CAkMhC/a,EAAaU;AAEf,SAASgZ,EAAS5S,GACd,IAAI4T,EAAOjhB,KACPqI,EAASgF,EAAMhF,OAAQ5D,EAAa4I,EAAM5I,WAAYgK,EAAUpB,EAAMoB,QAEtEiB,EAAKrH,EAAQoY,EAAe/Q,EAAG+Q,aAAcE,EAAOjR,EAAGiR,KAAMtW,EAAYqF,EAAGrF,UAC5EoD,EAAUpF,EAAOoF;AACrB,IAAKA,EAAS,CACVA,EAAUpF,EAAOoF,QAAU,IAAI8S,EAAerc;AAC9C,IAAI2c,EAAU,SAASC,IAEnB,IADA,IAAIC,EAAY,GACPzX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCyX,EAAUzX,EAAK,GAAKjF,UAAUiF;AAElC,IAAIjB,EAASyY,EAAUzY,OACnBqY,EAAWrY,EAAOqY,SAAUjT,EAAUpF,EAAOoF,QAC7CjG,EAAMuZ,EAAUQ;AACpB,GAAI/Z,EACAyZ,EAAKxY,IAAI4B,EAAU6C,SAASiU,EAAe,EAAG,CAAE3Z,IAAKA,EAAKiG,QAASA;KAElE,GAAIiT,EAAU,CACf,IAAIQ,EAAW7R,EAAWO,SAAS8Q,GAAUtc,MAAMpE,KAAM+gB;AACrDG,IAAa5R,EAAcO,YAC3BoR,EAAKxY,IAAI4B,EAAU6C,SAASiU,EAAe,EAAG,CAAE3Z,IAAK8H,EAAcO,YAAYC,EAAGrC,QAASA,KAG3FwT,EAAKxY,IAAI4B,EAAU6C,SAASkU,EAAc,EAAG,CAAEjhB,MAAO+gB,EAAUzT,QAASA,IAEjF,KACK,CACD,IAAItN,EAAQ4gB,EAAU3d,QAAU,EAAI2d,EAAU,GAAKA;AACnDE,EAAKxY,IAAI4B,EAAU6C,SAASkU,EAAc,EAAG,CAAEjhB,MAAOA,EAAOsN,QAASA,IAC1E,CACJ;AAEAoT,EAAQxY,OAASA,EACJgH,EAAWO,SAAS6Q,GAAcrc,MAAMqK,EAASkS,EAAKzQ,OAAO2Q,MAC3DvR,EAAcO,aACzBoR,EAAKxY,IAAI4B,EAAU6C,SAASiU,EAAe,EAAG,CAAE3Z,IAAK8H,EAAcO,YAAYC,EAAGrC,QAASA,IAEnG,CACAwT,EAAKxY,IAAIgF,EAAQzF,UAAUvD,GAC/B,CACA,SAAS2c,EAAaC,GAClB,IAAIlhB,EAAQkhB,EAAIlhB,MAAOsN,EAAU4T,EAAI5T;AACrCA,EAAQzK,KAAK7C,GACbsN,EAAQ3I,UACZ,CACA,SAASqc,EAAcE,GACnB,IAAI7Z,EAAM6Z,EAAI7Z;AAAe6Z,EAAI5T,QACzBjO,MAAMgI,EAClB,CAnDAhH,EAAQ8gB,4BAA8BA,C;ACjNtC,IAAI9d,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBuC,EAAe,EAAQ,OACvBgH,EAAe,EAAQ,OACvBtJ,EAAiB,EAAQ,OACzBud,EAAa,EAAQ,OAIrB7V,EAAyB,SAAUxH,GAEnC,SAASwH,EAA2DtD,EAC3BoZ,GACrCtd,EAAOY,KAAK/E,MACZA,KAAKqI,OAASA,EACdrI,KAAKyhB,eAAiBA,EACezhB,KAAK0hB,UAAY,EACtD1hB,KAAK2hB,aAAc,CACvB,CA+BA,OAvCAne,EAAUmI,EAAuBxH,GASIwH,EAAsB7H,UAAUU,WAAa,SAAUC,GACxF,OAAOzE,KAAK4hB,aAAa5Z,UAAUvD,EACvC,EACqCkH,EAAsB7H,UAAU8d,WAAa,WAC9E,IAAInU,EAAUzN,KAAK6hB;AAInB,OAHKpU,IAAWA,EAAQ3C,YACpB9K,KAAK6hB,SAAW7hB,KAAKyhB,kBAElBzhB,KAAK6hB,QAChB,EACAlW,EAAsB7H,UAAUge,QAAU,WACtC,IAAIC,EAAa/hB,KAAKgiB;AActB,OAbKD,IACD/hB,KAAK2hB,aAAc,GACnBI,EAAa/hB,KAAKgiB,YAAc,IAAI/d,EAAeW,cACxC6D,IAAIzI,KAAKqI,OACfL,UAAU,IAAIia,EAAsBjiB,KAAK4hB,aAAc5hB,QACxD+hB,EAAWtc,QACXzF,KAAKgiB,YAAc,KACnBD,EAAa9d,EAAeW,aAAaC,OAGzC7E,KAAKgiB,YAAcD,GAGpBA,CACX,EACApW,EAAsB7H,UAAUoe,SAAW,WACvC,OAAOV,EAAWU,UAAXV,CAAsBxhB,KACjC,EACO2L,CACX,CAzC4B,CAyC1BpF,EAAaU;AACfzG,EAAQmL,sBAAwBA;AAChC,IAAIwW,EAAmBxW,EAAsB7H;AAC7CtD,EAAQ4hB,gCAAkC,CACtCja,SAAU,CAAEhI,MAAO,MACnBuhB,UAAW,CAAEvhB,MAAO,EAAGkiB,UAAU,GACjCR,SAAU,CAAE1hB,MAAO,KAAMkiB,UAAU,GACnCL,YAAa,CAAE7hB,MAAO,KAAMkiB,UAAU,GACtC7d,WAAY,CAAErE,MAAOgiB,EAAiB3d,YACtCmd,YAAa,CAAExhB,MAAOgiB,EAAiBR,YAAaU,UAAU,GAC9DT,WAAY,CAAEzhB,MAAOgiB,EAAiBP,YACtCE,QAAS,CAAE3hB,MAAOgiB,EAAiBL,SACnCI,SAAU,CAAE/hB,MAAOgiB,EAAiBD;AAExC,IAAID,EAAyB,SAAU9d,GAEnC,SAAS8d,EAAsBnY,EAAawY,GACxCne,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKsiB,YAAcA,CACvB,CAuBA,OA3BA9e,EAAUye,EAAuB9d,GAKjC8d,EAAsBne,UAAUmC,OAAS,SAAUuB,GAC/CxH,KAAKiP,eACL9K,EAAOL,UAAUmC,OAAOlB,KAAK/E,KAAMwH,EACvC,EACAya,EAAsBne,UAAUsC,UAAY,WACxCpG,KAAKsiB,YAAYX,aAAc,EAC/B3hB,KAAKiP,eACL9K,EAAOL,UAAUsC,UAAUrB,KAAK/E,KACpC,EACqCiiB,EAAsBne,UAAUmL,aAAe,WAChF,IAAIqT,EAActiB,KAAKsiB;AACvB,GAAIA,EAAa,CACbtiB,KAAKsiB,YAAc;AACnB,IAAIP,EAAaO,EAAYN;AAC7BM,EAAYZ,UAAY,EACxBY,EAAYT,SAAW,KACvBS,EAAYN,YAAc,KACtBD,GACAA,EAAW5b,aAEnB,CACJ,EACO8b,CACX,CA7B4B,CA6B1Bje,EAAUwJ,mBAiBR+U,GAhBoB,WACpB,SAASC,EAAiBF,GACtBtiB,KAAKsiB,YAAcA,CACvB,CACAE,EAAiB1e,UAAUiB,KAAO,SAAUN,EAAY4D,GACpD,IAAIia,EAActiB,KAAKsiB;AACvBA,EAAYZ;AACZ,IAAIe,EAAa,IAAIF,EAAmB9d,EAAY6d,GAChD9c,EAAe6C,EAAOL,UAAUya;AAIpC,OAHKA,EAAWhd,SACZgd,EAAWV,WAAaO,EAAYR,WAEjCtc,CACX,CAEJ,CAfuB,GAgBG,SAAUrB,GAEhC,SAASoe,EAAmBzY,EAAawY,GACrCne,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKsiB,YAAcA,CACvB,CAgDA,OApDA9e,EAAU+e,EAAoBpe,GAKOoe,EAAmBze,UAAUmL,aAAe,WAC7E,IAAIqT,EAActiB,KAAKsiB;AACvB,GAAKA,EAAL,CAIAtiB,KAAKsiB,YAAc;AACnB,IAAIJ,EAAWI,EAAYZ;AAC3B,GAAIQ,GAAY,EACZliB,KAAK+hB,WAAa;KAItB,GADAO,EAAYZ,UAAYQ,EAAW,EAC/BA,EAAW,EACXliB,KAAK+hB,WAAa;IADtB,CA2BA,IAAIA,EAAa/hB,KAAK+hB,WAClBW,EAAmBJ,EAAYN;AACnChiB,KAAK+hB,WAAa,MACdW,GAAsBX,GAAcW,IAAqBX,GACzDW,EAAiBvc,aA5BrB,CAXA,MAFInG,KAAK+hB,WAAa,IA2C1B,EACOQ,CACX,CAtDyB,CAsDvBhV,EAAajH,Y;ACxKf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBoc,EAAsB,EAAQ,OAC9BC,EAAoB,EAAQ,OAM5BC,EAAmB,SAAU1e,GAE7B,SAAS0e,EAAgBC,GACrB3e,EAAOY,KAAK/E,MACZA,KAAK8iB,kBAAoBA,CAC7B,CAqDA,OAzDAtf,EAAUqf,EAAiB1e,GAmD3B0e,EAAgB9e,OAAS,SAAU+e,GAC/B,OAAO,IAAID,EAAgBC,EAC/B,EACqCD,EAAgB/e,UAAUU,WAAa,SAAUC,GAClF,OAAO,IAAIse,EAAgBte,EAAYzE,KAAK8iB,kBAChD,EACOD,CACX,CA3DsB,CA2DpBtc,EAAaU;AACfzG,EAAQqiB,gBAAkBA;AAC1B,IAAIE,EAAmB,SAAU5e,GAE7B,SAAS4e,EAAgBjZ,EAAakZ,GAClC7e,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKgjB,QAAUA,EACfhjB,KAAKijB,UACT,CAeA,OApBAzf,EAAUuf,EAAiB5e,GAM3B4e,EAAgBjf,UAAUmf,SAAW,WACjC,IACIjjB,KAAKkjB,cAIT,CAFA,MAAO1b,GACHxH,KAAKiG,OAAOuB,EAChB,CACJ,EACAub,EAAgBjf,UAAUof,aAAe,WACrC,IAAIvgB,EAAS3C,KAAKgjB;AACdrgB,GACA3C,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAM2C,GAE7D,EACOogB,CACX,CAtBsB,CAsBpBH,EAAkBlZ,gB;AChGpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAOIkc,EAAmB,SAAU5b,GAE7B,SAAS4b,EAAgB1V,GACrBlG,EAAOY,KAAK/E,MACZA,KAAKqK,UAAYA,CACrB,CA4DA,OAhEA7G,EAAUuc,EAAiB5b,GAgD3B4b,EAAgBhc,OAAS,SAAUsG,GAC/B,OAAO,IAAI0V,EAAgB1V,EAC/B,EACA0V,EAAgBE,SAAW,SAAUoB,GAChBA,EAAI5c,WACVK,UACf,EACqCib,EAAgBjc,UAAUU,WAAa,SAAUC,GAClF,IAAI4F,EAAYrK,KAAKqK;AACrB,GAAIA,EACA,OAAOA,EAAU6C,SAAS6S,EAAgBE,SAAU,EAAG,CAAExb,WAAYA;AAGrEA,EAAWK,UAEnB,EACOib,CACX,CAlEsB,CANH,EAAQ,OAwEZ9Y;AACfzG,EAAQuf,gBAAkBA,C;AC9E1B,IAAIvc,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAOIuf,EAAmB,SAAUjf,GAE7B,SAASif,EAAgB5jB,EAAO6K,GAC5BlG,EAAOY,KAAK/E,MACZA,KAAKR,MAAQA,EACbQ,KAAKqK,UAAYA,CACrB,CA6DA,OAlEA7G,EAAU4f,EAAiBjf,GA8C3Bif,EAAgBrf,OAAS,SAAUvE,EAAO6K,GACtC,OAAO,IAAI+Y,EAAgB5jB,EAAO6K,EACtC,EACA+Y,EAAgBnD,SAAW,SAAUoB,GACjC,IAAI7hB,EAAQ6hB,EAAI7hB;AAAoB6hB,EAAI5c,WAC7BjF,MAAMA,EACrB,EACqC4jB,EAAgBtf,UAAUU,WAAa,SAAUC,GAClF,IAAIjF,EAAQQ,KAAKR,MACb6K,EAAYrK,KAAKqK;AAErB,GADA5F,EAAWiE,oBAAqB,EAC5B2B,EACA,OAAOA,EAAU6C,SAASkW,EAAgBnD,SAAU,EAAG,CACnDzgB,MAAOA,EAAOiF,WAAYA;AAI9BA,EAAWjF,MAAMA,EAEzB,EACO4jB,CACX,CApEsB,CANH,EAAQ,OA0EZnc;AACfzG,EAAQ4iB,gBAAkBA,C;AChF1B,IAAI5f,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBqZ,EAAoB,EAAQ,OAC5BzQ,EAAY,EAAQ,OACpBwT,EAAsB,EAAQ,OAC9BC,EAAoB,EAAQ,OAM5BS,EAAsB,SAAUlf,GAEhC,SAASkf,EAAmBC,EAASC,GACjCpf,EAAOY,KAAK/E,MACZA,KAAKsjB,QAAUA,EACftjB,KAAKujB,eAAiBA,CAC1B,CA4HA,OAjIA/f,EAAU6f,EAAoBlf,GAwG9Bkf,EAAmBtf,OAAS,WAExB,IADA,IAAIuf,EAAU,GACLha,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCga,EAAQha,EAAK,GAAKjF,UAAUiF;AAEhC,GAAgB,OAAZga,GAAyC,IAArBjf,UAAUjB,OAC9B,OAAO,IAAIwc,EAAkBG;AAEjC,IAAIwD,EAAiB;AASrB,MAR2C,mBAAhCD,EAAQA,EAAQlgB,OAAS,KAChCmgB,EAAiBD,EAAQhD,OAIN,IAAnBgD,EAAQlgB,QAAgB+L,EAAU/P,QAAQkkB,EAAQ,MAClDA,EAAUA,EAAQ,IAEC,IAAnBA,EAAQlgB,OACD,IAAIwc,EAAkBG,gBAE1B,IAAIsD,EAAmBC,EAASC,EAC3C,EACqCF,EAAmBvf,UAAUU,WAAa,SAAUC,GACrF,OAAO,IAAI+e,EAAmB/e,EAAYzE,KAAKsjB,QAAStjB,KAAKujB,eACjE,EACOF,CACX,CAnIyB,CAmIvB9c,EAAaU;AACfzG,EAAQ6iB,mBAAqBA;AAM7B,IAAIG,EAAsB,SAAUrf,GAEhC,SAASqf,EAAmB1Z,EAAawZ,EAASC,GAC9Cpf,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKsjB,QAAUA,EACftjB,KAAKujB,eAAiBA,EACtBvjB,KAAKyjB,UAAY,EACjBzjB,KAAK0jB,WAAa;AAClB,IAAIxY,EAAMoY,EAAQlgB;AAClBpD,KAAK2jB,MAAQzY,EACblL,KAAK4jB,OAAS,IAAIzkB,MAAM+L;AACxB,IAAK,IAAI3H,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAI8E,EAASib,EAAQ/f,GACjBsgB,EAAoBlB,EAAoBQ,kBAAkBnjB,KAAMqI,EAAQ,KAAM9E;AAC9EsgB,IACAA,EAAkB/d,WAAavC,EAC/BvD,KAAKyI,IAAIob,GAEjB,CACJ,CA0BA,OA5CArgB,EAAUggB,EAAoBrf,GAmB9Bqf,EAAmB1f,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAChG7J,KAAK4jB,OAAO9d,GAAc6D,EACrBE,EAASia,YACVja,EAASia,WAAY,EACrB9jB,KAAK0jB,aAEb,EACAF,EAAmB1f,UAAUuC,eAAiB,SAAUwD,GACpD,IAAIC,EAAc9J,KAAK8J,YACnB4F,EAAK1P,KAAM0jB,EAAahU,EAAGgU,WAAYH,EAAiB7T,EAAG6T,eAAgBK,EAASlU,EAAGkU,OACvF1Y,EAAM0Y,EAAOxgB;AACjB,GAAKyG,EAASia,WAKd,GADA9jB,KAAKyjB,YACDzjB,KAAKyjB,YAAcvY,EAAvB,CAGA,GAAIwY,IAAexY,EAAK,CACpB,IAAI/K,EAAQojB,EAAiBA,EAAenf,MAAMpE,KAAM4jB,GAAUA;AAClE9Z,EAAY9G,KAAK7C,EACrB,CACA2J,EAAYhF,UALZ,OANIgF,EAAYhF,UAYpB,EACO0e,CACX,CA9CyB,CA8CvBZ,EAAkBlZ,gB;ACvMpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvB8I,EAAa,EAAQ,OACrBtB,EAAe,EAAQ,OACvBuB,EAAgB,EAAQ,OACxBrL,EAAiB,EAAQ,OACzB8f,EAAWtkB,OAAOqE,UAAUigB;AAqBhC,IAAIC,EAAuB,SAAU7f,GAEjC,SAAS6f,EAAoBC,EAAWC,EAAWxD,EAAU5f,GACzDqD,EAAOY,KAAK/E,MACZA,KAAKikB,UAAYA,EACjBjkB,KAAKkkB,UAAYA,EACjBlkB,KAAK0gB,SAAWA,EAChB1gB,KAAKc,QAAUA,CACnB,CA4KA,OAnLA0C,EAAUwgB,EAAqB7f,GA6H/B6f,EAAoBjgB,OAAS,SAAUogB,EAAQD,EAAWpjB,EAAS4f,GAK/D,OAJI3S,EAAaW,WAAW5N,KACxB4f,EAAW5f,EACXA,OAAU2G,GAEP,IAAIuc,EAAoBG,EAAQD,EAAWxD,EAAU5f,EAChE,EACAkjB,EAAoBI,kBAAoB,SAAUH,EAAWC,EAAWrD,EAASpc,EAAY3D,GACzF,IAAIqF;AACJ,GArJR,SAAoB8d,GAChB,QAASA,GAA0C,sBAA7BF,EAAShf,KAAKkf,EACxC,CAmJYI,CAAWJ,IAlJvB,SAA0BA,GACtB,QAASA,GAA0C,4BAA7BF,EAAShf,KAAKkf,EACxC,CAgJqCK,CAAiBL,GAC1C,IAAK,IAAI1gB,EAAI,EAAG2H,EAAM+Y,EAAU7gB,OAAQG,EAAI2H,EAAK3H,IAC7CygB,EAAoBI,kBAAkBH,EAAU1gB,GAAI2gB,EAAWrD,EAASpc,EAAY3D;KAGvF,GApJb,SAAuBmjB,GACnB,QAASA,GAAmD,mBAA/BA,EAAUM,kBAA4E,mBAAlCN,EAAUO,mBAC/F,CAkJiBC,CAAcR,GAAY,CAC/B,IAAIS,EAAWT;AACfA,EAAUM,iBAAiBL,EAAWrD,EAAS/f,GAC/CqF,EAAc,WAAc,OAAOue,EAASF,oBAAoBN,EAAWrD,EAAS/f,EAAU,CAClG,MACK,GAlKb,SAAmCmjB,GAC/B,QAASA,GAAqC,mBAAjBA,EAAUU,IAA8C,mBAAlBV,EAAUW,GACjF,CAgKiBC,CAA0BZ,GAAY,CAC3C,IAAIa,EAAWb;AACfA,EAAUU,GAAGT,EAAWrD,GACxB1a,EAAc,WAAc,OAAO2e,EAASF,IAAIV,EAAWrD,EAAU,CACzE,KACK,KA1Kb,SAAiCoD,GAC7B,QAASA,GAA8C,mBAA1BA,EAAUc,aAAkE,mBAA7Bd,EAAUe,cAC1F,CAwKiBC,CAAwBhB,GAM7B,MAAM,IAAI5kB,UAAU;AALpB,IAAI6lB,EAAWjB;AACfA,EAAUc,YAAYb,EAAWrD,GACjC1a,EAAc,WAAc,OAAO+e,EAASF,eAAed,EAAWrD,EAAU,CAIpF,CACApc,EAAWgE,IAAI,IAAIxE,EAAeW,aAAauB,GACnD,EACqC6d,EAAoBlgB,UAAUU,WAAa,SAAUC,GACtF,IAAIwf,EAAYjkB,KAAKikB,UACjBC,EAAYlkB,KAAKkkB,UACjBpjB,EAAUd,KAAKc,QACf4f,EAAW1gB,KAAK0gB,SAChBG,EAAUH,EAAW,WAErB,IADA,IAAIC,EAAO,GACFrX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCqX,EAAKrX,EAAK,GAAKjF,UAAUiF;AAE7B,IAAI3G,EAAS0M,EAAWO,SAAS8Q,GAAUtc,WAAM,EAAQuc;AACrDhe,IAAW2M,EAAcO,YACzBpL,EAAWjF,MAAM8P,EAAcO,YAAYC,GAG3CrL,EAAWzB,KAAKL,EAExB,EAAI,SAAUmN,GAAK,OAAOrL,EAAWzB,KAAK8M,EAAI;AAC9CkU,EAAoBI,kBAAkBH,EAAWC,EAAWrD,EAASpc,EAAY3D,EACrF,EACOkjB,CACX,CArL0B,CAqLxBzd,EAAaU;AACfzG,EAAQwjB,oBAAsBA,C;ACrN9B,IAAIxgB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIkK,EAAe,EAAQ,OACvBxH,EAAe,EAAQ,OACvBtC,EAAiB,EAAQ,OAMzBkhB,EAA8B,SAAUhhB,GAExC,SAASghB,EAA2BC,EAAYC,EAAe3E,GAC3Dvc,EAAOY,KAAK/E,MACZA,KAAKolB,WAAaA,EAClBplB,KAAKqlB,cAAgBA,EACrBrlB,KAAK0gB,SAAWA,CACpB,CAwFA,OA9FAld,EAAU2hB,EAA4BhhB,GAuDtCghB,EAA2BphB,OAAS,SAAUqhB,EAAYC,EAAe3E,GACrE,OAAO,IAAIyE,EAA2BC,EAAYC,EAAe3E,EACrE,EACqCyE,EAA2BrhB,UAAUU,WAAa,SAAUC,GAC7F,IAAIuE,EAAQhJ,KACRqlB,EAAgBrlB,KAAKqlB,cACrBxE,EAAY7gB,KAAK0gB,SAAW,WAE5B,IADA,IAAIC,EAAO,GACFrX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCqX,EAAKrX,EAAK,GAAKjF,UAAUiF;AAE7BN,EAAMsc,cAAc7gB,EAAYkc,EACpC,EAAI,SAAU7Q,GAAKrL,EAAWzB,KAAK8M,EAAI,EACnCyV,EAAWvlB,KAAKwlB,gBAAgB3E,EAASpc;AACxCsJ,EAAaW,WAAW2W,IAG7B5gB,EAAWgE,IAAI,IAAIxE,EAAeW,cAAa,WAE3CygB,EAAcxE,EAAS0E,EAC3B,IACJ,EACAJ,EAA2BrhB,UAAUwhB,cAAgB,SAAU7gB,EAAYkc,GACvE,IACI,IAAIhe,EAAS3C,KAAK0gB,SAAStc,MAAMpE,KAAM2gB;AACvClc,EAAWzB,KAAKL,EAIpB,CAFA,MAAOmN,GACHrL,EAAWjF,MAAMsQ,EACrB,CACJ,EACAqV,EAA2BrhB,UAAU0hB,gBAAkB,SAAU3E,EAAS4E,GACtE,IACI,OAAOzlB,KAAKolB,WAAWvE,IAAY,IAIvC,CAFA,MAAO/Q,GACH2V,EAAgBjmB,MAAMsQ,EAC1B,CACJ,EACOqV,CACX,CAhGiC,CAgG/B5e,EAAaU;AACfzG,EAAQ2kB,2BAA6BA,C;AC9GrC,IAAI3hB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIsL,EAAY,EAAQ,OACpBuW,EAAgB,EAAQ,OACxBC,EAAc,EAAQ,MACtBC,EAAsB,EAAQ,OAC9BC,EAAuB,EAAQ,OAC/BC,EAAoB,EAAQ,MAC5BC,EAAwB,EAAQ,OAChCnZ,EAAa,EAAQ,MACrBrG,EAAe,EAAQ,OACvByD,EAAc,EAAQ,OACtBlC,EAAe,EAAQ,OAMvBke,EAAkB,SAAU7hB,GAE5B,SAAS6hB,EAAeC,EAAK5b,GACzBlG,EAAOY,KAAK/E,KAAM,MAClBA,KAAKimB,IAAMA,EACXjmB,KAAKqK,UAAYA,CACrB,CA0FA,OA/FA7G,EAAUwiB,EAAgB7hB,GA8D1B6hB,EAAejiB,OAAS,SAAUkiB,EAAK5b,GACnC,GAAW,MAAP4b,EAAa,CACb,GAA4C,mBAAjCA,EAAIne,EAAaM,YACxB,OAAI6d,aAAe1f,EAAaU,aAAeoD,EACpC4b,EAEJ,IAAID,EAAeC,EAAK5b;AAE9B,GAAI8E,EAAU/P,QAAQ6mB,GACvB,OAAO,IAAIH,EAAkB3F,gBAAgB8F,EAAK5b;AAEjD,GAAIsb,EAAYO,UAAUD,GAC3B,OAAO,IAAIL,EAAoBO,kBAAkBF,EAAK5b;AAErD,GAAwC,mBAA7B4b,EAAIrZ,EAAWvM,WAA2C,iBAAR4lB,EAC9D,OAAO,IAAIJ,EAAqBO,mBAAmBH,EAAK5b;AAEvD,GAAIqb,EAAcW,YAAYJ,GAC/B,OAAO,IAAIF,EAAsBlG,oBAAoBoG,EAAK5b,EAElE,CACA,MAAM,IAAIhL,WAAmB,OAAR4mB,UAAuBA,GAAOA,GAAO,qBAC9D,EACqCD,EAAeliB,UAAUU,WAAa,SAAUC,GACjF,IAAIwhB,EAAMjmB,KAAKimB,IACX5b,EAAYrK,KAAKqK;AACrB,OAAiB,MAAbA,EACO4b,EAAIne,EAAaM,cAAcJ,UAAUvD,GAGzCwhB,EAAIne,EAAaM,cAAcJ,UAAU,IAAIgC,EAAYiB,oBAAoBxG,EAAY4F,EAAW,GAEnH,EACO2b,CACX,CAjGqB,CAiGnBzf,EAAaU;AACfzG,EAAQwlB,eAAiBA,C;ACvHzB,IAAIxiB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvB2Z,EAAgB,EAAQ,OACxBoG,EAAe,SAAUnmB,GAAS,OAAOA,CAAO,EAMhDomB,EAAsB,SAAUpiB,GAEhC,SAASoiB,EAAmBC,EAAcC,EAAWC,EAASnD,EAAgBlZ,GAC1ElG,EAAOY,KAAK/E,MACZA,KAAKwmB,aAAeA,EACpBxmB,KAAKymB,UAAYA,EACjBzmB,KAAK0mB,QAAUA,EACf1mB,KAAKujB,eAAiBA,EACtBvjB,KAAKqK,UAAYA,CACrB,CA4GA,OApHA7G,EAAU+iB,EAAoBpiB,GAS9BoiB,EAAmBxiB,OAAS,SAAU4iB,EAAuBF,EAAWC,EAASE,EAA4Bvc,GACzG,OAAwB,GAApBhG,UAAUjB,OACH,IAAImjB,EAAmBI,EAAsBH,aAAcG,EAAsBF,UAAWE,EAAsBD,QAASC,EAAsBpD,gBAAkB+C,EAAcK,EAAsBtc,gBAE/K5C,IAA/Bmf,GAA4C1G,EAAcG,YAAYuG,GAC/D,IAAIL,EAAmBI,EAAuBF,EAAWC,EAASJ,EAAcM,GAEpF,IAAIL,EAAmBI,EAAuBF,EAAWC,EAASE,EAA4Bvc,EACzG,EACqCkc,EAAmBziB,UAAUU,WAAa,SAAUC,GACrF,IAAI4I,EAAQrN,KAAKwmB;AACjB,GAAIxmB,KAAKqK,UACL,OAAOrK,KAAKqK,UAAU6C,SAASqZ,EAAmBtG,SAAU,EAAG,CAC3Dxb,WAAYA,EACZiiB,QAAS1mB,KAAK0mB,QACdD,UAAWzmB,KAAKymB,UAChBlD,eAAgBvjB,KAAKujB,eACrBlW,MAAOA;AAGf,IADA,IAAIqC,EAAK1P,KAAMymB,EAAY/W,EAAG+W,UAAWlD,EAAiB7T,EAAG6T,eAAgBmD,EAAUhX,EAAGgX,UACvF,CACC,GAAID,EAAW,CACX,IAAII,OAAkB;AACtB,IACIA,EAAkBJ,EAAUpZ,EAKhC,CAHA,MAAO7F,GAEH,YADA/C,EAAWjF,MAAMgI,EAErB,CACA,IAAKqf,EAAiB,CAClBpiB,EAAWK;AACX,KACJ,CACJ,CACA,IAAI3E,OAAQ;AACZ,IACIA,EAAQojB,EAAelW,EAK3B,CAHA,MAAO7F,GAEH,YADA/C,EAAWjF,MAAMgI,EAErB,CAEA,GADA/C,EAAWzB,KAAK7C,GACZsE,EAAWgB,OACX;AAEJ,IACI4H,EAAQqZ,EAAQrZ,EAKpB,CAHA,MAAO7F,GAEH,YADA/C,EAAWjF,MAAMgI,EAErB,CACJ,CACJ,EACA+e,EAAmBtG,SAAW,SAAU5S,GACpC,IAAI5I,EAAa4I,EAAM5I,WAAYgiB,EAAYpZ,EAAMoZ;AACrD,IAAIhiB,EAAWgB,OAAf,CAGA,GAAI4H,EAAMyZ,YACN,IACIzZ,EAAMA,MAAQA,EAAMqZ,QAAQrZ,EAAMA,MAKtC,CAHA,MAAO7F,GAEH,YADA/C,EAAWjF,MAAMgI,EAErB,MAGA6F,EAAMyZ,aAAc;AAExB,GAAIL,EAAW,CACX,IAAII,OAAkB;AACtB,IACIA,EAAkBJ,EAAUpZ,EAAMA,MAKtC,CAHA,MAAO7F,GAEH,YADA/C,EAAWjF,MAAMgI,EAErB,CACA,IAAKqf,EAED,YADApiB,EAAWK;AAGf,GAAIL,EAAWgB,OACX,MAER,CACA,IAAItF;AACJ,IACIA,EAAQkN,EAAMkW,eAAelW,EAAMA,MAKvC,CAHA,MAAO7F,GAEH,YADA/C,EAAWjF,MAAMgI,EAErB,CACA,IAAI/C,EAAWgB,SAGfhB,EAAWzB,KAAK7C,IACZsE,EAAWgB,QAGf,OAAOzF,KAAKkN,SAASG,EA7CrB,CA8CJ,EACOkZ,CACX,CAtHyB,CAsHvBhgB,EAAaU;AACfzG,EAAQ+lB,mBAAqBA,C;ACpI7B,IAAI/iB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBoc,EAAsB,EAAQ,OAC9BC,EAAoB,EAAQ,OAM5BmE,EAAgB,SAAU5iB,GAE1B,SAAS4iB,EAAaN,EAAWO,EAAYC,GACzC9iB,EAAOY,KAAK/E,MACZA,KAAKymB,UAAYA,EACjBzmB,KAAKgnB,WAAaA,EAClBhnB,KAAKinB,WAAaA,CACtB,CAQA,OAdAzjB,EAAUujB,EAAc5iB,GAOxB4iB,EAAahjB,OAAS,SAAU0iB,EAAWO,EAAYC,GACnD,OAAO,IAAIF,EAAaN,EAAWO,EAAYC,EACnD,EACqCF,EAAajjB,UAAUU,WAAa,SAAUC,GAC/E,IAAIiL,EAAK1P,KAAMymB,EAAY/W,EAAG+W,UAAWO,EAAatX,EAAGsX,WAAYC,EAAavX,EAAGuX;AACrF,OAAO,IAAIC,EAAaziB,EAAYgiB,EAAWO,EAAYC,EAC/D,EACOF,CACX,CAhBmB,CAgBjBxgB,EAAaU;AACfzG,EAAQumB,aAAeA;AACvB,IAAIG,EAAgB,SAAU/iB,GAE1B,SAAS+iB,EAAapd,EAAa2c,EAAWO,EAAYC,GACtD9iB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKymB,UAAYA,EACjBzmB,KAAKgnB,WAAaA,EAClBhnB,KAAKinB,WAAaA,EAClBjnB,KAAKmnB,OACT,CAkBA,OAzBA3jB,EAAU0jB,EAAc/iB,GAQxB+iB,EAAapjB,UAAUqjB,MAAQ,WAC3B,IAAIzX,EAAK1P,KAAMymB,EAAY/W,EAAG+W,UAAWO,EAAatX,EAAGsX,WAAYC,EAAavX,EAAGuX;AAErF,IAEI,IAAI5e,EADKoe,IACaO,EAAaC;AAC/B5e,EACArI,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMqI,IAGrDrI,KAAKoG,WAKb,CAFA,MAAOoB,GACHxH,KAAKiG,OAAOuB,EAChB,CACJ,EACO0f,CACX,CA3BmB,CA2BjBtE,EAAkBlZ,gB;AC1DpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIujB,EAAc,EAAQ,OACtB7gB,EAAe,EAAQ,OACvBkG,EAAU,EAAQ,OAMlB4a,EAAsB,SAAUljB,GAEhC,SAASkjB,EAAmBC,EAAQjd,QACjB,IAAXid,IAAqBA,EAAS,QAChB,IAAdjd,IAAwBA,EAAYoC,EAAQzK,OAChDmC,EAAOY,KAAK/E,MACZA,KAAKsnB,OAASA,EACdtnB,KAAKqK,UAAYA,IACZ+c,EAAYG,UAAUD,IAAWA,EAAS,KAC3CtnB,KAAKsnB,OAAS,GAEbjd,GAA2C,mBAAvBA,EAAU6C,WAC/BlN,KAAKqK,UAAYoC,EAAQzK,MAEjC,CAwDA,OArEAwB,EAAU6jB,EAAoBljB,GA+C9BkjB,EAAmBtjB,OAAS,SAAUujB,EAAQjd,GAG1C,YAFe,IAAXid,IAAqBA,EAAS,QAChB,IAAdjd,IAAwBA,EAAYoC,EAAQzK,OACzC,IAAIqlB,EAAmBC,EAAQjd,EAC1C,EACAgd,EAAmBpH,SAAW,SAAU5S,GACpC,IAAInK,EAAQmK,EAAMnK,MAAOuB,EAAa4I,EAAM5I,WAAY6iB,EAASja,EAAMia;AACvE7iB,EAAWzB,KAAKE,GACZuB,EAAWgB,SAGf4H,EAAMnK,OAAS,EACflD,KAAKkN,SAASG,EAAOia,GACzB,EACqCD,EAAmBvjB,UAAUU,WAAa,SAAUC,GACrF,IACI6iB,EAAStnB,KAAKsnB,OACdjd,EAAYrK,KAAKqK;AACrB5F,EAAWgE,IAAI4B,EAAU6C,SAASma,EAAmBpH,SAAUqH,EAAQ,CACnEpkB,MAJQ,EAIMuB,WAAYA,EAAY6iB,OAAQA,IAEtD,EACOD,CACX,CAvEyB,CAuEvB9gB,EAAaU;AACfzG,EAAQ6mB,mBAAqBA,C;ACrF7B,IAAI7jB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+D,EAAS,EAAQ,OACjBrB,EAAe,EAAQ,OACvBqG,EAAa,EAAQ,MAMrBwZ,EAAsB,SAAUjiB,GAEhC,SAASiiB,EAAmB/lB,EAAUgK,GAGlC,GAFAlG,EAAOY,KAAK/E,MACZA,KAAKqK,UAAYA,EACD,MAAZhK,EACA,MAAM,IAAIrB,MAAM;AAEpBgB,KAAKK,SAgGb,SAAqB6O,GACjB,IAAI3L,EAAI2L,EAAItC,EAAWvM;AACvB,IAAKkD,GAAoB,iBAAR2L,EACb,OAAO,IAAIsY,EAAetY;AAE9B,IAAK3L,QAAoBkE,IAAfyH,EAAI9L,OACV,OAAO,IAAIqkB,EAAcvY;AAE7B,IAAK3L,EACD,MAAM,IAAIlE,UAAU;AAExB,OAAO6P,EAAItC,EAAWvM,WAC1B,CA5GwBqnB,CAAYrnB,EAChC,CAoDA,OA5DAmD,EAAU4iB,EAAoBjiB,GAS9BiiB,EAAmBriB,OAAS,SAAU1D,EAAUgK,GAC5C,OAAO,IAAI+b,EAAmB/lB,EAAUgK,EAC5C,EACA+b,EAAmBnG,SAAW,SAAU5S,GACpC,IAAInK,EAAQmK,EAAMnK,MAAOwB,EAAW2I,EAAM3I,SAAUrE,EAAWgN,EAAMhN,SAAUoE,EAAa4I,EAAM5I;AAClG,GAAIC,EACAD,EAAWjF,MAAM6N,EAAM7N;IAD3B,CAIA,IAAImD,EAAStC,EAAS2C;AAClBL,EAAOQ,KACPsB,EAAWK,YAGfL,EAAWzB,KAAKL,EAAOxC,OACvBkN,EAAMnK,MAAQA,EAAQ,EAClBuB,EAAWgB,OACoB,mBAApBpF,EAASsnB,QAChBtnB,EAASsnB,SAIjB3nB,KAAKkN,SAASG,GAdd,CAeJ,EACqC+Y,EAAmBtiB,UAAUU,WAAa,SAAUC,GACrF,IACepE,EAANL,KAAoBK,SAAUgK,EAA9BrK,KAA6CqK;AACtD,GAAIA,EACA,OAAOA,EAAU6C,SAASkZ,EAAmBnG,SAAU,EAAG,CACtD/c,MAJI,EAIU7C,SAAUA,EAAUoE,WAAYA;AAIlD,OAAG,CACC,IAAI9B,EAAStC,EAAS2C;AACtB,GAAIL,EAAOQ,KAAM,CACbsB,EAAWK;AACX,KACJ,CAIA,GAFIL,EAAWzB,KAAKL,EAAOxC,OAEvBsE,EAAWgB,OAAQ,CACY,mBAApBpF,EAASsnB,QAChBtnB,EAASsnB;AAEb,KACJ,CACJ,CAER,EACOvB,CACX,CA9DyB,CA8DvB7f,EAAaU;AACfzG,EAAQ4lB,mBAAqBA;AAC7B,IAAIoB,EAAkB,WAClB,SAASA,EAAeI,EAAKC,EAAK3c,QAClB,IAAR2c,IAAkBA,EAAM,QAChB,IAAR3c,IAAkBA,EAAM0c,EAAIxkB,QAChCpD,KAAK4nB,IAAMA,EACX5nB,KAAK6nB,IAAMA,EACX7nB,KAAKkL,IAAMA,CACf,CAWA,OAVAsc,EAAe1jB,UAAU8I,EAAWvM,UAAY,WAAc,OAAO,IAAQ,EAC7EmnB,EAAe1jB,UAAUd,KAAO,WAC5B,OAAOhD,KAAK6nB,IAAM7nB,KAAKkL,IAAM,CACzB/H,MAAM,EACNhD,MAAOH,KAAK4nB,IAAIE,OAAO9nB,KAAK6nB,QAC5B,CACA1kB,MAAM,EACNhD,WAAOsH,EAEf,EACO+f,CACX,CAnBqB,GAoBjBC,EAAiB,WACjB,SAASA,EAAcM,EAAKF,EAAK3c,QACjB,IAAR2c,IAAkBA,EAAM,QAChB,IAAR3c,IAAkBA,EA+B9B,SAAkB8c,GACd,IAAI9c,GAAO8c,EAAE5kB;AACb,GAAI6kB,MAAM/c,GACN,OAAO;AAEX,GAAY,IAARA,IAYgB/K,EAZa+K,EAaT,iBAAV/K,IAAsByH,EAAOqB,KAAKif,SAAS/nB,IAZrD,OAAO+K;AAWf,IAAwB/K;AARpB,IADA+K,EAYJ,SAAc/K,GACV,IAAIgoB,GAAiBhoB;AACrB,GAAsB,IAAlBgoB,EACA,OAAOA;AAEX,GAAIF,MAAME,GACN,OAAOA;AAEX,OAAOA,EAAgB,GAAK,EAAI,CACpC,CArBUC,CAAKld,GAAOK,KAAK8c,MAAM9c,KAAK+c,IAAIpd,MAC3B,EACP,OAAO;AAEX,GAAIA,EAAMqd,EACN,OAAOA;AAEX,OAAOrd,CACX,CA/CoCsd,CAAST,IACrC/nB,KAAK+nB,IAAMA,EACX/nB,KAAK6nB,IAAMA,EACX7nB,KAAKkL,IAAMA,CACf,CAWA,OAVAuc,EAAc3jB,UAAU8I,EAAWvM,UAAY,WAAc,OAAOL,IAAM,EAC1EynB,EAAc3jB,UAAUd,KAAO,WAC3B,OAAOhD,KAAK6nB,IAAM7nB,KAAKkL,IAAM,CACzB/H,MAAM,EACNhD,MAAOH,KAAK+nB,IAAI/nB,KAAK6nB,QACrB,CACA1kB,MAAM,EACNhD,WAAOsH,EAEf,EACOggB,CACX,CAnBoB;AAiCpB,IAAIc,EAAiBhd,KAAKkd,IAAI,EAAG,IAAM,C;AClIvC,IAAIjlB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBmiB,EAAS,EAAQ,OAMjBC,EAAmB,SAAUxkB,GAE7B,SAASwkB,IACLxkB,EAAOY,KAAK/E,KAChB,CAsCA,OAzCAwD,EAAUmlB,EAAiBxkB,GAmC3BwkB,EAAgB5kB,OAAS,WACrB,OAAO,IAAI4kB,CACf,EACqCA,EAAgB7kB,UAAUU,WAAa,SAAUC,GAClFikB,EAAOE,MACX,EACOD,CACX,CA3CsB,CA2CpBpiB,EAAaU;AACfzG,EAAQmoB,gBAAkBA,C;ACxD1B,IAAInlB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF;AAEA,SAASoc,EAAS5S,GACd,IAAI6B,EAAM7B,EAAM6B,IAAK2Z,EAAOxb,EAAMwb,KAAMzlB,EAASiK,EAAMjK,OAAQF,EAAQmK,EAAMnK,MAAOuB,EAAa4I,EAAM5I;AACvG,GAAIvB,IAAUE,EAAd,CAIA,IAAI0lB,EAAMD,EAAK3lB;AACfuB,EAAWzB,KAAK,CAAC8lB,EAAK5Z,EAAI4Z,KAC1Bzb,EAAMnK,MAAQA,EAAQ,EACtBlD,KAAKkN,SAASG,EAJd,MAFI5I,EAAWK,UAOnB,CAMA,IAAIikB,EAAmB,SAAU5kB,GAE7B,SAAS4kB,EAAgB7Z,EAAK7E,GAC1BlG,EAAOY,KAAK/E,MACZA,KAAKkP,IAAMA,EACXlP,KAAKqK,UAAYA,EACjBrK,KAAK6oB,KAAOppB,OAAOopB,KAAK3Z,EAC5B,CAmDA,OAzDA1L,EAAUulB,EAAiB5kB,GAsC3B4kB,EAAgBhlB,OAAS,SAAUmL,EAAK7E,GACpC,OAAO,IAAI0e,EAAgB7Z,EAAK7E,EACpC,EACqC0e,EAAgBjlB,UAAUU,WAAa,SAAUC,GAClF,IAAeokB,EAAN7oB,KAAgB6oB,KAAMxe,EAAtBrK,KAAqCqK,UAC1CjH,EAASylB,EAAKzlB;AAClB,GAAIiH,EACA,OAAOA,EAAU6C,SAAS+S,EAAU,EAAG,CACnC/Q,IAAKlP,KAAKkP,IAAK2Z,KAAMA,EAAMzlB,OAAQA,EAAQF,MAAO,EAAGuB,WAAYA;AAIrE,IAAK,IAAIojB,EAAM,EAAGA,EAAMzkB,EAAQykB,IAAO,CACnC,IAAIiB,EAAMD,EAAKhB;AACfpjB,EAAWzB,KAAK,CAAC8lB,EAAK9oB,KAAKkP,IAAI4Z,IACnC,CACArkB,EAAWK,UAEnB,EACOikB,CACX,CA3DsB,CAjBH,EAAQ,OA4EZ9hB;AACfzG,EAAQuoB,gBAAkBA,C;AClF1B,IAAIvlB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+D,EAAS,EAAQ,OAOjBue,EAAqB,SAAUhiB,GAE/B,SAASgiB,EAAkB6C,EAAS3e,GAChClG,EAAOY,KAAK/E,MACZA,KAAKgpB,QAAUA,EACfhpB,KAAKqK,UAAYA,CACrB,CAqFA,OA1FA7G,EAAU2iB,EAAmBhiB,GAgC7BgiB,EAAkBpiB,OAAS,SAAUilB,EAAS3e,GAC1C,OAAO,IAAI8b,EAAkB6C,EAAS3e,EAC1C,EACqC8b,EAAkBriB,UAAUU,WAAa,SAAUC,GACpF,IAAIuE,EAAQhJ,KACRgpB,EAAUhpB,KAAKgpB,QACf3e,EAAYrK,KAAKqK;AACrB,GAAiB,MAAbA,EACIrK,KAAKiI,UACAxD,EAAWgB,SACZhB,EAAWzB,KAAKhD,KAAKG,OACrBsE,EAAWK,YAIfkkB,EAAQC,MAAK,SAAU9oB,GACnB6I,EAAM7I,MAAQA,EACd6I,EAAMf,WAAY,EACbxD,EAAWgB,SACZhB,EAAWzB,KAAK7C,GAChBsE,EAAWK,WAEnB,IAAG,SAAU0C,GACJ/C,EAAWgB,QACZhB,EAAWjF,MAAMgI,EAEzB,IACKyhB,KAAK,MAAM,SAAUzhB,GAEtBI,EAAOqB,KAAKigB,YAAW,WAAc,MAAM1hB,CAAK,GACpD;KAIJ,GAAIxH,KAAKiI,WACL,IAAKxD,EAAWgB,OACZ,OAAO4E,EAAU6C,SAASkU,EAAc,EAAG,CAAEjhB,MAAOH,KAAKG,MAAOsE,WAAYA,SAIhFukB,EAAQC,MAAK,SAAU9oB,GACnB6I,EAAM7I,MAAQA,EACd6I,EAAMf,WAAY,EACbxD,EAAWgB,QACZhB,EAAWgE,IAAI4B,EAAU6C,SAASkU,EAAc,EAAG,CAAEjhB,MAAOA,EAAOsE,WAAYA,IAEvF,IAAG,SAAU+C,GACJ/C,EAAWgB,QACZhB,EAAWgE,IAAI4B,EAAU6C,SAASiU,EAAe,EAAG,CAAE3Z,IAAKA,EAAK/C,WAAYA,IAEpF,IACKwkB,KAAK,MAAM,SAAUzhB,GAEtBI,EAAOqB,KAAKigB,YAAW,WAAc,MAAM1hB,CAAK,GACpD,GAGZ,EACO2e,CACX,CA5FwB,CANL,EAAQ,OAkGZlf;AAEf,SAASma,EAAaC,GAClB,IAAIlhB,EAAQkhB,EAAIlhB,MAAOsE,EAAa4c,EAAI5c;AACnCA,EAAWgB,SACZhB,EAAWzB,KAAK7C,GAChBsE,EAAWK,WAEnB,CACA,SAASqc,EAAcE,GACnB,IAAI7Z,EAAM6Z,EAAI7Z,IAAK/C,EAAa4c,EAAI5c;AAC/BA,EAAWgB,QACZhB,EAAWjF,MAAMgI,EAEzB,CAbAhH,EAAQ2lB,kBAAoBA,C;ACzG5B,IAAI3iB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAOIslB,EAAmB,SAAUhlB,GAE7B,SAASglB,EAAgBC,EAAOznB,EAAO0I,GACnClG,EAAOY,KAAK/E,MACZA,KAAKopB,MAAQA,EACbppB,KAAKqpB,OAAS1nB,EACd3B,KAAKqK,UAAYA,CACrB,CAyEA,OA/EA7G,EAAU2lB,EAAiBhlB,GAqC3BglB,EAAgBplB,OAAS,SAAUqlB,EAAOznB,EAAO0I,GAG7C,YAFc,IAAV+e,IAAoBA,EAAQ,QAClB,IAAVznB,IAAoBA,EAAQ,GACzB,IAAIwnB,EAAgBC,EAAOznB,EAAO0I,EAC7C,EACA8e,EAAgBlJ,SAAW,SAAU5S,GACjC,IAAI+b,EAAQ/b,EAAM+b,MAAOlmB,EAAQmK,EAAMnK,MAAOvB,EAAQ0L,EAAM1L,MAAO8C,EAAa4I,EAAM5I;AAClFvB,GAASvB,EACT8C,EAAWK,YAGfL,EAAWzB,KAAKomB,GACZ3kB,EAAWgB,SAGf4H,EAAMnK,MAAQA,EAAQ,EACtBmK,EAAM+b,MAAQA,EAAQ,EACtBppB,KAAKkN,SAASG,IAClB,EACqC8b,EAAgBrlB,UAAUU,WAAa,SAAUC,GAClF,IAAIvB,EAAQ,EACRkmB,EAAQppB,KAAKopB,MACbznB,EAAQ3B,KAAKqpB,OACbhf,EAAYrK,KAAKqK;AACrB,GAAIA,EACA,OAAOA,EAAU6C,SAASic,EAAgBlJ,SAAU,EAAG,CACnD/c,MAAOA,EAAOvB,MAAOA,EAAOynB,MAAOA,EAAO3kB,WAAYA;AAI1D,OAAG,CACC,GAAIvB,KAAWvB,EAAO,CAClB8C,EAAWK;AACX,KACJ,CAEA,GADAL,EAAWzB,KAAKomB,KACZ3kB,EAAWgB,OACX,KAER,CAER,EACO0jB,CACX,CAjFsB,CANH,EAAQ,OAuFZliB;AACfzG,EAAQ2oB,gBAAkBA,C;AC7F1B,IAAI3lB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAOImc,EAAoB,SAAU7b,GAE9B,SAAS6b,EAAiB7f,EAAOkK,GAC7BlG,EAAOY,KAAK/E,MACZA,KAAKG,MAAQA,EACbH,KAAKqK,UAAYA,EACjBrK,KAAKiI,WAAY,EACboC,IACArK,KAAKiI,WAAY,EAEzB,CAgCA,OAzCAzE,EAAUwc,EAAkB7b,GAU5B6b,EAAiBjc,OAAS,SAAU5D,EAAOkK,GACvC,OAAO,IAAI2V,EAAiB7f,EAAOkK,EACvC,EACA2V,EAAiBC,SAAW,SAAU5S,GAClC,IAAIlK,EAAOkK,EAAMlK,KAAMhD,EAAQkN,EAAMlN,MAAOsE,EAAa4I,EAAM5I;AAC3DtB,EACAsB,EAAWK,YAGfL,EAAWzB,KAAK7C,GACZsE,EAAWgB,SAGf4H,EAAMlK,MAAO,EACbnD,KAAKkN,SAASG,IAClB,EACqC2S,EAAiBlc,UAAUU,WAAa,SAAUC,GACnF,IAAItE,EAAQH,KAAKG,MACbkK,EAAYrK,KAAKqK;AACrB,GAAIA,EACA,OAAOA,EAAU6C,SAAS8S,EAAiBC,SAAU,EAAG,CACpD9c,MAAM,EAAOhD,MAAOA,EAAOsE,WAAYA;AAI3CA,EAAWzB,KAAK7C,GACXsE,EAAWgB,QACZhB,EAAWK,UAGvB,EACOkb,CACX,CA3CuB,CANJ,EAAQ,OAiDZ/Y;AACfzG,EAAQwf,iBAAmBA,C;ACvD3B,IAAIxc,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBiG,EAAS,EAAQ,OACjB4a,EAAc,EAAQ,OAMtBkC,EAAyB,SAAUnlB,GAEnC,SAASmlB,EAAsBjhB,EAAQkhB,EAAWlf,QAC5B,IAAdkf,IAAwBA,EAAY,QACtB,IAAdlf,IAAwBA,EAAYmC,EAAOK,MAC/C1I,EAAOY,KAAK/E,MACZA,KAAKqI,OAASA,EACdrI,KAAKupB,UAAYA,EACjBvpB,KAAKqK,UAAYA,IACZ+c,EAAYG,UAAUgC,IAAcA,EAAY,KACjDvpB,KAAKupB,UAAY,GAEhBlf,GAA2C,mBAAvBA,EAAU6C,WAC/BlN,KAAKqK,UAAYmC,EAAOK,KAEhC,CAkBA,OAhCArJ,EAAU8lB,EAAuBnlB,GAejCmlB,EAAsBvlB,OAAS,SAAUsE,EAAQ+E,EAAO/C,GAGpD,YAFc,IAAV+C,IAAoBA,EAAQ,QACd,IAAd/C,IAAwBA,EAAYmC,EAAOK,MACxC,IAAIyc,EAAsBjhB,EAAQ+E,EAAO/C,EACpD,EACAif,EAAsBrJ,SAAW,SAAUoB,GACvC,IAAIhZ,EAASgZ,EAAIhZ,OAAQ5D,EAAa4c,EAAI5c;AAC1C,OAAOzE,KAAKyI,IAAIJ,EAAOL,UAAUvD,GACrC,EACqC6kB,EAAsBxlB,UAAUU,WAAa,SAAUC,GACxF,IAAI2I,EAAQpN,KAAKupB,UACblhB,EAASrI,KAAKqI;AAElB,OADgBrI,KAAKqK,UACJ6C,SAASoc,EAAsBrJ,SAAU7S,EAAO,CAC7D/E,OAAQA,EAAQ5D,WAAYA,GAEpC,EACO6kB,CACX,CAlC4B,CAkC1B/iB,EAAaU;AACfzG,EAAQ8oB,sBAAwBA,C;AChDhC,IAAI9lB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIujB,EAAc,EAAQ,OACtB7gB,EAAe,EAAQ,OACvBkG,EAAU,EAAQ,OAClByT,EAAgB,EAAQ,OACxBsJ,EAAW,EAAQ,OAMnBC,EAAmB,SAAUtlB,GAE7B,SAASslB,EAAgBC,EAASpC,EAAQjd,QACtB,IAAZqf,IAAsBA,EAAU,GACpCvlB,EAAOY,KAAK/E,MACZA,KAAKsnB,QAAU,EACftnB,KAAK0pB,QAAU,EACXtC,EAAYG,UAAUD,GACtBtnB,KAAKsnB,OAAS7kB,OAAO6kB,GAAU,EAAK,EAAK7kB,OAAO6kB,GAE3CpH,EAAcG,YAAYiH,KAC/Bjd,EAAYid,GAEXpH,EAAcG,YAAYhW,KAC3BA,EAAYoC,EAAQzK,OAExBhC,KAAKqK,UAAYA,EACjBrK,KAAK0pB,QAAUF,EAASG,OAAOD,IACzBA,EAAU1pB,KAAKqK,UAAUK,MAC3Bgf,CACR,CAmEA,OAtFAlmB,EAAUimB,EAAiBtlB,GA8D3BslB,EAAgB1lB,OAAS,SAAU6lB,EAActC,EAAQjd,GAErD,YADqB,IAAjBuf,IAA2BA,EAAe,GACvC,IAAIH,EAAgBG,EAActC,EAAQjd,EACrD,EACAof,EAAgBxJ,SAAW,SAAU5S,GACjC,IAAInK,EAAQmK,EAAMnK,MAAOokB,EAASja,EAAMia,OAAQ7iB,EAAa4I,EAAM5I;AAGnE,GADAA,EAAWzB,KAAKE,IACZuB,EAAWgB,OAAf,CAGK,IAAgB,IAAZ6hB,EACL,OAAO7iB,EAAWK;AAEtBuI,EAAMnK,MAAQA,EAAQ,EARTlD,KASNkN,SAASG,EAAOia,EAFvB,CAGJ,EACqCmC,EAAgB3lB,UAAUU,WAAa,SAAUC,GAClF,IACIiL,EAAK1P,KAAMsnB,EAAS5X,EAAG4X,OAAQoC,EAAUha,EAAGga;AAChD,OADqEha,EAAGrF,UACvD6C,SAASuc,EAAgBxJ,SAAUyJ,EAAS,CACzDxmB,MAHQ,EAGMokB,OAAQA,EAAQ7iB,WAAYA,GAElD,EACOglB,CACX,CAxFsB,CAwFpBljB,EAAaU;AACfzG,EAAQipB,gBAAkBA,C;ACxG1B,IAAIjmB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBoc,EAAsB,EAAQ,OAC9BC,EAAoB,EAAQ,OAM5BiH,EAAmB,SAAU1lB,GAE7B,SAAS0lB,EAAgBC,EAAiBhH,GACtC3e,EAAOY,KAAK/E,MACZA,KAAK8pB,gBAAkBA,EACvB9pB,KAAK8iB,kBAAoBA,CAC7B,CAeA,OApBAtf,EAAUqmB,EAAiB1lB,GAM3B0lB,EAAgB9lB,OAAS,SAAU+lB,EAAiBhH,GAChD,OAAO,IAAI+G,EAAgBC,EAAiBhH,EAChD,EACqC+G,EAAgB/lB,UAAUU,WAAa,SAAUC,GAClF,IACIslB,EADWD,EAAN9pB,KAA2B8pB,gBAAiBhH,EAA5C9iB,KAAmE8iB;AAE5E,IAEI,OADAiH,EAAWD,IACJ,IAAIE,EAAgBvlB,EAAYslB,EAAUjH,EAIrD,CAFA,MAAOtb,GACH/C,EAAWjF,MAAMgI,EACrB,CACJ,EACOqiB,CACX,CAtBsB,CAsBpBtjB,EAAaU;AACfzG,EAAQqpB,gBAAkBA;AAC1B,IAAIG,EAAmB,SAAU7lB,GAE7B,SAAS6lB,EAAgBlgB,EAAaigB,EAAUjH,GAC5C3e,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK+pB,SAAWA,EAChB/pB,KAAK8iB,kBAAoBA,EACzBhZ,EAAYrB,IAAIshB,GAChB/pB,KAAKiqB,QACT,CAYA,OAnBAzmB,EAAUwmB,EAAiB7lB,GAQ3B6lB,EAAgBlmB,UAAUmmB,OAAS,WAC/B,IACI,IAAI5hB,EAASrI,KAAK8iB,kBAAkB/d,KAAK/E,KAAMA,KAAK+pB;AAChD1hB,GACArI,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMqI,GAK7D,CAFA,MAAOb,GACHxH,KAAKiG,OAAOuB,EAChB,CACJ,EACOwiB,CACX,CArBsB,CAqBpBpH,EAAkBlZ,gB;AC1DpB,IAAIwgB,EAA4B,EAAQ;AACxC1pB,EAAQmQ,aAAeuZ,EAA0B1J,wBAAwBzc,M;ACDzE,IAAIomB,EAAgC,EAAQ;AAC5C3pB,EAAQqQ,iBAAmBsZ,EAA8B7I,4BAA4Bvd,M;ACDrF,IAAImc,EAAgB,EAAQ,OACxB/Q,EAAY,EAAQ,OACpB2W,EAAoB,EAAQ,MAC5BhV,EAAkB,EAAQ;AAkI9BtQ,EAAQuQ,cApBR,WAEI,IADA,IAAIqZ,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,IAAI+gB,EAAU,KACVhgB,EAAY;AAYhB,OAXI6V,EAAcG,YAAY+J,EAAYA,EAAYhnB,OAAS,MAC3DiH,EAAY+f,EAAY9J,OAEuB,mBAAxC8J,EAAYA,EAAYhnB,OAAS,KACxCinB,EAAUD,EAAY9J,OAIC,IAAvB8J,EAAYhnB,QAAgB+L,EAAU/P,QAAQgrB,EAAY,MAC1DA,EAAcA,EAAY,IAEvB,IAAItE,EAAkB3F,gBAAgBiK,EAAa/f,GAAWnC,KAAK,IAAI4I,EAAgBwZ,sBAAsBD,GACxH,C;ACpIA,IAAInK,EAAgB,EAAQ,OACxBrN,EAAO,EAAQ,OACfnB,EAAS,EAAQ,MACjBuD,EAAc,EAAQ;AAyG1BzU,EAAQ0P,OAVR,WAEI,IADA,IAAIka,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAA2B,IAAvB8gB,EAAYhnB,QAAwC,IAAvBgnB,EAAYhnB,QAAgB8c,EAAcG,YAAY+J,EAAY,IACxF1Y,EAAOC,KAAKyY,EAAY,IAE5BnV,EAAYC,WAAZD,CAAwBpC,EAAK3L,GAAG9C,WAAM,EAAQgmB,GACzD,C;AC3GA,IAAIG,EAAoB,EAAQ;AAChC/pB,EAAQ0Q,MAAQqZ,EAAkB1H,gBAAgB9e,M;ACDlD,IAAIP,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+D,EAAS,EAAQ,OACjByH,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxB/I,EAAe,EAAQ,OACvBgH,EAAe,EAAQ,OACvBoL,EAAQ,EAAQ;AACpB,SAAS6R,IACL,GAAI5iB,EAAOqB,KAAKwhB,eACZ,OAAO,IAAI7iB,EAAOqB,KAAKwhB;AAEtB,GAAM7iB,EAAOqB,KAAKyhB,eACnB,OAAO,IAAI9iB,EAAOqB,KAAKyhB;AAGvB,MAAM,IAAI1rB,MAAM,wCAExB,CA0BA,SAAS2rB,EAAQC,EAAKC,GAElB,YADgB,IAAZA,IAAsBA,EAAU,MAC7B,IAAIC,EAAe,CAAEC,OAAQ,MAAOH,IAAKA,EAAKC,QAASA,GAClE,CAGA,SAASG,EAASJ,EAAKK,EAAMJ,GACzB,OAAO,IAAIC,EAAe,CAAEC,OAAQ,OAAQH,IAAKA,EAAKK,KAAMA,EAAMJ,QAASA,GAC/E,CAGA,SAASK,EAAWN,EAAKC,GACrB,OAAO,IAAIC,EAAe,CAAEC,OAAQ,SAAUH,IAAKA,EAAKC,QAASA,GACrE,CAGA,SAASM,EAAQP,EAAKK,EAAMJ,GACxB,OAAO,IAAIC,EAAe,CAAEC,OAAQ,MAAOH,IAAKA,EAAKK,KAAMA,EAAMJ,QAASA,GAC9E,CAGA,SAASO,EAAUR,EAAKK,EAAMJ,GAC1B,OAAO,IAAIC,EAAe,CAAEC,OAAQ,QAASH,IAAKA,EAAKK,KAAMA,EAAMJ,QAASA,GAChF,CAnBArqB,EAAQmqB,QAAUA,EAKlBnqB,EAAQwqB,SAAWA,EAKnBxqB,EAAQ0qB,WAAaA,EAKrB1qB,EAAQ2qB,QAAUA,EAKlB3qB,EAAQ4qB,UAAYA;AAEpB,IAAIC,EAAc1S,EAAMpZ,KAAI,SAAUkK,EAAGvG,GAAS,OAAOuG,EAAE6hB,QAAU;AACrE,SAASC,EAAYX,EAAKC,GACtB,OAAOQ,EAAY,IAAIP,EAAe,CAClCC,OAAQ,MACRH,IAAKA,EACLY,aAAc,OACdX,QAASA,IAEjB,CACArqB,EAAQ+qB,YAAcA;AAOtB,IAAIT,EAAkB,SAAU3mB,GAE5B,SAAS2mB,EAAeW,GACpBtnB,EAAOY,KAAK/E;AACZ,IAAI0rB,EAAU,CACV1pB,OAAO,EACP2pB,UAAW,WACP,OAAO3rB,KAAK4rB,YAAcpB,EAAezlB,KAAK/E,MA1E9D,WACI,GAAI4H,EAAOqB,KAAKwhB,eACZ,OAAO,IAAI7iB,EAAOqB,KAAKwhB;AAGvB,IAAIoB,OAAS;AACb,IAEI,IADA,IAAIC,EAAU,CAAC,iBAAkB,oBAAqB,sBAC7CvoB,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAEI,GADAsoB,EAASC,EAAQvoB,GACb,IAAIqE,EAAOqB,KAAK8iB,cAAcF,GAC9B,KAIR,CADA,MAAO/b,GACP,CAEJ,OAAO,IAAIlI,EAAOqB,KAAK8iB,cAAcF,EAIzC,CAFA,MAAO/b,GACH,MAAM,IAAI9Q,MAAM,kDACpB,CAER,CAkDsEgtB,EAC1D,EACAJ,aAAa,EACbK,iBAAiB,EACjBpB,QAAS,CAAC,EACVE,OAAQ,MACRS,aAAc,OACdlN,QAAS;AAEb,GAA4B,iBAAjBmN,EACPC,EAAQd,IAAMa;KAGd,IAAK,IAAIS,KAAQT,EACTA,EAAa7nB,eAAesoB,KAC5BR,EAAQQ,GAAQT,EAAaS;AAIzClsB,KAAK0rB,QAAUA,CACnB,CA8BwB,IAChB3nB;AAWR,OApEAP,EAAUsnB,EAAgB3mB,GA2BW2mB,EAAehnB,UAAUU,WAAa,SAAUC,GACjF,OAAO,IAAI0nB,EAAe1nB,EAAYzE,KAAK0rB,QAC/C,EA2BAZ,EAAe/mB,SACPA,EAAS,SAAU0nB,GACnB,OAAO,IAAIX,EAAeW,EAC9B,GACOrmB,IAAMulB,EACb5mB,EAAOqoB,KAAOpB,EACdjnB,EAAOsoB,OAASnB,EAChBnnB,EAAOuoB,IAAMnB,EACbpnB,EAAOwoB,MAAQnB,EACfrnB,EAAOyoB,QAAUjB,EACVxnB,GAEJ+mB,CACX,CAtEqB,CAsEnBvkB,EAAaU;AACfzG,EAAQsqB,eAAiBA;AAMzB,IAAIqB,EAAkB,SAAUhoB,GAE5B,SAASgoB,EAAeriB,EAAa4hB,GACjCvnB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK0rB,QAAUA,EACf1rB,KAAKmD,MAAO;AACZ,IAAI0nB,EAAUa,EAAQb,QAAUa,EAAQb,SAAW,CAAC;AAE/Ca,EAAQE,aAAgBf,EAAQ,sBACjCA,EAAQ,oBAAsB,kBAG5B,iBAAkBA,GAAcjjB,EAAOqB,KAAKwjB,UAAYf,EAAQT,gBAAgBrjB,EAAOqB,KAAKwjB,eAAqC,IAAjBf,EAAQT,OAC1HJ,EAAQ,gBAAkB,oDAG9Ba,EAAQT,KAAOjrB,KAAK0sB,cAAchB,EAAQT,KAAMS,EAAQb,QAAQ,iBAChE7qB,KAAK2sB,MACT,CAmKA,OApLAnpB,EAAU2oB,EAAgBhoB,GAkB1BgoB,EAAeroB,UAAUd,KAAO,SAAU8M,GACtC9P,KAAKmD,MAAO;AACZ,IAAIuM,EAAK1P,KAAM4sB,EAAMld,EAAGkd,IAAKlB,EAAUhc,EAAGgc,QAAS5hB,EAAc4F,EAAG5F,YAChEwhB,EAAW,IAAIjf,EAAayD,EAAG8c,EAAKlB;AACxC5hB,EAAY9G,KAAKsoB,EACrB,EACAa,EAAeroB,UAAU6oB,KAAO,WAC5B,IAAejB,EAAN1rB,KAAmB0rB,QAASmB,EAA5B7sB,KAAoC0rB,QAASoB,EAAOD,EAAGC,KAAM/B,EAAS8B,EAAG9B,OAAQH,EAAMiC,EAAGjC,IAAK5oB,EAAQ6qB,EAAG7qB,MAAO+qB,EAAWF,EAAGE,SAAUlC,EAAUgC,EAAGhC,QAASI,EAAO4B,EAAG5B,KAC9KU,EAAYD,EAAQC,UACpBiB,EAAMvd,EAAWO,SAAS+b,GAAW5mB,KAAK2mB;AAC9C,GAAIkB,IAAQtd,EAAcO,YACtB7P,KAAKR,MAAM8P,EAAcO,YAAYC;IAEpC,CACD9P,KAAK4sB,IAAMA,EAKX5sB,KAAKgtB,YAAYJ,EAAKlB;AAStB,IANIoB,EACSzd,EAAWO,SAASgd,EAAIK,MAAMloB,KAAK6nB,EAAK7B,EAAQH,EAAK5oB,EAAO8qB,EAAMC,GAGlE1d,EAAWO,SAASgd,EAAIK,MAAMloB,KAAK6nB,EAAK7B,EAAQH,EAAK5oB,MAEnDsN,EAAcO,YAEzB,OADA7P,KAAKR,MAAM8P,EAAcO,YAAYC,GAC9B;AAcX,GAXI9N,IACA4qB,EAAItO,QAAUoN,EAAQpN,QACtBsO,EAAIpB,aAAeE,EAAQF,cAE3B,oBAAqBoB,IACrBA,EAAIX,kBAAoBP,EAAQO,iBAGpCjsB,KAAKktB,WAAWN,EAAK/B,IAEZI,EAAO5b,EAAWO,SAASgd,EAAID,MAAM5nB,KAAK6nB,EAAK3B,GAAQ5b,EAAWO,SAASgd,EAAID,MAAM5nB,KAAK6nB,MACpFtd,EAAcO,YAEzB,OADA7P,KAAKR,MAAM8P,EAAcO,YAAYC,GAC9B,IAEf,CACA,OAAO8c,CACX,EACAT,EAAeroB,UAAU4oB,cAAgB,SAAUzB,EAAMkC,GACrD,IAAKlC,GAAwB,iBAATA,EAChB,OAAOA;AAEN,GAAIrjB,EAAOqB,KAAKwjB,UAAYxB,aAAgBrjB,EAAOqB,KAAKwjB,SACzD,OAAOxB;AAEX,GAAIkC,EAAa,CACb,IAAIC,EAAaD,EAAYrf,QAAQ,MACjB,IAAhBsf,IACAD,EAAcA,EAAYE,UAAU,EAAGD,GAE/C,CACA,OAAQD,GACJ,IAAK,oCACD,OAAO1tB,OAAOopB,KAAKoC,GAAM1rB,KAAI,SAAUupB,GAAO,OAAQwE,mBAAmBxE,GAAO,IAAMwE,mBAAmBrC,EAAKnC,GAAQ,IAAGhpB,KAAK;AAClI,IAAK,mBACD,OAAOytB,KAAKC,UAAUvC;AAC1B,QACI,OAAOA,EAEnB,EACAkB,EAAeroB,UAAUopB,WAAa,SAAUN,EAAK/B,GACjD,IAAK,IAAI/B,KAAO+B,EACRA,EAAQjnB,eAAeklB,IACvB8D,EAAIa,iBAAiB3E,EAAK+B,EAAQ/B,GAG9C,EACAqD,EAAeroB,UAAUkpB,YAAc,SAAUJ,EAAKlB,GAClD,IAAIgC,EAAqBhC,EAAQgC;AACjC,SAASC,EAAW7d,GAChB,IAAIJ,EAAKie,EAAYlpB,EAAaiL,EAAGjL,WAAYipB,EAAqBhe,EAAGge,mBAAoBhC,EAAUhc,EAAGgc;AACtGgC,GACAA,EAAmBluB,MAAMsQ,GAE7BrL,EAAWjF,MAAM,IAAI+M,EAAiBvM,KAAM0rB,GAChD,CAMA,GAJAkB,EAAIgB,UAAYD,EAChBA,EAAWjC,QAAUA,EACrBiC,EAAWlpB,WAAazE,KACxB2tB,EAAWD,mBAAqBA,EAC5Bd,EAAIiB,QAAU,oBAAqBjB,EAAK,CAEpC,IAAIkB,EAaJC;AAdJ,GAAIL,EAEAI,EAAgB,SAAUhe,GACGge,EAAcJ,mBACpB1qB,KAAK8M,EAC5B,EACIlI,EAAOqB,KAAKyhB,eACZkC,EAAIoB,WAAaF,EAGjBlB,EAAIiB,OAAOG,WAAaF,EAE5BA,EAAcJ,mBAAqBA;AAGvCK,EAAa,SAAUje,GACnB,IAAIJ,EAAKqe,EAAYL,EAAqBhe,EAAGge,mBAAoBjpB,EAAaiL,EAAGjL,WAAYinB,EAAUhc,EAAGgc;AACtGgC,GACAA,EAAmBluB,MAAMsQ,GAE7BrL,EAAWjF,MAAM,IAAI8M,EAAU,aAActM,KAAM0rB,GACvD,EACAkB,EAAIqB,QAAUF,EACdA,EAAWrC,QAAUA,EACrBqC,EAAWtpB,WAAazE,KACxB+tB,EAAWL,mBAAqBA,CACpC,CACA,SAASQ,EAAoBpe,GACzB,IAAIJ,EAAKwe,EAAqBzpB,EAAaiL,EAAGjL,WAAYipB,EAAqBhe,EAAGge,mBAAoBhC,EAAUhc,EAAGgc;AACnH,GAAwB,IAApB1rB,KAAKmuB,WAAkB,CAEvB,IAAIC,EAA2B,OAAhBpuB,KAAKquB,OAAkB,IAAMruB,KAAKquB,OAC7C/C,EAAkC,SAAtBtrB,KAAKwrB,aAA2BxrB,KAAKsrB,UAAYtrB,KAAKsuB,aAAgBtuB,KAAKsrB;AAI1E,IAAb8C,IACAA,EAAW9C,EAAW,IAAM,GAE5B,KAAO8C,GAAYA,EAAW,KAC1BV,GACAA,EAAmB5oB,WAEvBL,EAAWzB,KAAK8M,GAChBrL,EAAWK,aAGP4oB,GACAA,EAAmBluB,MAAMsQ,GAE7BrL,EAAWjF,MAAM,IAAI8M,EAAU,cAAgB8hB,EAAUpuB,KAAM0rB,IAEvE,CACJ,CAEAkB,EAAI2B,mBAAqBL,EACzBA,EAAoBzpB,WAAazE,KACjCkuB,EAAoBR,mBAAqBA,EACzCQ,EAAoBxC,QAAUA,CAClC,EACAS,EAAeroB,UAAUqC,YAAc,WACnC,IAAehD,EAANnD,KAAgBmD,KAAMypB,EAAtB5sB,KAA+B4sB;CACnCzpB,GAAQypB,GAA0B,IAAnBA,EAAIuB,YAAyC,mBAAdvB,EAAI4B,OACnD5B,EAAI4B,QAERrqB,EAAOL,UAAUqC,YAAYpB,KAAK/E,KACtC,EACOmsB,CACX,CAtLqB,CAsLnB5e,EAAajH;AACf9F,EAAQ2rB,eAAiBA;AAQzB,IAAI9f,EACA,SAAsBoiB,EAAe7B,EAAKlB,GACtC1rB,KAAKyuB,cAAgBA,EACrBzuB,KAAK4sB,IAAMA,EACX5sB,KAAK0rB,QAAUA,EACf1rB,KAAKquB,OAASzB,EAAIyB,OAClBruB,KAAKwrB,aAAeoB,EAAIpB,cAAgBE,EAAQF,aAChDxrB,KAAKsrB,SAAWoD,EAAiB1uB,KAAKwrB,aAAcoB,EACxD;AAGJpsB,EAAQ6L,aAAeA;AAQvB,IAAIC,EAAa,SAAUnI,GAEvB,SAASmI,EAAUhN,EAASstB,EAAKlB,GAC7BvnB,EAAOY,KAAK/E,KAAMV,GAClBU,KAAKV,QAAUA,EACfU,KAAK4sB,IAAMA,EACX5sB,KAAK0rB,QAAUA,EACf1rB,KAAKquB,OAASzB,EAAIyB,OAClBruB,KAAKwrB,aAAeoB,EAAIpB,cAAgBE,EAAQF,aAChDxrB,KAAKsrB,SAAWoD,EAAiB1uB,KAAKwrB,aAAcoB,EACxD,CACA,OAVAppB,EAAU8I,EAAWnI,GAUdmI,CACX,CAZgB,CAYdtN;AAEF,SAAS0vB,EAAiBlD,EAAcoB,GACpC,OAAQpB,GACJ,IAAK,OACD,MAAI,aAAcoB,EAEPA,EAAIpB,aAAeoB,EAAItB,SAAWiC,KAAKoB,MAAM/B,EAAItB,UAAYsB,EAAI0B,cAAgB,QAKjFf,KAAKoB,MAAM/B,EAAI0B,cAAgB;AAE9C,IAAK,MACD,OAAO1B,EAAIgC;AAEf,QAGI,MAAQ,aAAchC,EAAOA,EAAItB,SAAWsB,EAAI0B,aAE5D,CArBA9tB,EAAQ8L,UAAYA;AA2BpB,IAAIC,EAAoB,SAAUpI,GAE9B,SAASoI,EAAiBqgB,EAAKlB,GAC3BvnB,EAAOY,KAAK/E,KAAM,eAAgB4sB,EAAKlB,EAC3C,CACA,OAJAloB,EAAU+I,EAAkBpI,GAIrBoI,CACX,CANuB,CAMrBD;AACF9L,EAAQ+L,iBAAmBA,C;ACva3B,IAAI/I,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBuJ,EAAe,EAAQ,OACvBhH,EAAe,EAAQ,OACvBtC,EAAiB,EAAQ,OACzB2D,EAAS,EAAQ,OACjBinB,EAAkB,EAAQ,OAC1Bxf,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBwf,EAAW,EAAQ,OAMnBC,EAAoB,SAAU5qB,GAE9B,SAAS4qB,EAAiBC,EAAmBllB,GACzC,GAAIklB,aAA6BzoB,EAAaU,WAC1C9C,EAAOY,KAAK/E,KAAM8J,EAAaklB;IAE9B,CAWD,GAVA7qB,EAAOY,KAAK/E,MACZA,KAAKivB,cAAgBrnB,EAAOqB,KAAKimB,UACjClvB,KAAKmvB,QAAU,IAAInrB,EAAUgB,QACI,iBAAtBgqB,EACPhvB,KAAK4qB,IAAMoE,EAIXF,EAASpvB,OAAOM,KAAMgvB,IAErBhvB,KAAKivB,cACN,MAAM,IAAIjwB,MAAM;AAEpBgB,KAAK8J,YAAc,IAAI+kB,EAAgB3kB,aAC3C,CACJ,CA4MA,OAjOA1G,EAAUurB,EAAkB5qB,GAsB5B4qB,EAAiBjrB,UAAUyf,eAAiB,SAAUzT,GAClD,OAAOyd,KAAKoB,MAAM7e,EAAEsf,KACxB,EAuCAL,EAAiBhrB,OAAS,SAAUirB,GAChC,OAAO,IAAID,EAAiBC,EAChC,EACAD,EAAiBjrB,UAAUoE,KAAO,SAAUC,GACxC,IAAIknB,EAAO,IAAIN,EAAiB/uB,KAAMA,KAAK8J;AAE3C,OADAulB,EAAKlnB,SAAWA,EACTknB,CACX,EACAN,EAAiBjrB,UAAUwrB,YAAc,WACrCtvB,KAAKuvB,OAAS,KACTvvB,KAAKqI,SACNrI,KAAK8J,YAAc,IAAI+kB,EAAgB3kB,eAE3ClK,KAAKmvB,QAAU,IAAInrB,EAAUgB,OACjC,EAEA+pB,EAAiBjrB,UAAU0rB,UAAY,SAAUC,EAAQC,EAAUC,GAC/D,IAAI1O,EAAOjhB;AACX,OAAO,IAAIuG,EAAaU,YAAW,SAAUL,GACzC,IAAIjE,EAAS0M,EAAWO,SAAS6f,EAApBpgB;AACT1M,IAAW2M,EAAcO,YACzBjJ,EAASpH,MAAM8P,EAAcO,YAAYC,GAGzCmR,EAAKje,KAAKL;AAEd,IAAI6C,EAAeyb,EAAKjZ,WAAU,SAAUyB,GACxC,IAAI9G,EAAS0M,EAAWO,SAAS+f,EAApBtgB,CAAmC5F;AAC5C9G,IAAW2M,EAAcO,YACzBjJ,EAASpH,MAAM8P,EAAcO,YAAYC,GAEpCnN,GACLiE,EAAS5D,KAAKyG,EAEtB,IAAG,SAAUjC,GAAO,OAAOZ,EAASpH,MAAMgI,EAAM,IAAG,WAAc,OAAOZ,EAAS9B,UAAY;AAC7F,OAAO,WACH,IAAInC,EAAS0M,EAAWO,SAAS8f,EAApBrgB;AACT1M,IAAW2M,EAAcO,YACzBjJ,EAASpH,MAAM8P,EAAcO,YAAYC,GAGzCmR,EAAKje,KAAKL,GAEd6C,EAAaW,aACjB,CACJ,GACJ,EACA4oB,EAAiBjrB,UAAU8rB,eAAiB,WACxC,IAAI5mB,EAAQhJ,KACRivB,EAAgBjvB,KAAKivB,cACrBroB,EAAW5G,KAAKmvB,QAChBI,EAAS;AACb,IACIA,EAASvvB,KAAK6vB,SACV,IAAIZ,EAAcjvB,KAAK4qB,IAAK5qB,KAAK6vB,UACjC,IAAIZ,EAAcjvB,KAAK4qB,KAC3B5qB,KAAKuvB,OAASA,EACVvvB,KAAK8vB,aACL9vB,KAAKuvB,OAAOO,WAAa9vB,KAAK8vB,WAMtC,CAHA,MAAOhgB,GAEH,YADAlJ,EAASpH,MAAMsQ,EAEnB,CACA,IAAItK,EAAe,IAAIvB,EAAeW,cAAa,WAC/CoE,EAAMumB,OAAS,KACXA,GAAgC,IAAtBA,EAAOpB,YACjBoB,EAAOQ,OAEf;AACAR,EAAOS,OAAS,SAAUlgB,GACtB,IAAImgB,EAAejnB,EAAMinB;AACrBA,GACAA,EAAajtB,KAAK8M;AAEtB,IAAI3E,EAAQnC,EAAMc;AAClBd,EAAMc,YAAcyD,EAAajH,WAAWvC,QAAO,SAAU0F,GAAK,OAA6B,IAAtB8lB,EAAOpB,YAAoBoB,EAAO5C,KAAKljB,EAAI,IAAG,SAAUqG,GAC7H,IAAIogB,EAAkBlnB,EAAMknB;AACxBA,GACAA,EAAgBltB,UAAKyE,GAErBqI,GAAKA,EAAEqgB,KACPZ,EAAOQ,MAAMjgB,EAAEqgB,KAAMrgB,EAAEsgB,QAGvBxpB,EAASpH,MAAM,IAAIH,UAAU,sIAGjC2J,EAAMsmB,aACV,IAAG,WACC,IAAIY,EAAkBlnB,EAAMknB;AACxBA,GACAA,EAAgBltB,UAAKyE,GAEzB8nB,EAAOQ,QACP/mB,EAAMsmB,aACV,IACInkB,GAASA,aAAiB0jB,EAAgB3kB,eAC1C1E,EAAaiD,IAAI0C,EAAMnD,UAAUgB,EAAMc,aAE/C,EACAylB,EAAOtB,QAAU,SAAUne,GACvB9G,EAAMsmB,cACN1oB,EAASpH,MAAMsQ,EACnB,EACAyf,EAAOc,QAAU,SAAUvgB,GACvB9G,EAAMsmB;AACN,IAAIgB,EAAgBtnB,EAAMsnB;AACtBA,GACAA,EAActtB,KAAK8M,GAEnBA,EAAEygB,SACF3pB,EAAS9B,WAGT8B,EAASpH,MAAMsQ,EAEvB,EACAyf,EAAOiB,UAAY,SAAU1gB,GACzB,IAAInN,EAAS0M,EAAWO,SAAS5G,EAAMua,eAA1BlU,CAA0CS;AACnDnN,IAAW2M,EAAcO,YACzBjJ,EAASpH,MAAM8P,EAAcO,YAAYC,GAGzClJ,EAAS5D,KAAKL,EAEtB,CACJ,EACqCosB,EAAiBjrB,UAAUU,WAAa,SAAUC,GACnF,IAAIuE,EAAQhJ,KACRqI,EAASrI,KAAKqI;AAClB,GAAIA,EACA,OAAOA,EAAOL,UAAUvD;AAEvBzE,KAAKuvB,QACNvvB,KAAK4vB;AAET,IAAIpqB,EAAe,IAAIvB,EAAeW;AAWtC,OAVAY,EAAaiD,IAAIzI,KAAKmvB,QAAQnnB,UAAUvD,IACxCe,EAAaiD,KAAI,WACb,IAAI8mB,EAASvmB,EAAMumB;AACoB,IAAnCvmB,EAAMmmB,QAAQpkB,UAAU3H,SACpBmsB,GAAgC,IAAtBA,EAAOpB,YACjBoB,EAAOQ,QAEX/mB,EAAMsmB,cAEd,IACO9pB,CACX,EACAupB,EAAiBjrB,UAAUqC,YAAc,WACrC,IAAekC,EAANrI,KAAkBqI,OAAQknB,EAA1BvvB,KAAsCuvB;AAC3CA,GAAgC,IAAtBA,EAAOpB,aACjBoB,EAAOQ,QACP/vB,KAAKsvB,eAETnrB,EAAOL,UAAUqC,YAAYpB,KAAK/E,MAC7BqI,IACDrI,KAAK8J,YAAc,IAAI+kB,EAAgB3kB,cAE/C,EACO6kB,CACX,CAnOuB,CAmOrB/qB,EAAU0H;AACZlL,EAAQuuB,iBAAmBA,C;ACvP3B,IAAI3iB,EAAmB,EAAQ;AAC/B5L,EAAQ4Q,KAAOhF,EAAiB0e,eAAe/mB,M;ACD/C,IAAI0sB,EAAqB,EAAQ;AACjCjwB,EAAQ8Q,UAAYmf,EAAmB1B,iBAAiBhrB,M;ACDxD,IAAI6b,EAAoB,EAAQ;AAChCpf,EAAQ4G,MAAQwY,EAAkBG,gBAAgBhc,M;ACDlD,IAAI2sB,EAAuB,EAAQ;AACnClwB,EAAQiR,SAAWif,EAAqBrN,mBAAmBtf,M;ACD3D,IAAI4sB,EAAmB,EAAQ;AAC/BnwB,EAAQmR,KAAOgf,EAAiB3K,eAAejiB,M;ACD/C,IAAI6sB,EAAwB,EAAQ;AACpCpwB,EAAQqR,UAAY+e,EAAsB5M,oBAAoBjgB,M;ACD9D,IAAI8sB,EAA+B,EAAQ;AAC3CrwB,EAAQuR,iBAAmB8e,EAA6B1L,2BAA2BphB,M;ACDnF,IAAI6hB,EAAsB,EAAQ;AAClCplB,EAAQyR,YAAc2T,EAAoBO,kBAAkBpiB,M;ACD5D,IAAI+sB,EAAuB,EAAQ;AACnCtwB,EAAQ2R,SAAW2e,EAAqBvK,mBAAmBxiB,M;ACD3D,IAAIgtB,EAAiB,EAAQ;AAC7BvwB,EAAQ8R,IAAMye,EAAehK,aAAahjB,M;ACD1C,IAAIitB,EAAuB,EAAQ;AACnCxwB,EAAQgS,SAAWwe,EAAqB3J,mBAAmBtjB,M;ACD3D,IAAIwC,EAAe,EAAQ,OACvBuf,EAAoB,EAAQ,MAC5B5F,EAAgB,EAAQ,OACxBjH,EAAa,EAAQ;AAoFzBzY,EAAQkS,MAtBR,WAEI,IADA,IAAI0X,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,IAAI2nB,EAAaxuB,OAAO6H,kBACpBD,EAAY,KACZiO,EAAO8R,EAAYA,EAAYhnB,OAAS;AAU5C,OATI8c,EAAcG,YAAY/H,IAC1BjO,EAAY+f,EAAY9J,MACpB8J,EAAYhnB,OAAS,GAAoD,iBAAxCgnB,EAAYA,EAAYhnB,OAAS,KAClE6tB,EAAa7G,EAAY9J,QAGR,iBAAThI,IACZ2Y,EAAa7G,EAAY9J,OAEX,OAAdjW,GAA6C,IAAvB+f,EAAYhnB,QAAgBgnB,EAAY,aAAc7jB,EAAaU,WAClFmjB,EAAY,GAEhBnR,EAAWC,SAAS+X,EAApBhY,CAAgC,IAAI6M,EAAkB3F,gBAAgBiK,EAAa/f,GAC9F,C;ACtFA,IAAI6mB,EAAoB,EAAQ;AAChC1wB,EAAQoS,MAAQse,EAAkBvI,gBAAgB5kB,M;ACDlD,IAAI+hB,EAAoB,EAAQ;AAChCtlB,EAAQ0G,GAAK4e,EAAkB3F,gBAAgBjZ,E;ACD/C,IAAI4L,EAAsB,EAAQ;AAClCtS,EAAQuS,kBAAoBD,EAAoBqe,uB;ACDhD,IAAIC,EAAoB,EAAQ;AAChC5wB,EAAQyS,MAAQme,EAAkBrI,gBAAgBhlB,M;ACDlD,IAAIP,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIsL,EAAY,EAAQ,OACpB2W,EAAoB,EAAQ,MAC5BlD,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAkBlCniB,EAAQ2S,KAjBR,WAEI,IADA,IAAIiX,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAIpC,GAA2B,IAAvB8gB,EAAYhnB,OAAc,CAC1B,IAAI+L,EAAU/P,QAAQgrB,EAAY,IAI9B,OAAOA,EAAY;AAHnBA,EAAcA,EAAY,EAKlC,CACA,OAAO,IAAItE,EAAkB3F,gBAAgBiK,GAAaliB,KAAK,IAAImpB,EACvE;AAEA,IAAIA,EAAgB,WAChB,SAASA,IACT,CAIA,OAHAA,EAAavtB,UAAUiB,KAAO,SAAUN,EAAY4D,GAChD,OAAOA,EAAOL,UAAU,IAAIspB,EAAe7sB,GAC/C,EACO4sB,CACX,CAPmB;AAQnB7wB,EAAQ6wB,aAAeA;AAMvB,IAAIC,EAAkB,SAAUntB,GAE5B,SAASmtB,EAAexnB,GACpB3F,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKuxB,UAAW,EAChBvxB,KAAKoqB,YAAc,GACnBpqB,KAAKsQ,cAAgB,EACzB,CAoCA,OA1CA9M,EAAU8tB,EAAgBntB,GAO1BmtB,EAAextB,UAAUiC,MAAQ,SAAUqC,GACvCpI,KAAKoqB,YAAY9mB,KAAK8E,EAC1B,EACAkpB,EAAextB,UAAUsC,UAAY,WACjC,IAAIgkB,EAAcpqB,KAAKoqB,YACnBlf,EAAMkf,EAAYhnB;AACtB,GAAY,IAAR8H,EACAlL,KAAK8J,YAAYhF;IAEhB,CACD,IAAK,IAAIvB,EAAI,EAAGA,EAAI2H,IAAQlL,KAAKuxB,SAAUhuB,IAAK,CAC5C,IAAI6E,EAAagiB,EAAY7mB,GACzBiC,EAAemd,EAAoBQ,kBAAkBnjB,KAAMoI,EAAYA,EAAY7E;AACnFvD,KAAKsQ,eACLtQ,KAAKsQ,cAAchN,KAAKkC,GAE5BxF,KAAKyI,IAAIjD,EACb,CACAxF,KAAKoqB,YAAc,IACvB,CACJ,EACAkH,EAAextB,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC5F,IAAK7J,KAAKuxB,SAAU,CAChBvxB,KAAKuxB,UAAW;AAChB,IAAK,IAAIhuB,EAAI,EAAGA,EAAIvD,KAAKsQ,cAAclN,OAAQG,IAC3C,GAAIA,IAAMuC,EAAY,CAClB,IAAIN,EAAexF,KAAKsQ,cAAc/M;AACtCiC,EAAaW,cACbnG,KAAK2P,OAAOnK,EAChB,CAEJxF,KAAKsQ,cAAgB,IACzB,CACAtQ,KAAK8J,YAAY9G,KAAK2G,EAC1B,EACO2nB,CACX,CA5CqB,CA4CnB1O,EAAkBlZ;AACpBlJ,EAAQ8wB,eAAiBA,C;ACtFzB,IAAIE,EAAoB,EAAQ;AAChChxB,EAAQ6S,MAAQme,EAAkBrI,gBAAgBplB,M;ACDlD,IAAI0tB,EAAoB,EAAQ;AAChCjxB,EAAQ+S,OAASke,EAAkBrO,gBAAgBrf,M;ACDnD,IAAI2tB,EAAoB,EAAQ;AAChClxB,EAAQiT,MAAQie,EAAkBjI,gBAAgB1lB,M;ACDlD,IAAI4tB,EAAoB,EAAQ;AAChCnxB,EAAQmT,MAAQge,EAAkB9H,gBAAgB9lB,M;ACDlD,IAAI6P,EAAQ,EAAQ;AACpBpT,EAAQqT,IAAMD,EAAMge,S;ACDpB,IAAI9d,EAAU,EAAQ;AA4CtBtT,EAAQuT,MAHR,SAAe8d,GACX,OAAO/d,EAAQC,MAAM8d,EAAd/d,CAAgC9T,KAC3C,C;AC3CA,IAAIyM,EAAU,EAAQ,OAClBuH,EAAc,EAAQ;AA+C1BxT,EAAQyT,UAJR,SAAmB6d,EAAUznB,GAEzB,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzCgS,EAAYC,UAAU6d,EAAUznB,EAAhC2J,CAA2ChU,KACtD,C;AC/CA,IAAIkU,EAAW,EAAQ;AAoCvB1T,EAAQ2T,OAHR,SAAgB4d,GACZ,OAAO7d,EAASC,OAAO4d,EAAhB7d,CAAiClU,KAC5C,C;ACnCA,IAAIoU,EAAgB,EAAQ;AA8C5B5T,EAAQ6T,YAJR,SAAqBlK,EAAY6nB,GAE7B,YADyB,IAArBA,IAA+BA,EAAmB,MAC/C5d,EAAcC,YAAYlK,EAAY6nB,EAAtC5d,CAAwDpU,KACnE,C;AC7CA,IAAIyM,EAAU,EAAQ,OAClByT,EAAgB,EAAQ,OACxB5L,EAAe,EAAQ;AA8D3B9T,EAAQ+T,WAjBR,SAAoB0d,GAChB,IAAI7uB,EAASiB,UAAUjB,OACnBiH,EAAYoC,EAAQzK;AACpBke,EAAcG,YAAYhc,UAAUA,UAAUjB,OAAS,MACvDiH,EAAYhG,UAAUA,UAAUjB,OAAS,GACzCA;AAEJ,IAAI8uB,EAAyB;AACzB9uB,GAAU,IACV8uB,EAAyB7tB,UAAU;AAEvC,IAAI8tB,EAAgB1vB,OAAO6H;AAI3B,OAHIlH,GAAU,IACV+uB,EAAgB9tB,UAAU,IAEvBiQ,EAAaC,WAAW0d,EAAgBC,EAAwBC,EAAe9nB,EAA/EiK,CAA0FtU,KACrG,C;AC/DA,IAAIwU,EAAiB,EAAQ;AA0C7BhU,EAAQiU,aAHR,SAAsB2d,EAAUC,GAC5B,OAAO7d,EAAeC,aAAa2d,EAAUC,EAAtC7d,CAAuDxU,KAClE,C;ACzCA,IAAI0U,EAAe,EAAQ;AAqC3BlU,EAAQmU,WAHR,SAAoB0d,GAChB,OAAO3d,EAAaC,WAAW0d,EAAxB3d,CAAyC1U,KACpD,C;ACpCA,IAAIsyB,EAAe,EAAQ;AA+D3B9xB,EAAQsU,OAHR,SAAgB4L,GACZ,OAAO4R,EAAaC,WAAW7R,EAAxB4R,CAAkCtyB,KAC7C,C;AC9DA,IAAI+U,EAAe,EAAQ;AA4C3BvU,EAAQwU,WAHR,SAAoBqV,GAChB,OAAOtV,EAAaC,WAAWqV,EAAxBtV,CAAiC/U,KAC5C,C;AC3CA,IAAI8Q,EAAkB,EAAQ;AAoD9BtQ,EAAQuQ,cAPR,WAEI,IADA,IAAIqZ,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAOwH,EAAgBC,cAAc3M,WAAM,EAAQgmB,EAA5CtZ,CAAyD9Q,KACpE,C;ACnDA,IAAIgR,EAAW,EAAQ,OACnBwhB,EAAW,EAAQ;AACvBhyB,EAAQiyB,aAAeD,EAAStiB,OA0DhC1P,EAAQ0P,OAPR,WAEI,IADA,IAAIka,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAO0H,EAASd,OAAO9L,WAAM,EAAQgmB,EAA9BpZ,CAA2ChR,KACtD,C;AC3DA,IAAIiV,EAAc,EAAQ;AAqD1BzU,EAAQ0U,UAHR,WACI,OAAOD,EAAYC,WAAZD,CAAwBjV,KACnC,C;ACpDA,IAAImV,EAAc,EAAQ;AAgE1B3U,EAAQ4U,UAHR,SAAmBiV,EAAS9G,GACxB,OAAOpO,EAAYC,UAAUiV,EAAS9G,EAA/BpO,CAA+CnV,KAC1D,C;AC/DA,IAAIqV,EAAgB,EAAQ;AA6D5B7U,EAAQ8U,YAHR,SAAqBod,EAAiBnP,GAClC,OAAOlO,EAAcC,YAAYod,EAAiBnP,EAA3ClO,CAA2DrV,KACtE,C;AC5DA,IAAIuV,EAAU,EAAQ;AAoDtB/U,EAAQmB,MAHR,SAAegxB,GACX,OAAOpd,EAAQ5T,MAAMgxB,EAAdpd,CAAyBvV,KACpC,C;ACnDA,IAAIwV,EAAa,EAAQ;AA8CzBhV,EAAQiV,SAHR,SAAkBoc,GACd,OAAOrc,EAAWC,SAASoc,EAApBrc,CAAsCxV,KACjD,C;AC7CA,IAAIyM,EAAU,EAAQ,OAClBiJ,EAAiB,EAAQ;AAmD7BlV,EAAQmV,aAJR,SAAsB+T,EAASrf,GAE3B,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzC0T,EAAeC,aAAa+T,EAASrf,EAArCqL,CAAgD1V,KAC3D,C;ACnDA,IAAI4V,EAAmB,EAAQ;AAoC/BpV,EAAQqV,eAJR,SAAwB+c,GAEpB,YADqB,IAAjBA,IAA2BA,EAAe,MACvChd,EAAiBC,eAAe+c,EAAhChd,CAA8C5V,KACzD,C;ACnCA,IAAIyM,EAAU,EAAQ,OAClBqJ,EAAU,EAAQ;AA4CtBtV,EAAQ4M,MAJR,SAAeA,EAAO/C,GAElB,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzC8T,EAAQ1I,MAAMA,EAAO/C,EAArByL,CAAgC9V,KAC3C,C;AC5CA,IAAI+V,EAAc,EAAQ;AAiD1BvV,EAAQwV,UAHR,SAAmB6c,EAAuBC,GACtC,OAAO/c,EAAYC,UAAU6c,EAAuBC,EAA7C/c,CAAgE/V,KAC3E,C;AChDA,IAAIiW,EAAkB,EAAQ;AA4C9BzV,EAAQ0V,cAHR,WACI,OAAOD,EAAgBC,eAAhBD,CAAgCjW,KAC3C,C;AC3CA,IAAImW,EAAa,EAAQ;AAiDzB3V,EAAQ4V,SAHR,SAAkB2c,EAAaC,GAC3B,OAAO7c,EAAWC,SAAS2c,EAAaC,EAAjC7c,CAA0CnW,KACrD,C;AChDA,IAAIqW,EAAyB,EAAQ;AA4CrC7V,EAAQ8V,qBAHR,SAA8B2c,EAASF,GACnC,OAAO1c,EAAuBC,qBAAqB2c,EAASF,EAArD1c,CAAkErW,KAC7E,C;AC3CA,IAAIuW,EAA4B,EAAQ;AA8DxC/V,EAAQgW,wBAHR,SAAiCsS,EAAKmK,GAClC,OAAO1c,EAA0BC,wBAAwBsS,EAAKmK,EAAvD1c,CAAgEvW,KAC3E,C;AC7DA,IAAIkzB,EAAQ,EAAQ;AAgDpB1yB,EAAQkW,IAHR,SAAa3P,EAAgBvH,EAAOsF,GAChC,OAAOouB,EAAMC,IAAIpsB,EAAgBvH,EAAOsF,EAAjCouB,CAA2ClzB,KACtD,C;AC/CA,IAAI2W,EAAc,EAAQ;AA8C1BnW,EAAQoW,UAHR,SAAmB1T,EAAO0vB,GACtB,OAAOjc,EAAYC,UAAU1T,EAAO0vB,EAA7Bjc,CAA2C3W,KACtD,C;AC7CA,IAAI6W,EAAU,EAAQ;AAkBtBrW,EAAQsW,MAHR,SAAe6b,EAAWS,GACtB,OAAOvc,EAAQC,MAAM6b,EAAWS,EAAzBvc,CAAkC7W,KAC7C,C;ACjBA,IAAI+W,EAAY,EAAQ;AAuCxBvW,EAAQwW,QAHR,WACI,OAAOD,EAAUC,SAAVD,CAAoB/W,KAC/B,C;ACtCA,IAAIiX,EAAe,EAAQ;AAkD3BzW,EAAQ0W,WAHR,SAAoBmT,EAAS9G,GACzB,OAAOtM,EAAaC,WAAWmT,EAAS9G,EAAjCtM,CAAiDjX,KAC5D,C;ACjDA,IAAImX,EAAW,EAAQ;AAqDvB3W,EAAQ4W,OANR,SAAgBiT,EAAS4G,EAAY5mB,GAIjC,YAHmB,IAAf4mB,IAAyBA,EAAaxuB,OAAO6H,wBAC/B,IAAdD,IAAwBA,OAAY5C,GACxCwpB,GAAcA,GAAc,GAAK,EAAIxuB,OAAO6H,kBAAoB2mB,EACzD9Z,EAASC,OAAOiT,EAAS4G,EAAY5mB,EAArC8M,CAAgDnX,KAC3D,C;ACpDA,IAAIqX,EAAW,EAAQ;AA4CvB7W,EAAQS,OAHR,SAAgB0xB,EAAWS,GACvB,OAAO/b,EAASpW,OAAO0xB,EAAWS,EAA3B/b,CAAoCrX,KAC/C,C;AC3CA,IAAIqzB,EAAa,EAAQ;AAYzB7yB,EAAQgX,SAHR,SAAkB8b,GACd,OAAOD,EAAWE,SAASD,EAApBD,CAA8BrzB,KACzC,C;ACXA,IAAIyX,EAAS,EAAQ;AAsCrBjX,EAAQkX,KAHR,SAAcib,EAAWS,GACrB,OAAO3b,EAAOC,KAAKib,EAAWS,EAAvB3b,CAAgCzX,KAC3C,C;ACrCA,IAAI2X,EAAc,EAAQ;AAsC1BnX,EAAQoX,UAHR,SAAmB+a,EAAWS,GAC1B,OAAOzb,EAAYC,UAAU+a,EAAWS,EAAjCzb,CAA0C3X,KACrD,C;ACrCA,IAAI6X,EAAU,EAAQ;AAqDtBrX,EAAQsX,MAHR,SAAe6a,EAAWpP,EAAgBqP,GACtC,OAAO/a,EAAQC,MAAM6a,EAAWpP,EAAgBqP,EAAzC/a,CAAuD7X,KAClE,C;ACpDA,IAAI+X,EAAY,EAAQ;AACxBvX,EAAQgzB,kBAAoBzb,EAAUyb,kBAwEtChzB,EAAQwX,QAHR,SAAiB+a,EAAaU,EAAiB5B,EAAkB6B,GAC7D,OAAO3b,EAAUC,QAAQ+a,EAAaU,EAAiB5B,EAAkB6B,EAAlE3b,CAAmF/X,KAC9F,C;ACxEA,IAAIiY,EAAmB,EAAQ;AAc/BzX,EAAQ0X,eAHR,WACI,OAAOD,EAAiBC,gBAAjBD,CAAkCjY,KAC7C,C;ACbA,IAAImY,EAAY,EAAQ;AAaxB3X,EAAQ4X,QAHR,WACI,OAAOD,EAAUC,SAAVD,CAAoBnY,KAC/B,C;ACZA,IAAIqY,EAAS,EAAQ;AAsBrB7X,EAAQ8X,KAHR,SAAcqa,EAAWpP,EAAgBqP,GACrC,OAAOva,EAAOC,KAAKqa,EAAWpP,EAAgBqP,EAAvCva,CAAqDrY,KAChE,C;ACZAQ,EAAQiY,SAHR,SAAkBmI,GACd,OAAOA,EAAK5gB,KAChB,C;ACRA,IAAI2Y,EAAQ,EAAQ;AAqCpBnY,EAAQjB,IAHR,SAAa8qB,EAAS+I,GAClB,OAAOza,EAAMpZ,IAAI8qB,EAAS+I,EAAnBza,CAA4B3Y,KACvC,C;ACpCA,IAAI4Y,EAAU,EAAQ;AA8BtBpY,EAAQqY,MAHR,SAAe1Y,GACX,OAAOyY,EAAQC,MAAM1Y,EAAdyY,CAAqB5Y,KAChC,C;AC7BA,IAAI8Y,EAAgB,EAAQ;AAgD5BtY,EAAQuY,YAHR,WACI,OAAOD,EAAcC,aAAdD,CAA4B9Y,KACvC,C;AC/CA,IAAIgZ,EAAQ,EAAQ;AAmCpBxY,EAAQgL,IAHR,SAAamoB,GACT,OAAO3a,EAAMxN,IAAImoB,EAAV3a,CAAoBhZ,KAC/B,C;AClCA,IAAIyS,EAAU,EAAQ,MAClBmhB,EAAU,EAAQ;AACtBpzB,EAAQqzB,YAAcD,EAAQlhB,MAuD9BlS,EAAQkS,MAPR,WAEI,IADA,IAAI0X,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAOmJ,EAAQC,MAAMtO,WAAM,EAAQgmB,EAA5B3X,CAAyCzS,KACpD,C;ACxDA,IAAIiZ,EAAa,EAAQ;AAiDzBzY,EAAQ0Y,SAJR,SAAkB+X,GAEd,YADmB,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBAC1C2O,EAAWC,SAAS+X,EAApBhY,CAAgCjZ,KAC3C,C;AChDA,IAAImZ,EAAa,EAAQ;AAgEzB3Y,EAAQ4Y,SAJR,SAAkBiR,EAAS9G,EAAgB0N,GAEvC,YADmB,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBAC1C6O,EAAWC,SAASiR,EAAS9G,EAAgB0N,EAA7C9X,CAAyDnZ,KACpE,C;AC/DA,IAAIsZ,EAAe,EAAQ;AAiD3B9Y,EAAQgZ,WAJR,SAAoBkZ,EAAiBnP,EAAgB0N,GAEjD,YADmB,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBAC1CgP,EAAaE,WAAWkZ,EAAiBnP,EAAgB0N,EAAzD3X,CAAqEtZ,KAChF,C;AChDA,IAAIyZ,EAAc,EAAQ;AAoC1BjZ,EAAQkZ,UAJR,SAAmBoa,EAAaC,EAAM9C,GAElC,YADmB,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBAC1CmP,EAAYC,UAAUoa,EAAaC,EAAM9C,EAAzCxX,CAAqDzZ,KAChE,C;ACnCA,IAAI2Z,EAAQ,EAAQ;AAmCpBnZ,EAAQoZ,IAHR,SAAa+Z,GACT,OAAOha,EAAMC,IAAI+Z,EAAVha,CAAoB3Z,KAC/B,C;AClCA,IAAI6Z,EAAc,EAAQ;AAmG1BrZ,EAAQsZ,UAHR,SAAmBka,EAAyBtT,GACxC,OAAO7G,EAAYC,UAAUka,EAAyBtT,EAA/C7G,CAAyD7Z,KACpE,C;AClGA,IAAIgK,EAAc,EAAQ;AAmD1BxJ,EAAQuZ,UAJR,SAAmB1P,EAAW+C,GAE1B,YADc,IAAVA,IAAoBA,EAAQ,GACzBpD,EAAY+P,UAAU1P,EAAW+C,EAAjCpD,CAAwChK,KACnD,C;AClDA,IAAI8S,EAAsB,EAAQ;AAsElCtS,EAAQuS,kBAPR,WAEI,IADA,IAAIkhB,EAAc,GACT3qB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC2qB,EAAY3qB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAOwJ,EAAoBC,kBAAkB3O,WAAM,EAAQ6vB,EAApDnhB,CAAiE9S,KAC5E,C;ACrEA,IAAIga,EAAa,EAAQ;AAuCzBxZ,EAAQyZ,SAHR,WACI,OAAOD,EAAWC,UAAXD,CAAsBha,KACjC,C;ACtCA,IAAIka,EAAc,EAAQ;AA6C1B1Z,EAAQ2Z,UAHR,SAAmBwY,EAAWS,GAC1B,OAAOlZ,EAAYC,UAAUwY,EAAWS,EAAjClZ,CAA0Cla,KACrD,C;AC5CA,IAAIoa,EAAU,EAAQ;AAkCtB5Z,EAAQ6Z,MAPR,WAEI,IADA,IAAI6Z,EAAa,GACR5qB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC4qB,EAAW5qB,EAAK,GAAKjF,UAAUiF;AAEnC,OAAO8Q,EAAQC,MAAMjW,WAAM,EAAQ8vB,EAA5B9Z,CAAwCpa,KACnD,C;ACjCA,IAAIsa,EAAY,EAAQ;AAkBxB9Z,EAAQ+Z,QAHR,SAAiBmG,GACb,OAAOpG,EAAUC,QAAQmG,EAAlBpG,CAA4Bta,KACvC,C;ACjBA,IAAIwa,EAAoB,EAAQ;AAUhCha,EAAQia,gBAHR,SAAyBta,GACrB,OAAOqa,EAAkBC,gBAAgBta,EAAlCqa,CAAyCxa,KACpD,C;ACTA,IAAI0a,EAAgB,EAAQ;AAU5Bla,EAAQma,YAJR,WAEI,OAAOD,EAAcC,aAAdD,CAA4B1a,KACvC,C;ACTA,IAAI4a,EAAkB,EAAQ;AAc9Bpa,EAAQqa,cAHR,SAAuB1Q,EAAYC,EAAY+pB,EAAqB9pB,GAChE,OAAOuQ,EAAgBC,cAAc1Q,EAAYC,EAAY+pB,EAAqB9pB,EAA3EuQ,CAAsF5a,KACjG,C;ACbA,IAAIkT,EAAS,EAAQ,OAEjBkhB,EAAS,EAAQ;AACrB5zB,EAAQ6zB,WAAaD,EAAOjhB,KAiB5B3S,EAAQ2S,KAPR,WAEI,IADA,IAAIiX,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAO4J,EAAOC,KAAK/O,WAAM,EAAQgmB,EAA1BlX,CAAuClT,KAClD,C;ACnBA,IAAI8a,EAAW,EAAQ;AAyDvBta,EAAQgQ,OAXR,SAAgBsjB,EAAaC,GAMzB,OAAI1vB,UAAUjB,QAAU,EACb0X,EAAStK,OAAOsjB,EAAaC,EAA7BjZ,CAAmC9a,MAEvC8a,EAAStK,OAAOsjB,EAAhBhZ,CAA6B9a,KACxC,C;ACxDA,IAAI+a,EAAW,EAAQ;AAiBvBva,EAAQuB,OAJR,SAAgBJ,GAEZ,YADc,IAAVA,IAAoBA,GAAS,GAC1BoZ,EAAShZ,OAAOJ,EAAhBoZ,CAAuB/a,KAClC,C;AChBA,IAAIgb,EAAe,EAAQ;AAkB3Bxa,EAAQya,WAHR,SAAoBqZ,GAChB,OAAOtZ,EAAaC,WAAWqZ,EAAxBtZ,CAAkChb,KAC7C,C;ACjBA,IAAIkb,EAAU,EAAQ;AAqBtB1a,EAAQ2a,MAJR,SAAexZ,GAEX,YADc,IAAVA,IAAoBA,GAAS,GAC1BuZ,EAAQC,MAAMxZ,EAAduZ,CAAqBlb,KAChC,C;ACpBA,IAAIob,EAAc,EAAQ;AAkB1B5a,EAAQ6a,UAHR,SAAmBiZ,GACf,OAAOlZ,EAAYC,UAAUiZ,EAAtBlZ,CAAgCpb,KAC3C,C;ACjBA,IAAIsb,EAAW,EAAQ;AAsCvB9a,EAAQ+a,OAHR,SAAgB+Y,GACZ,OAAOhZ,EAASC,OAAO+Y,EAAhBhZ,CAA0Btb,KACrC,C;ACrCA,IAAIyM,EAAU,EAAQ,OAClB+O,EAAe,EAAQ;AAyC3Bhb,EAAQib,WAJR,SAAoB6L,EAAQjd,GAExB,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzCwZ,EAAaC,WAAW6L,EAAQjd,EAAhCmR,CAA2Cxb,KACtD,C;ACzCA,IAAI0b,EAAS,EAAQ;AA6CrBlb,EAAQmb,KANR,SAAcmY,EAAaC,GACvB,OAAI1vB,UAAUjB,QAAU,EACbsY,EAAOC,KAAKmY,EAAaC,EAAzBrY,CAA+B1b,MAEnC0b,EAAOC,KAAKmY,EAAZpY,CAAyB1b,KACpC,C;AC5CA,IAAI4b,EAAkB,EAAQ;AAwD9Bpb,EAAQqb,cAHR,SAAuB0Y,EAAWC,GAC9B,OAAO5Y,EAAgBC,cAAc0Y,EAAWC,EAAzC5Y,CAAmD5b,KAC9D,C;ACvDA,IAAI8b,EAAU,EAAQ;AAoBtBtb,EAAQub,MAHR,WACI,OAAOD,EAAQC,OAARD,CAAgB9b,KAC3B,C;ACnBA,IAAIgc,EAAgB,EAAQ;AAQ5Bxb,EAAQyb,YAHR,SAAqB9R,EAAYC,EAAYC,GACzC,OAAO2R,EAAcC,YAAY9R,EAAYC,EAAYC,EAAlD2R,CAA6Dhc,KACxE,C;ACPA,IAAIkc,EAAW,EAAQ;AAoBvB1b,EAAQ2b,OAHR,SAAgBwW,GACZ,OAAOzW,EAASC,OAAOwW,EAAhBzW,CAA2Blc,KACtC,C;ACnBA,IAAIoc,EAAS,EAAQ;AAerB5b,EAAQ6b,KAHR,SAAc1a,GACV,OAAOya,EAAOC,KAAK1a,EAAZya,CAAmBpc,KAC9B,C;ACdA,IAAIsc,EAAa,EAAQ;AAoCzB9b,EAAQ+b,SAHR,SAAkB5a,GACd,OAAO2a,EAAWC,SAAS5a,EAApB2a,CAA2Btc,KACtC,C;ACnCA,IAAIwc,EAAc,EAAQ;AAgB1Bhc,EAAQic,UAHR,SAAmB6X,GACf,OAAO9X,EAAYC,UAAU6X,EAAtB9X,CAAgCxc,KAC3C,C;ACfA,IAAI0c,EAAc,EAAQ;AAgB1Blc,EAAQmc,UAHR,SAAmBgW,GACf,OAAOjW,EAAYC,UAAUgW,EAAtBjW,CAAiC1c,KAC5C,C;ACfA,IAAI4c,EAAc,EAAQ;AAuB1Bpc,EAAQqc,UAPR,WAEI,IADA,IAAIuD,EAAQ,GACH9W,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8W,EAAM9W,EAAK,GAAKjF,UAAUiF;AAE9B,OAAOsT,EAAYC,UAAUzY,WAAM,EAAQgc,EAApCxD,CAA2C5c,KACtD,C;ACtBA,IAAI8c,EAAgB,EAAQ;AAgB5Btc,EAAQuc,YAJR,SAAqB1S,EAAW+C,GAE5B,YADc,IAAVA,IAAoBA,EAAQ,GACzB0P,EAAcC,YAAY1S,EAAW+C,EAArC0P,CAA4C9c,KACvD,C;ACfA,IAAIy0B,EAAc,EAAQ;AA8C1Bj0B,EAAQ0c,QAHR,WACI,OAAOuX,EAAYC,WAAZD,CAAwBz0B,KACnC,C;AC7CA,IAAImd,EAAc,EAAQ;AAoD1B3c,EAAQ4c,UAHR,SAAmBiN,EAAS9G,GACxB,OAAOpG,EAAYC,UAAUiN,EAAS9G,EAA/BpG,CAA+Cnd,KAC1D,C;ACnDA,IAAIqd,EAAgB,EAAQ;AA+C5B7c,EAAQ8c,YAHR,SAAqBoV,EAAiBnP,GAClC,OAAOlG,EAAcC,YAAYoV,EAAiBnP,EAA3ClG,CAA2Drd,KACtE,C;AC9CA,IAAIud,EAAS,EAAQ;AAqCrB/c,EAAQgd,KAHR,SAAc7b,GACV,OAAO4b,EAAOC,KAAK7b,EAAZ4b,CAAmBvd,KAC9B,C;ACpCA,IAAIyd,EAAa,EAAQ;AAwCzBjd,EAAQkd,SAHR,SAAkB/b,GACd,OAAO8b,EAAWC,SAAS/b,EAApB8b,CAA2Bzd,KACtC,C;ACvCA,IAAI2d,EAAc,EAAQ;AAqC1Bnd,EAAQod,UAHR,SAAmB0W,GACf,OAAO3W,EAAYC,UAAU0W,EAAtB3W,CAAgC3d,KAC3C,C;ACpCA,IAAI6d,EAAc,EAAQ;AAwC1Brd,EAAQsd,UAHR,SAAmB6U,GACf,OAAO9U,EAAYC,UAAU6U,EAAtB9U,CAAiC7d,KAC5C,C;ACvCA,IAAI+d,EAAa,EAAQ;AA6CzBvd,EAAQwd,SAJR,SAAkB6T,EAAkB1oB,GAEhC,YADe,IAAXA,IAAqBA,EAAS4U,EAAW4W,uBACtC5W,EAAWC,SAAS6T,EAAkB1oB,EAAtC4U,CAA8C/d,KACzD,C;AC5CA,IAAIyM,EAAU,EAAQ,OAClBsR,EAAa,EAAQ,OACrBE,EAAiB,EAAQ;AA6C7Bzd,EAAQ0d,aALR,SAAsB4T,EAAUznB,EAAWlB,GAGvC,YAFkB,IAAdkB,IAAwBA,EAAYoC,EAAQzK,YACjC,IAAXmH,IAAqBA,EAAS4U,EAAW4W,uBACtC1W,EAAeC,aAAa4T,EAAUznB,EAAWlB,EAAjD8U,CAAyDje,KACpE,C;AC9CA,IAAIyM,EAAU,EAAQ,OAClB0R,EAAiB,EAAQ;AAC7B3d,EAAQwL,aAAemS,EAAenS,aAWtCxL,EAAQ4d,aAJR,SAAsB/T,GAElB,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzCmc,EAAeC,aAAa/T,EAA5B8T,CAAuCne,KAClD,C;ACZA,IAAIyM,EAAU,EAAQ,OAClB4R,EAAY,EAAQ;AAsExB7d,EAAQ8d,QAJR,SAAiBsW,EAAKvqB,GAElB,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzCqc,EAAUC,QAAQsW,EAAKvqB,EAAvBgU,CAAkCre,KAC7C,C;ACtEA,IAAIyM,EAAU,EAAQ,OAClB8R,EAAgB,EAAQ;AAqD5B/d,EAAQge,YAJR,SAAqBoW,EAAKC,EAAgBxqB,GAEtC,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzCuc,EAAcC,YAAYoW,EAAKC,EAAgBxqB,EAA/CkU,CAA0Dve,KACrE,C;ACrDA,IAAIyM,EAAU,EAAQ,OAClBgS,EAAc,EAAQ;AAW1Bje,EAAQke,UAJR,SAAmBrU,GAEf,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzCyc,EAAYC,UAAUrU,EAAtBoU,CAAiCze,KAC5C,C;ACXA,IAAI2e,EAAY,EAAQ;AA2BxBne,EAAQoe,QAHR,WACI,OAAOD,EAAUC,SAAVD,CAAoB3e,KAC/B,C;AC1BA,IAAI6e,EAAW,EAAQ;AAwCvBre,EAAQse,OAHR,SAAgBgW,GACZ,OAAOjW,EAASC,OAAOgW,EAAhBjW,CAAkC7e,KAC7C,C;ACvCA,IAAI+e,EAAgB,EAAQ;AAqD5Bve,EAAQwe,YAJR,SAAqB+V,EAAYC,GAE7B,YADyB,IAArBA,IAA+BA,EAAmB,GAC/CjW,EAAcC,YAAY+V,EAAYC,EAAtCjW,CAAwD/e,KACnE,C;ACpDA,IAAIyM,EAAU,EAAQ,OAClB2a,EAAc,EAAQ,OACtBlH,EAAgB,EAAQ,OACxBjB,EAAe,EAAQ;AAsB3Bze,EAAQ4J,WArBR,SAAoB6qB,GAChB,IAAI5qB,EAAYoC,EAAQzK,MACpBkzB,EAAyB,KACzBC,EAAgB1yB,OAAO6H;AAgB3B,OAfI4V,EAAcG,YAAYhc,UAAU,MACpCgG,EAAYhG,UAAU,IAEtB6b,EAAcG,YAAYhc,UAAU,IACpCgG,EAAYhG,UAAU,GAEjB+iB,EAAYG,UAAUljB,UAAU,MACrC8wB,EAAgB9wB,UAAU,IAE1B6b,EAAcG,YAAYhc,UAAU,IACpCgG,EAAYhG,UAAU,GAEjB+iB,EAAYG,UAAUljB,UAAU,MACrC6wB,EAAyB7wB,UAAU,IAEhC4a,EAAa7U,WAAW6qB,EAAgBC,EAAwBC,EAAe9qB,EAA/E4U,CAA0Fjf,KACrG,C;ACxBA,IAAIkf,EAAiB,EAAQ;AA6C7B1e,EAAQ2e,aAHR,SAAsBiT,EAAUC,GAC5B,OAAOnT,EAAeC,aAAaiT,EAAUC,EAAtCnT,CAAuDlf,KAClE,C;AC5CA,IAAIof,EAAe,EAAQ;AA0C3B5e,EAAQ6e,WAHR,SAAoBgT,GAChB,OAAOjT,EAAaC,WAAWgT,EAAxBjT,CAAyCpf,KACpD,C;ACzCA,IAAIsf,EAAmB,EAAQ;AA+C/B9e,EAAQ+e,eAPR,WAEI,IADA,IAAIoB,EAAO,GACFrX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCqX,EAAKrX,EAAK,GAAKjF,UAAUiF;AAE7B,OAAOgW,EAAiBC,eAAenb,WAAM,EAAQuc,EAA9CrB,CAAoDtf,KAC/D,C;AC9CA,IAAI4T,EAAQ,EAAQ;AAepBpT,EAAQgf,SAPR,WAEI,IADA,IAAI4K,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAOsK,EAAMC,IAAIzP,WAAM,EAAQgmB,EAAxBxW,CAAqC5T,KAChD,C;ACdA,IAAIyf,EAAW,EAAQ;AAUvBjf,EAAQkf,OAHR,SAAgB2K,GACZ,OAAO5K,EAASC,OAAO2K,EAAhB5K,CAAyBzf,KACpC,C;ACTA,IAAI8T,EAAU,EAAQ;AACtBtT,EAAQuT,MAAQD,EAAQC;AACxB,IAAIC,EAAc,EAAQ;AAC1BxT,EAAQyT,UAAYD,EAAYC;AAChC,IAAIC,EAAW,EAAQ;AACvB1T,EAAQ2T,OAASD,EAASC;AAC1B,IAAIC,EAAgB,EAAQ;AAC5B5T,EAAQ6T,YAAcD,EAAcC;AACpC,IAAIC,EAAe,EAAQ;AAC3B9T,EAAQ+T,WAAaD,EAAaC;AAClC,IAAIC,EAAiB,EAAQ;AAC7BhU,EAAQiU,aAAeD,EAAeC;AACtC,IAAIC,EAAe,EAAQ;AAC3BlU,EAAQmU,WAAaD,EAAaC;AAClC,IAAI2d,EAAe,EAAQ;AAC3B9xB,EAAQ+xB,WAAaD,EAAaC;AAClC,IAAIxd,EAAe,EAAQ;AAC3BvU,EAAQwU,WAAaD,EAAaC;AAClC,IAAIlE,EAAkB,EAAQ;AAC9BtQ,EAAQuQ,cAAgBD,EAAgBC;AACxC,IAAIC,EAAW,EAAQ;AACvBxQ,EAAQ0P,OAASc,EAASd;AAC1B,IAAI+E,EAAc,EAAQ;AAC1BzU,EAAQ0U,UAAYD,EAAYC;AAChC,IAAIC,EAAc,EAAQ;AAC1B3U,EAAQ4U,UAAYD,EAAYC;AAChC,IAAIC,EAAgB,EAAQ;AAC5B7U,EAAQ8U,YAAcD,EAAcC;AACpC,IAAIC,EAAU,EAAQ;AACtB/U,EAAQmB,MAAQ4T,EAAQ5T;AACxB,IAAI6T,EAAa,EAAQ;AACzBhV,EAAQiV,SAAWD,EAAWC;AAC9B,IAAIC,EAAiB,EAAQ;AAC7BlV,EAAQmV,aAAeD,EAAeC;AACtC,IAAIC,EAAmB,EAAQ;AAC/BpV,EAAQqV,eAAiBD,EAAiBC;AAC1C,IAAIC,EAAU,EAAQ;AACtBtV,EAAQ4M,MAAQ0I,EAAQ1I;AACxB,IAAI2I,EAAc,EAAQ;AAC1BvV,EAAQwV,UAAYD,EAAYC;AAChC,IAAIC,EAAkB,EAAQ;AAC9BzV,EAAQ0V,cAAgBD,EAAgBC;AACxC,IAAIC,EAAa,EAAQ;AACzB3V,EAAQ4V,SAAWD,EAAWC;AAC9B,IAAIC,EAAyB,EAAQ;AACrC7V,EAAQ8V,qBAAuBD,EAAuBC;AACtD,IAAIC,EAA4B,EAAQ;AACxC/V,EAAQgW,wBAA0BD,EAA0BC;AAC5D,IAAIG,EAAc,EAAQ;AAC1BnW,EAAQoW,UAAYD,EAAYC;AAChC,IAAIC,EAAU,EAAQ;AACtBrW,EAAQsW,MAAQD,EAAQC;AACxB,IAAIC,EAAY,EAAQ;AACxBvW,EAAQwW,QAAUD,EAAUC;AAC5B,IAAIC,EAAe,EAAQ;AAC3BzW,EAAQ0W,WAAaD,EAAaC;AAClC,IAAIC,EAAW,EAAQ;AACvB3W,EAAQ4W,OAASD,EAASC;AAC1B,IAAIC,EAAW,EAAQ;AACvB7W,EAAQS,OAASoW,EAASpW;AAC1B,IAAIoyB,EAAa,EAAQ;AACzB7yB,EAAQ+yB,SAAWF,EAAWE;AAC9B,IAAI9b,EAAS,EAAQ;AACrBjX,EAAQkX,KAAOD,EAAOC;AACtB,IAAIC,EAAc,EAAQ;AAC1BnX,EAAQoX,UAAYD,EAAYC;AAChC,IAAIC,EAAU,EAAQ;AACtBrX,EAAQsX,MAAQD,EAAQC;AACxB,IAAIC,EAAY,EAAQ;AACxBvX,EAAQwX,QAAUD,EAAUC;AAC5B,IAAIC,EAAmB,EAAQ;AAC/BzX,EAAQ0X,eAAiBD,EAAiBC;AAC1C,IAAIC,EAAY,EAAQ;AACxB3X,EAAQ4X,QAAUD,EAAUC;AAC5B,IAAIC,EAAS,EAAQ;AACrB7X,EAAQ8X,KAAOD,EAAOC;AACtB,IAAIK,EAAQ,EAAQ;AACpBnY,EAAQjB,IAAMoZ,EAAMpZ;AACpB,IAAIqZ,EAAU,EAAQ;AACtBpY,EAAQqY,MAAQD,EAAQC;AACxB,IAAIC,EAAgB,EAAQ;AAC5BtY,EAAQuY,YAAcD,EAAcC;AACpC,IAAIC,EAAQ,EAAQ;AACpBxY,EAAQgL,IAAMwN,EAAMxN;AACpB,IAAIiH,EAAU,EAAQ;AACtBjS,EAAQkS,MAAQD,EAAQC;AACxB,IAAIuG,EAAa,EAAQ;AACzBzY,EAAQ0Y,SAAWD,EAAWC;AAC9B,IAAIC,EAAa,EAAQ;AACzB3Y,EAAQ4Y,SAAWD,EAAWC;AAC9B,IAAIgc,EAAa,EAAQ;AACzB50B,EAAQ6Y,QAAU+b,EAAWhc;AAC7B,IAAIE,EAAe,EAAQ;AAC3B9Y,EAAQgZ,WAAaF,EAAaE;AAClC,IAAIC,EAAc,EAAQ;AAC1BjZ,EAAQkZ,UAAYD,EAAYC;AAChC,IAAIC,EAAQ,EAAQ;AACpBnZ,EAAQoZ,IAAMD,EAAMC;AACpB,IAAIC,EAAc,EAAQ;AAC1BrZ,EAAQsZ,UAAYD,EAAYC;AAChC,IAAI9P,EAAc,EAAQ;AAC1BxJ,EAAQuZ,UAAY/P,EAAY+P;AAChC,IAAIjH,GAAsB,EAAQ;AAClCtS,EAAQuS,kBAAoBD,GAAoBC;AAChD,IAAIiH,GAAa,EAAQ;AACzBxZ,EAAQyZ,SAAWD,GAAWC;AAC9B,IAAIC,GAAc,EAAQ;AAC1B1Z,EAAQ2Z,UAAYD,GAAYC;AAChC,IAAIC,GAAU,EAAQ;AACtB5Z,EAAQ6Z,MAAQD,GAAQC;AACxB,IAAIC,GAAY,EAAQ;AACxB9Z,EAAQ+Z,QAAUD,GAAUC;AAC5B,IAAIC,GAAoB,EAAQ;AAChCha,EAAQia,gBAAkBD,GAAkBC;AAC5C,IAAIC,GAAgB,EAAQ;AAC5Bla,EAAQma,YAAcD,GAAcC;AACpC,IAAIC,GAAkB,EAAQ;AAC9Bpa,EAAQqa,cAAgBD,GAAgBC;AACxC,IAAI3H,GAAS,EAAQ;AACrB1S,EAAQ2S,KAAOD,GAAOC;AACtB,IAAI2H,GAAW,EAAQ;AACvBta,EAAQgQ,OAASsK,GAAStK;AAC1B,IAAIuK,GAAW,EAAQ;AACvBva,EAAQuB,OAASgZ,GAAShZ;AAC1B,IAAIiZ,GAAe,EAAQ;AAC3Bxa,EAAQya,WAAaD,GAAaC;AAClC,IAAIC,GAAU,EAAQ;AACtB1a,EAAQ2a,MAAQD,GAAQC;AACxB,IAAIC,GAAc,EAAQ;AAC1B5a,EAAQ6a,UAAYD,GAAYC;AAChC,IAAImG,GAAa,EAAQ;AACzBhhB,EAAQ0hB,SAAWV,GAAWU;AAC9B,IAAI5G,GAAW,EAAQ;AACvB9a,EAAQ+a,OAASD,GAASC;AAC1B,IAAIC,GAAe,EAAQ;AAC3Bhb,EAAQib,WAAaD,GAAaC;AAClC,IAAIC,GAAS,EAAQ;AACrBlb,EAAQmb,KAAOD,GAAOC;AACtB,IAAIC,GAAkB,EAAQ;AAC9Bpb,EAAQqb,cAAgBD,GAAgBC;AACxC,IAAIC,GAAU,EAAQ;AACtBtb,EAAQub,MAAQD,GAAQC;AACxB,IAAIC,GAAgB,EAAQ;AAC5Bxb,EAAQyb,YAAcD,GAAcC;AACpC,IAAIC,GAAW,EAAQ;AACvB1b,EAAQ2b,OAASD,GAASC;AAC1B,IAAIC,GAAS,EAAQ;AACrB5b,EAAQ6b,KAAOD,GAAOC;AACtB,IAAIC,GAAa,EAAQ;AACzB9b,EAAQ+b,SAAWD,GAAWC;AAC9B,IAAIC,GAAc,EAAQ;AAC1Bhc,EAAQic,UAAYD,GAAYC;AAChC,IAAIC,GAAc,EAAQ;AAC1Blc,EAAQmc,UAAYD,GAAYC;AAChC,IAAIC,GAAc,EAAQ;AAC1Bpc,EAAQqc,UAAYD,GAAYC;AAQhC,IAAI4X,GAAc,EAAQ;AAC1Bj0B,EAAQk0B,UAAYD,GAAYC;AAChC,IAAIvX,GAAc,EAAQ;AAC1B3c,EAAQ4c,UAAYD,GAAYC;AAChC,IAAIC,GAAgB,EAAQ;AAC5B7c,EAAQ8c,YAAcD,GAAcC;AACpC,IAAIC,GAAS,EAAQ;AACrB/c,EAAQgd,KAAOD,GAAOC;AACtB,IAAIC,GAAa,EAAQ;AACzBjd,EAAQkd,SAAWD,GAAWC;AAC9B,IAAIC,GAAc,EAAQ;AAC1Bnd,EAAQod,UAAYD,GAAYC;AAChC,IAAIC,GAAc,EAAQ;AAC1Brd,EAAQsd,UAAYD,GAAYC;AAChC,IAAIoV,GAAQ,EAAQ;AACpB1yB,EAAQ2yB,IAAMD,GAAMC;AACpB,IAAIpV,GAAa,EAAQ;AACzBvd,EAAQwd,SAAWD,GAAWC;AAC9B,IAAIC,GAAiB,EAAQ;AAC7Bzd,EAAQ0d,aAAeD,GAAeC;AACtC,IAAIC,GAAiB,EAAQ;AAC7B3d,EAAQ4d,aAAeD,GAAeC;AACtC,IAAIC,GAAY,EAAQ;AACxB7d,EAAQ8d,QAAUD,GAAUC;AAC5B,IAAIC,GAAgB,EAAQ;AAC5B/d,EAAQge,YAAcD,GAAcC;AACpC,IAAIC,GAAc,EAAQ;AAC1Bje,EAAQke,UAAYD,GAAYC;AAChC,IAAIC,GAAY,EAAQ;AACxBne,EAAQoe,QAAUD,GAAUC;AAC5B,IAAIC,GAAW,EAAQ;AACvBre,EAAQse,OAASD,GAASC;AAC1B,IAAIC,GAAgB,EAAQ;AAC5Bve,EAAQwe,YAAcD,GAAcC;AACpC,IAAIC,GAAe,EAAQ;AAC3Bze,EAAQ4J,WAAa6U,GAAa7U;AAClC,IAAI8U,GAAiB,EAAQ;AAC7B1e,EAAQ2e,aAAeD,GAAeC;AACtC,IAAIC,GAAe,EAAQ;AAC3B5e,EAAQ6e,WAAaD,GAAaC;AAClC,IAAIC,GAAmB,EAAQ;AAC/B9e,EAAQ+e,eAAiBD,GAAiBC;AAC1C,IAAI3L,GAAQ,EAAQ;AACpBpT,EAAQqT,IAAMD,GAAMC;AACpB,IAAI4L,GAAW,EAAQ;AACvBjf,EAAQkf,OAASD,GAASC,M;AChN1B,IAAIlc,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIwL,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBsT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AA8ClCniB,EAAQuT,MALR,SAAe8d,GACX,OAAO,SAA+BxpB,GAClC,OAAOA,EAAOH,KAAK,IAAImtB,EAAcxD,GACzC,CACJ;AAEA,IAAIwD,EAAiB,WACjB,SAASA,EAAcxD,GACnB7xB,KAAK6xB,iBAAmBA,CAC5B,CAIA,OAHAwD,EAAcvxB,UAAUiB,KAAO,SAAUN,EAAY4D,GACjD,OAAOA,EAAOL,UAAU,IAAIstB,EAAgB7wB,EAAYzE,KAAK6xB,kBACjE,EACOwD,CACX,CARoB,GAchBC,EAAmB,SAAUnxB,GAE7B,SAASmxB,EAAgBxrB,EAAa+nB,GAClC1tB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK6xB,iBAAmBA,EACxB7xB,KAAK0G,UAAW,CACpB,CAuCA,OA5CAlD,EAAU8xB,EAAiBnxB,GAM3BmxB,EAAgBxxB,UAAUiC,MAAQ,SAAU5F,GAGxC,GAFAH,KAAKG,MAAQA,EACbH,KAAK0G,UAAW,GACX1G,KAAKu1B,UAAW,CACjB,IAAIzD,EAAWziB,EAAWO,SAAS5P,KAAK6xB,iBAAzBxiB,CAA2ClP;AAC1D,GAAI2xB,IAAaxiB,EAAcO,YAC3B7P,KAAK8J,YAAYtK,MAAM8P,EAAcO,YAAYC;IAEhD,CACD,IAAI+T,EAAoBlB,EAAoBQ,kBAAkBnjB,KAAM8xB;AAChEjO,EAAkBpe,OAClBzF,KAAKw1B,gBAGLx1B,KAAKyI,IAAIzI,KAAKu1B,UAAY1R,EAElC,CACJ,CACJ,EACAyR,EAAgBxxB,UAAU0xB,cAAgB,WACtC,IAAI9lB,EAAK1P,KAAMG,EAAQuP,EAAGvP,MAAOuG,EAAWgJ,EAAGhJ,SAAU6uB,EAAY7lB,EAAG6lB;AACpEA,IACAv1B,KAAK2P,OAAO4lB,GACZv1B,KAAKu1B,UAAY,KACjBA,EAAUpvB,eAEVO,IACA1G,KAAKG,MAAQ,KACbH,KAAK0G,UAAW,EAChB1G,KAAK8J,YAAY9G,KAAK7C,GAE9B,EACAm1B,EAAgBxxB,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,GACjF5J,KAAKw1B,eACT,EACAF,EAAgBxxB,UAAUuC,eAAiB,WACvCrG,KAAKw1B,eACT,EACOF,CACX,CA9CsB,CA8CpB1S,EAAkBlZ,gB;ACnHpB,IAAI+C,EAAU,EAAQ,OAClBqH,EAAU,EAAQ,OAClBN,EAAU,EAAQ;AA+CtBhT,EAAQyT,UAJR,SAAmB6d,EAAUznB,GAEzB,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzC8R,EAAQC,OAAM,WAAc,OAAOP,EAAQC,MAAMqe,EAAUznB,EAAY,GAClF,C;AChDA,IAAI7G,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAsClCniB,EAAQ2T,OALR,SAAgB4d,GACZ,OAAO,SAAgC1pB,GACnC,OAAOA,EAAOH,KAAK,IAAIutB,EAAe1D,GAC1C,CACJ;AAEA,IAAI0D,EAAkB,WAClB,SAASA,EAAe1D,GACpB/xB,KAAK+xB,gBAAkBA,CAC3B,CAIA,OAHA0D,EAAe3xB,UAAUiB,KAAO,SAAUN,EAAY4D,GAClD,OAAOA,EAAOL,UAAU,IAAI0tB,EAAiBjxB,EAAYzE,KAAK+xB,iBAClE,EACO0D,CACX,CARqB,GAcjBC,EAAoB,SAAUvxB,GAE9B,SAASuxB,EAAiB5rB,EAAaioB,GACnC5tB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKmU,OAAS,GACdnU,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAM+xB,GACzD,CASA,OAdAvuB,EAAUkyB,EAAkBvxB,GAM5BuxB,EAAiB5xB,UAAUiC,MAAQ,SAAU5F,GACzCH,KAAKmU,OAAO7Q,KAAKnD,EACrB,EACAu1B,EAAiB5xB,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC9F,IAAIsK,EAASnU,KAAKmU;AAClBnU,KAAKmU,OAAS,GACdnU,KAAK8J,YAAY9G,KAAKmR,EAC1B,EACOuhB,CACX,CAhBuB,CAgBrB9S,EAAkBlZ,gB;AC3EpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAgD3B/M,EAAQ6T,YANR,SAAqBlK,EAAY6nB,GAE7B,YADyB,IAArBA,IAA+BA,EAAmB,MAC/C,SAAqC3pB,GACxC,OAAOA,EAAOH,KAAK,IAAIytB,EAAoBxrB,EAAY6nB,GAC3D,CACJ;AAEA,IAAI2D,EAAuB,WACvB,SAASA,EAAoBxrB,EAAY6nB,GACrChyB,KAAKmK,WAAaA,EAClBnK,KAAKgyB,iBAAmBA,EAKpBhyB,KAAK41B,gBAJJ5D,GAAoB7nB,IAAe6nB,EAIb6D,EAHAC,CAK/B,CAIA,OAHAH,EAAoB7xB,UAAUiB,KAAO,SAAUN,EAAY4D,GACvD,OAAOA,EAAOL,UAAU,IAAIhI,KAAK41B,gBAAgBnxB,EAAYzE,KAAKmK,WAAYnK,KAAKgyB,kBACvF,EACO2D,CACX,CAf0B,GAqBtBG,EAAyB,SAAU3xB,GAEnC,SAAS2xB,EAAsBhsB,EAAaK,GACxChG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKmK,WAAaA,EAClBnK,KAAKmU,OAAS,EAClB,CAgBA,OArBA3Q,EAAUsyB,EAAuB3xB,GAMjC2xB,EAAsBhyB,UAAUiC,MAAQ,SAAU5F,GAC9C,IAAIgU,EAASnU,KAAKmU;AAClBA,EAAO7Q,KAAKnD,GACRgU,EAAO/Q,QAAUpD,KAAKmK,aACtBnK,KAAK8J,YAAY9G,KAAKmR,GACtBnU,KAAKmU,OAAS,GAEtB,EACA2hB,EAAsBhyB,UAAUsC,UAAY,WACxC,IAAI+N,EAASnU,KAAKmU;AACdA,EAAO/Q,OAAS,GAChBpD,KAAK8J,YAAY9G,KAAKmR,GAE1BhQ,EAAOL,UAAUsC,UAAUrB,KAAK/E,KACpC,EACO81B,CACX,CAvB4B,CAuB1BvoB,EAAajH,YAMXuvB,EAA6B,SAAU1xB,GAEvC,SAAS0xB,EAA0B/rB,EAAaK,EAAY6nB,GACxD7tB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKmK,WAAaA,EAClBnK,KAAKgyB,iBAAmBA,EACxBhyB,KAAK+1B,QAAU,GACf/1B,KAAK2B,MAAQ,CACjB,CA0BA,OAjCA6B,EAAUqyB,EAA2B1xB,GAQrC0xB,EAA0B/xB,UAAUiC,MAAQ,SAAU5F,GAClD,IAAIuP,EAAK1P,KAAMmK,EAAauF,EAAGvF,WAAY6nB,EAAmBtiB,EAAGsiB,iBAAkB+D,EAAUrmB,EAAGqmB,QAASp0B,EAAQ+N,EAAG/N;AACpH3B,KAAK2B,QACDA,EAAQqwB,GAAqB,GAC7B+D,EAAQzyB,KAAK;AAEjB,IAAK,IAAIC,EAAIwyB,EAAQ3yB,OAAQG,KAAM,CAC/B,IAAI4Q,EAAS4hB,EAAQxyB;AACrB4Q,EAAO7Q,KAAKnD,GACRgU,EAAO/Q,SAAW+G,IAClB4rB,EAAQtqB,OAAOlI,EAAG,GAClBvD,KAAK8J,YAAY9G,KAAKmR,GAE9B,CACJ,EACA0hB,EAA0B/xB,UAAUsC,UAAY,WAE5C,IADA,IAAe2vB,EAAN/1B,KAAmB+1B,QAASjsB,EAA5B9J,KAA6C8J,YAC/CisB,EAAQ3yB,OAAS,GAAG,CACvB,IAAI+Q,EAAS4hB,EAAQxU;AACjBpN,EAAO/Q,OAAS,GAChB0G,EAAY9G,KAAKmR,EAEzB,CACAhQ,EAAOL,UAAUsC,UAAUrB,KAAK/E,KACpC,EACO61B,CACX,CAnCgC,CAmC9BtoB,EAAajH,W;AC3If,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI4I,EAAU,EAAQ,OAClBc,EAAe,EAAQ,OACvB2S,EAAgB,EAAQ;AAgE5B1f,EAAQ+T,WAnBR,SAAoB0d,GAChB,IAAI7uB,EAASiB,UAAUjB,OACnBiH,EAAYoC,EAAQzK;AACpBke,EAAcG,YAAYhc,UAAUA,UAAUjB,OAAS,MACvDiH,EAAYhG,UAAUA,UAAUjB,OAAS,GACzCA;AAEJ,IAAI8uB,EAAyB;AACzB9uB,GAAU,IACV8uB,EAAyB7tB,UAAU;AAEvC,IAAI8tB,EAAgB1vB,OAAO6H;AAI3B,OAHIlH,GAAU,IACV+uB,EAAgB9tB,UAAU,IAEvB,SAAoCgE,GACvC,OAAOA,EAAOH,KAAK,IAAI8tB,EAAmB/D,EAAgBC,EAAwBC,EAAe9nB,GACrG,CACJ;AAEA,IAAI2rB,EAAsB,WACtB,SAASA,EAAmB/D,EAAgBC,EAAwBC,EAAe9nB,GAC/ErK,KAAKiyB,eAAiBA,EACtBjyB,KAAKkyB,uBAAyBA,EAC9BlyB,KAAKmyB,cAAgBA,EACrBnyB,KAAKqK,UAAYA,CACrB,CAIA,OAHA2rB,EAAmBlyB,UAAUiB,KAAO,SAAUN,EAAY4D,GACtD,OAAOA,EAAOL,UAAU,IAAIiuB,EAAqBxxB,EAAYzE,KAAKiyB,eAAgBjyB,KAAKkyB,uBAAwBlyB,KAAKmyB,cAAenyB,KAAKqK,WAC5I,EACO2rB,CACX,CAXyB,GAYrBE,EACA,WACIl2B,KAAKmU,OAAS,EAClB,EAQA8hB,EAAwB,SAAU9xB,GAElC,SAAS8xB,EAAqBnsB,EAAamoB,EAAgBC,EAAwBC,EAAe9nB,GAC9FlG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKiyB,eAAiBA,EACtBjyB,KAAKkyB,uBAAyBA,EAC9BlyB,KAAKmyB,cAAgBA,EACrBnyB,KAAKqK,UAAYA,EACjBrK,KAAKm2B,SAAW;AAChB,IAAI1nB,EAAUzO,KAAKo2B;AAEnB,GADAp2B,KAAKq2B,aAAyC,MAA1BnE,GAAkCA,EAAyB,EAC3ElyB,KAAKq2B,aAAc,CACnB,IAAIC,EAAoB,CAAE7xB,WAAYzE,KAAMyO,QAASA,EAASwjB,eAAgBA;AAC9EjyB,KAAKyI,IAAIgG,EAAQ8nB,YAAclsB,EAAU6C,SAASspB,EAA4BvE,EAAgBqE,GAClG,KACK,CACD,IAAIG,EAAa,CAAEhyB,WAAYzE,KAAMyO,QAASA,GAC1CioB,EAAgB,CAAEzE,eAAgBA,EAAgBC,uBAAwBA,EAAwBztB,WAAYzE,KAAMqK,UAAWA;AACnIrK,KAAKyI,IAAIgG,EAAQ8nB,YAAclsB,EAAU6C,SAASypB,EAAqB1E,EAAgBwE,IACvFz2B,KAAKyI,IAAI4B,EAAU6C,SAAS0pB,EAAwB1E,EAAwBwE,GAChF,CACJ,CAyDA,OA7EAlzB,EAAUyyB,EAAsB9xB,GAqBhC8xB,EAAqBnyB,UAAUiC,MAAQ,SAAU5F,GAI7C,IAHA,IAEI02B,EAFAV,EAAWn2B,KAAKm2B,SAChBjrB,EAAMirB,EAAS/yB,OAEVG,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIkL,EAAU0nB,EAAS5yB,GACnB4Q,EAAS1F,EAAQ0F;AACrBA,EAAO7Q,KAAKnD,GACRgU,EAAO/Q,QAAUpD,KAAKmyB,gBACtB0E,EAAsBpoB,EAE9B,CACIooB,GACA72B,KAAK82B,aAAaD,EAE1B,EACAZ,EAAqBnyB,UAAUmC,OAAS,SAAUuB,GAC9CxH,KAAKm2B,SAAS/yB,OAAS,EACvBe,EAAOL,UAAUmC,OAAOlB,KAAK/E,KAAMwH,EACvC,EACAyuB,EAAqBnyB,UAAUsC,UAAY,WAEvC,IADA,IAAe+vB,EAANn2B,KAAoBm2B,SAAUrsB,EAA9B9J,KAA+C8J,YACjDqsB,EAAS/yB,OAAS,GAAG,CACxB,IAAIqL,EAAU0nB,EAAS5U;AACvBzX,EAAY9G,KAAKyL,EAAQ0F,OAC7B,CACAhQ,EAAOL,UAAUsC,UAAUrB,KAAK/E,KACpC,EACqCi2B,EAAqBnyB,UAAUmL,aAAe,WAC/EjP,KAAKm2B,SAAW,IACpB,EACAF,EAAqBnyB,UAAUgzB,aAAe,SAAUroB,GACpDzO,KAAK+2B,aAAatoB;AAClB,IAAI8nB,EAAc9nB,EAAQ8nB;AAG1B,GAFAA,EAAYpwB,cACZnG,KAAK2P,OAAO4mB,IACPv2B,KAAKyF,QAAUzF,KAAKq2B,aAAc,CACnC5nB,EAAUzO,KAAKo2B;AACf,IAAInE,EAAiBjyB,KAAKiyB,eACtBqE,EAAoB,CAAE7xB,WAAYzE,KAAMyO,QAASA,EAASwjB,eAAgBA;AAC9EjyB,KAAKyI,IAAIgG,EAAQ8nB,YAAcv2B,KAAKqK,UAAU6C,SAASspB,EAA4BvE,EAAgBqE,GACvG,CACJ,EACAL,EAAqBnyB,UAAUsyB,YAAc,WACzC,IAAI3nB,EAAU,IAAIynB;AAElB,OADAl2B,KAAKm2B,SAAS7yB,KAAKmL,GACZA,CACX,EACAwnB,EAAqBnyB,UAAUizB,aAAe,SAAUtoB,GACpDzO,KAAK8J,YAAY9G,KAAKyL,EAAQ0F;AAC9B,IAAIgiB,EAAWn2B,KAAKm2B,UACFA,EAAWA,EAASroB,QAAQW,IAAY,IACvC,GACf0nB,EAAS1qB,OAAO0qB,EAASroB,QAAQW,GAAU,EAEnD,EACOwnB,CACX,CA/E2B,CA+EzB1oB,EAAajH;AACf,SAASkwB,EAA2BnpB,GAChC,IAAI5I,EAAa4I,EAAM5I,WACnBuyB,EAAc3pB,EAAMoB;AACpBuoB,GACAvyB,EAAWsyB,aAAaC,GAEvBvyB,EAAWgB,SACZ4H,EAAMoB,QAAUhK,EAAW2xB,cAC3B/oB,EAAMoB,QAAQ8nB,YAAcv2B,KAAKkN,SAASG,EAAOA,EAAM4kB,gBAE/D,CACA,SAAS2E,EAAuBvpB,GAC5B,IAAI6kB,EAAyB7kB,EAAM6kB,uBAAwBD,EAAiB5kB,EAAM4kB,eAAgBxtB,EAAa4I,EAAM5I,WAAY4F,EAAYgD,EAAMhD,UAC/IoE,EAAUhK,EAAW2xB;AAEpB3xB,EAAWgB,SACZhB,EAAWgE,IAAIgG,EAAQ8nB,YAAclsB,EAAU6C,SAASypB,EAAqB1E,EAAgB,CAAExtB,WAAYA,EAAYgK,QAASA,KAFvHzO,KAGFkN,SAASG,EAAO6kB,GAE/B,CACA,SAASyE,EAAoBtV,GACzB,IAAI5c,EAAa4c,EAAI5c,WAAYgK,EAAU4S,EAAI5S;AAC/ChK,EAAWsyB,aAAatoB,EAC5B,C;ACtMA,IAAIjL,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACII,EAAiB,EAAQ,OACzB0e,EAAsB,EAAQ,OAC9BC,EAAoB,EAAQ;AA4ChCpiB,EAAQiU,aALR,SAAsB2d,EAAUC,GAC5B,OAAO,SAAsChqB,GACzC,OAAOA,EAAOH,KAAK,IAAI+uB,EAAqB7E,EAAUC,GAC1D,CACJ;AAEA,IAAI4E,EAAwB,WACxB,SAASA,EAAqB7E,EAAUC,GACpCryB,KAAKoyB,SAAWA,EAChBpyB,KAAKqyB,gBAAkBA,CAC3B,CAIA,OAHA4E,EAAqBnzB,UAAUiB,KAAO,SAAUN,EAAY4D,GACxD,OAAOA,EAAOL,UAAU,IAAIkvB,EAAuBzyB,EAAYzE,KAAKoyB,SAAUpyB,KAAKqyB,iBACvF,EACO4E,CACX,CAT2B,GAevBC,EAA0B,SAAU/yB,GAEpC,SAAS+yB,EAAuBptB,EAAasoB,EAAUC,GACnDluB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKoyB,SAAWA,EAChBpyB,KAAKqyB,gBAAkBA,EACvBryB,KAAKm2B,SAAW,GAChBn2B,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMoyB,GACzD,CA2EA,OAlFA5uB,EAAU0zB,EAAwB/yB,GAQlC+yB,EAAuBpzB,UAAUiC,MAAQ,SAAU5F,GAG/C,IAFA,IAAIg2B,EAAWn2B,KAAKm2B,SAChBjrB,EAAMirB,EAAS/yB,OACVG,EAAI,EAAGA,EAAI2H,EAAK3H,IACrB4yB,EAAS5yB,GAAG4Q,OAAO7Q,KAAKnD,EAEhC,EACA+2B,EAAuBpzB,UAAUmC,OAAS,SAAUuB,GAEhD,IADA,IAAI2uB,EAAWn2B,KAAKm2B,SACbA,EAAS/yB,OAAS,GAAG,CACxB,IAAIqL,EAAU0nB,EAAS5U;AACvB9S,EAAQjJ,aAAaW,cACrBsI,EAAQ0F,OAAS,KACjB1F,EAAQjJ,aAAe,IAC3B,CACAxF,KAAKm2B,SAAW,KAChBhyB,EAAOL,UAAUmC,OAAOlB,KAAK/E,KAAMwH,EACvC,EACA0vB,EAAuBpzB,UAAUsC,UAAY,WAEzC,IADA,IAAI+vB,EAAWn2B,KAAKm2B,SACbA,EAAS/yB,OAAS,GAAG,CACxB,IAAIqL,EAAU0nB,EAAS5U;AACvBvhB,KAAK8J,YAAY9G,KAAKyL,EAAQ0F,QAC9B1F,EAAQjJ,aAAaW,cACrBsI,EAAQ0F,OAAS,KACjB1F,EAAQjJ,aAAe,IAC3B,CACAxF,KAAKm2B,SAAW,KAChBhyB,EAAOL,UAAUsC,UAAUrB,KAAK/E,KACpC,EACAk3B,EAAuBpzB,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACpGhE,EAAa7F,KAAKm3B,YAAYtxB,GAAc7F,KAAKo3B,WAAWztB,EAChE,EACAutB,EAAuBpzB,UAAUuC,eAAiB,SAAUwD,GACxD7J,KAAKm3B,YAAYttB,EAAS4E,QAC9B,EACAyoB,EAAuBpzB,UAAUszB,WAAa,SAAUj3B,GACpD,IACI,IACI4xB,EADkB/xB,KAAKqyB,gBACWttB,KAAK/E,KAAMG;AAC7C4xB,GACA/xB,KAAKq3B,aAAatF,EAK1B,CAFA,MAAOvqB,GACHxH,KAAKiG,OAAOuB,EAChB,CACJ,EACA0vB,EAAuBpzB,UAAUqzB,YAAc,SAAU1oB,GACrD,IAAI0nB,EAAWn2B,KAAKm2B;AACpB,GAAIA,GAAY1nB,EAAS,CACrB,IAAI0F,EAAS1F,EAAQ0F,OAAQ3O,EAAeiJ,EAAQjJ;AACpDxF,KAAK8J,YAAY9G,KAAKmR,GACtBgiB,EAAS1qB,OAAO0qB,EAASroB,QAAQW,GAAU,GAC3CzO,KAAK2P,OAAOnK,GACZA,EAAaW,aACjB,CACJ,EACA+wB,EAAuBpzB,UAAUuzB,aAAe,SAAUtF,GACtD,IAAIoE,EAAWn2B,KAAKm2B,SAEhB3wB,EAAe,IAAIvB,EAAeW,aAClC6J,EAAU,CAAE0F,OAFH,GAEmB3O,aAAcA;AAC9C2wB,EAAS7yB,KAAKmL;AACd,IAAIoV,EAAoBlB,EAAoBQ,kBAAkBnjB,KAAM+xB,EAAiBtjB;CAChFoV,GAAqBA,EAAkBpe,OACxCzF,KAAKm3B,YAAY1oB,IAGjBoV,EAAkBpV,QAAUA,EAC5BzO,KAAKyI,IAAIob,GACTre,EAAaiD,IAAIob,GAEzB,EACOqT,CACX,CApF6B,CAoF3BtU,EAAkBlZ,gB;ACvJpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACII,EAAiB,EAAQ,OACzBoL,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBsT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAuClCniB,EAAQmU,WALR,SAAoB0d,GAChB,OAAO,SAAUhqB,GACb,OAAOA,EAAOH,KAAK,IAAIovB,EAAmBjF,GAC9C,CACJ;AAEA,IAAIiF,EAAsB,WACtB,SAASA,EAAmBjF,GACxBryB,KAAKqyB,gBAAkBA,CAC3B,CAIA,OAHAiF,EAAmBxzB,UAAUiB,KAAO,SAAUN,EAAY4D,GACtD,OAAOA,EAAOL,UAAU,IAAIuvB,EAAqB9yB,EAAYzE,KAAKqyB,iBACtE,EACOiF,CACX,CARyB,GAcrBC,EAAwB,SAAUpzB,GAElC,SAASozB,EAAqBztB,EAAauoB,GACvCluB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqyB,gBAAkBA,EACvBryB,KAAKw3B,aAAc,EACnBx3B,KAAKo3B,YACT,CAkDA,OAxDA5zB,EAAU+zB,EAAsBpzB,GAOhCozB,EAAqBzzB,UAAUiC,MAAQ,SAAU5F,GAC7CH,KAAKmU,OAAO7Q,KAAKnD,EACrB,EACAo3B,EAAqBzzB,UAAUsC,UAAY,WACvC,IAAI+N,EAASnU,KAAKmU;AACdA,GACAnU,KAAK8J,YAAY9G,KAAKmR,GAE1BhQ,EAAOL,UAAUsC,UAAUrB,KAAK/E,KACpC,EACqCu3B,EAAqBzzB,UAAUmL,aAAe,WAC/EjP,KAAKmU,OAAS,KACdnU,KAAKw3B,aAAc,CACvB,EACAD,EAAqBzzB,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAClG7J,KAAKo3B,YACT,EACAG,EAAqBzzB,UAAUuC,eAAiB,WACxCrG,KAAKw3B,YACLx3B,KAAK8E,WAGL9E,KAAKo3B,YAEb,EACAG,EAAqBzzB,UAAUszB,WAAa,WACxC,IAAIK,EAAsBz3B,KAAKy3B;AAC3BA,IACAz3B,KAAK2P,OAAO8nB,GACZA,EAAoBtxB;AAExB,IAAIgO,EAASnU,KAAKmU;AACdnU,KAAKmU,QACLnU,KAAK8J,YAAY9G,KAAKmR,GAE1BnU,KAAKmU,OAAS;AACd,IAAI4d,EAAkB1iB,EAAWO,SAAS5P,KAAKqyB,gBAAzBhjB;AAClB0iB,IAAoBziB,EAAcO,YAClC7P,KAAKR,MAAM8P,EAAcO,YAAYC,IAGrC2nB,EAAsB,IAAIxzB,EAAeW,aACzC5E,KAAKy3B,oBAAsBA,EAC3Bz3B,KAAKyI,IAAIgvB,GACTz3B,KAAKw3B,aAAc,EACnBC,EAAoBhvB,IAAIka,EAAoBQ,kBAAkBnjB,KAAM+xB,IACpE/xB,KAAKw3B,aAAc,EAE3B,EACOD,CACX,CA1D2B,CA0DzB3U,EAAkBlZ,gB;ACzHpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAiElCniB,EAAQ+xB,WAPR,SAAoB7R,GAChB,OAAO,SAAoCrY,GACvC,IAAIF,EAAW,IAAIuvB,EAAchX,GAC7BiX,EAAStvB,EAAOH,KAAKC;AACzB,OAAQA,EAASwvB,OAASA,CAC9B,CACJ;AAEA,IAAID,EAAiB,WACjB,SAASA,EAAchX,GACnB1gB,KAAK0gB,SAAWA,CACpB,CAIA,OAHAgX,EAAc5zB,UAAUiB,KAAO,SAAUN,EAAY4D,GACjD,OAAOA,EAAOL,UAAU,IAAI4vB,EAAgBnzB,EAAYzE,KAAK0gB,SAAU1gB,KAAK23B,QAChF,EACOD,CACX,CARoB,GAchBE,EAAmB,SAAUzzB,GAE7B,SAASyzB,EAAgB9tB,EAAa4W,EAAUiX,GAC5CxzB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK0gB,SAAWA,EAChB1gB,KAAK23B,OAASA,CAClB,CAoBA,OAzBAn0B,EAAUo0B,EAAiBzzB,GAW3ByzB,EAAgB9zB,UAAUtE,MAAQ,SAAUgI,GACxC,IAAKxH,KAAK8K,UAAW,CACjB,IAAInI,OAAS;AACb,IACIA,EAAS3C,KAAK0gB,SAASlZ,EAAKxH,KAAK23B,OAKrC,CAHA,MAAOE,GAEH,YADA1zB,EAAOL,UAAUtE,MAAMuF,KAAK/E,KAAM63B,EAEtC,CACA73B,KAAKqO,yBACLrO,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAM2C,GACzD,CACJ,EACOi1B,CACX,CA3BsB,CA2BpBhV,EAAkBlZ,gB;ACjHpB,IAAIoH,EAAkB,EAAQ;AAI9BtQ,EAAQwU,WAHR,SAAoBqV,GAChB,OAAO,SAAUhiB,GAAU,OAAOA,EAAOH,KAAK,IAAI4I,EAAgBwZ,sBAAsBD,GAAW,CACvG,C;ACHA,IAAI7mB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIiiB,EAAoB,EAAQ,MAC5B3W,EAAY,EAAQ,OACpByT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ,OAC9BmV,EAAO,CAAC;AA6DZt3B,EAAQuQ,cAhBR,WAEI,IADA,IAAIqZ,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,IAAI+gB,EAAU;AASd,MARmD,mBAAxCD,EAAYA,EAAYhnB,OAAS,KACxCinB,EAAUD,EAAY9J,OAIC,IAAvB8J,EAAYhnB,QAAgB+L,EAAU/P,QAAQgrB,EAAY,MAC1DA,EAAcA,EAAY,GAAGzc,SAE1B,SAAUtF,GAAU,OAAOA,EAAOH,KAAKnD,KAAK,IAAI+gB,EAAkB3F,gBAAgB,CAAC9X,GAAQ6H,OAAOka,IAAe,IAAIE,EAAsBD,GAAW,CACjK;AAEA,IAAIC,EAAyB,WACzB,SAASA,EAAsBD,GAC3BrqB,KAAKqqB,QAAUA,CACnB,CAIA,OAHAC,EAAsBxmB,UAAUiB,KAAO,SAAUN,EAAY4D,GACzD,OAAOA,EAAOL,UAAU,IAAI+vB,EAAwBtzB,EAAYzE,KAAKqqB,SACzE,EACOC,CACX,CAR4B;AAS5B9pB,EAAQ8pB,sBAAwBA;AAMhC,IAAIyN,EAA2B,SAAU5zB,GAErC,SAAS4zB,EAAwBjuB,EAAaugB,GAC1ClmB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqqB,QAAUA,EACfrqB,KAAKg4B,OAAS,EACdh4B,KAAK4jB,OAAS,GACd5jB,KAAKoqB,YAAc,EACvB,CAoDA,OA3DA5mB,EAAUu0B,EAAyB5zB,GAQnC4zB,EAAwBj0B,UAAUiC,MAAQ,SAAUqC,GAChDpI,KAAK4jB,OAAOtgB,KAAKw0B,GACjB93B,KAAKoqB,YAAY9mB,KAAK8E,EAC1B,EACA2vB,EAAwBj0B,UAAUsC,UAAY,WAC1C,IAAIgkB,EAAcpqB,KAAKoqB,YACnBlf,EAAMkf,EAAYhnB;AACtB,GAAY,IAAR8H,EACAlL,KAAK8J,YAAYhF;IAEhB,CACD9E,KAAKg4B,OAAS9sB,EACdlL,KAAKi4B,UAAY/sB;AACjB,IAAK,IAAI3H,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAI6E,EAAagiB,EAAY7mB;AAC7BvD,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMoI,EAAYA,EAAY7E,GACjF,CACJ,CACJ,EACAw0B,EAAwBj0B,UAAUuC,eAAiB,SAAU6xB,GAC9B,IAAtBl4B,KAAKg4B,QAAU,IAChBh4B,KAAK8J,YAAYhF,UAEzB,EACAizB,EAAwBj0B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACrG,IAAI+Z,EAAS5jB,KAAK4jB,OACduU,EAASvU,EAAO9d,GAChBmyB,EAAaj4B,KAAKi4B,UAEhBE,IAAWL,IAAS93B,KAAKi4B,UAAYj4B,KAAKi4B,UAD1C;AAENrU,EAAO9d,GAAc6D,EACH,IAAdsuB,IACIj4B,KAAKqqB,QACLrqB,KAAKo4B,YAAYxU,GAGjB5jB,KAAK8J,YAAY9G,KAAK4gB,EAAOjW,SAGzC,EACAoqB,EAAwBj0B,UAAUs0B,YAAc,SAAUxU,GACtD,IAAIjhB;AACJ,IACIA,EAAS3C,KAAKqqB,QAAQjmB,MAAMpE,KAAM4jB,EAKtC,CAHA,MAAOpc,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAK8J,YAAY9G,KAAKL,EAC1B,EACOo1B,CACX,CA7D8B,CA6D5BnV,EAAkBlZ;AACpBlJ,EAAQu3B,wBAA0BA,C;ACpJlC,IAAI/mB,EAAW,EAAQ,OACnBwhB,EAAW,EAAQ;AACvBhyB,EAAQiyB,aAAeD,EAAStiB,OA0DhC1P,EAAQ0P,OAPR,WAEI,IADA,IAAIka,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAO,SAAUjB,GAAU,OAAOA,EAAOH,KAAKnD,KAAKiM,EAASd,OAAO9L,WAAM,EAAQ,CAACiE,GAAQ6H,OAAOka,IAAgB,CACrH,C;AC3DA,IAAInR,EAAa,EAAQ;AAoDzBzY,EAAQ0U,UAHR,WACI,OAAO+D,EAAWC,SAAS,EAC/B,C;ACnDA,IAAIC,EAAa,EAAQ;AAgEzB3Y,EAAQ4U,UAHR,SAAmBiV,EAAS9G,GACxB,OAAOpK,EAAWC,SAASiR,EAAS9G,EAAgB,EACxD,C;AC/DA,IAAIpO,EAAc,EAAQ;AA6D1B3U,EAAQ8U,YAHR,SAAqBod,EAAiBnP,GAClC,OAAOpO,EAAYC,WAAU,WAAc,OAAOsd,CAAiB,GAAGnP,EAC1E,C;AC5DA,IAAI/f,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAoD3B/M,EAAQmB,MAHR,SAAegxB,GACX,OAAO,SAAUtqB,GAAU,OAAOA,EAAOH,KAAK,IAAImwB,EAAc1F,EAAWtqB,GAAU,CACzF;AAEA,IAAIgwB,EAAiB,WACjB,SAASA,EAAc1F,EAAWtqB,GAC9BrI,KAAK2yB,UAAYA,EACjB3yB,KAAKqI,OAASA,CAClB,CAIA,OAHAgwB,EAAcv0B,UAAUiB,KAAO,SAAUN,EAAY4D,GACjD,OAAOA,EAAOL,UAAU,IAAIswB,EAAgB7zB,EAAYzE,KAAK2yB,UAAW3yB,KAAKqI,QACjF,EACOgwB,CACX,CAToB,GAehBC,EAAmB,SAAUn0B,GAE7B,SAASm0B,EAAgBxuB,EAAa6oB,EAAWtqB,GAC7ClE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKqI,OAASA,EACdrI,KAAK2B,MAAQ,EACb3B,KAAKkD,MAAQ,CACjB,CA0BA,OAjCAM,EAAU80B,EAAiBn0B,GAQ3Bm0B,EAAgBx0B,UAAUiC,MAAQ,SAAU5F,GACpCH,KAAK2yB,UACL3yB,KAAKu4B,cAAcp4B,GAGnBH,KAAK2B,OAEb,EACA22B,EAAgBx0B,UAAUy0B,cAAgB,SAAUp4B,GAChD,IAAIwC;AACJ,IACIA,EAAS3C,KAAK2yB,UAAUxyB,EAAOH,KAAKkD,QAASlD,KAAKqI,OAKtD,CAHA,MAAOb,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACI7E,GACA3C,KAAK2B,OAEb,EACA22B,EAAgBx0B,UAAUsC,UAAY,WAClCpG,KAAK8J,YAAY9G,KAAKhD,KAAK2B,OAC3B3B,KAAK8J,YAAYhF,UACrB,EACOwzB,CACX,CAnCsB,CAmCpB/qB,EAAajH,W;AC5Gf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AA8ClCniB,EAAQiV,SAHR,SAAkBoc,GACd,OAAO,SAAUxpB,GAAU,OAAOA,EAAOH,KAAK,IAAIswB,EAAiB3G,GAAoB,CAC3F;AAEA,IAAI2G,EAAoB,WACpB,SAASA,EAAiB3G,GACtB7xB,KAAK6xB,iBAAmBA,CAC5B,CAIA,OAHA2G,EAAiB10B,UAAUiB,KAAO,SAAUN,EAAY4D,GACpD,OAAOA,EAAOL,UAAU,IAAIywB,EAAmBh0B,EAAYzE,KAAK6xB,kBACpE,EACO2G,CACX,CARuB,GAcnBC,EAAsB,SAAUt0B,GAEhC,SAASs0B,EAAmB3uB,EAAa+nB,GACrC1tB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK6xB,iBAAmBA,EACxB7xB,KAAK0G,UAAW,EAChB1G,KAAK04B,qBAAuB,IAChC,CAiDA,OAvDAl1B,EAAUi1B,EAAoBt0B,GAO9Bs0B,EAAmB30B,UAAUiC,MAAQ,SAAU5F,GAC3C,IACI,IAAIwC,EAAS3C,KAAK6xB,iBAAiB9sB,KAAK/E,KAAMG;AAC1CwC,GACA3C,KAAK24B,SAASx4B,EAAOwC,EAK7B,CAFA,MAAO6E,GACHxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,CACJ,EACAixB,EAAmB30B,UAAUsC,UAAY,WACrCpG,KAAK44B,YACL54B,KAAK8J,YAAYhF,UACrB,EACA2zB,EAAmB30B,UAAU60B,SAAW,SAAUx4B,EAAO2xB,GACrD,IAAItsB,EAAexF,KAAK04B;AACxB14B,KAAKG,MAAQA,EACbH,KAAK0G,UAAW,EACZlB,IACAA,EAAaW,cACbnG,KAAK2P,OAAOnK,KAEhBA,EAAemd,EAAoBQ,kBAAkBnjB,KAAM8xB,IACzCrsB,QACdzF,KAAKyI,IAAIzI,KAAK04B,qBAAuBlzB,EAE7C,EACAizB,EAAmB30B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAChG7J,KAAK44B,WACT,EACAH,EAAmB30B,UAAUuC,eAAiB,WAC1CrG,KAAK44B,WACT,EACAH,EAAmB30B,UAAU80B,UAAY,WACrC,GAAI54B,KAAK0G,SAAU,CACf,IAAIvG,EAAQH,KAAKG,MACbqF,EAAexF,KAAK04B;AACpBlzB,IACAxF,KAAK04B,qBAAuB,KAC5BlzB,EAAaW,cACbnG,KAAK2P,OAAOnK,IAEhBxF,KAAKG,MAAQ,KACbH,KAAK0G,UAAW,EAChBvC,EAAOL,UAAUiC,MAAMhB,KAAK/E,KAAMG,EACtC,CACJ,EACOs4B,CACX,CAzDyB,CAyDvB7V,EAAkBlZ,gB;AC5HpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBd,EAAU,EAAQ;AAmDtBjM,EAAQmV,aAJR,SAAsB+T,EAASrf,GAE3B,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzC,SAAUqG,GAAU,OAAOA,EAAOH,KAAK,IAAI2wB,EAAqBnP,EAASrf,GAAa,CACjG;AAEA,IAAIwuB,EAAwB,WACxB,SAASA,EAAqBnP,EAASrf,GACnCrK,KAAK0pB,QAAUA,EACf1pB,KAAKqK,UAAYA,CACrB,CAIA,OAHAwuB,EAAqB/0B,UAAUiB,KAAO,SAAUN,EAAY4D,GACxD,OAAOA,EAAOL,UAAU,IAAI8wB,EAAuBr0B,EAAYzE,KAAK0pB,QAAS1pB,KAAKqK,WACtF,EACOwuB,CACX,CAT2B,GAevBC,EAA0B,SAAU30B,GAEpC,SAAS20B,EAAuBhvB,EAAa4f,EAASrf,GAClDlG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK0pB,QAAUA,EACf1pB,KAAKqK,UAAYA,EACjBrK,KAAK+4B,sBAAwB,KAC7B/4B,KAAKg5B,UAAY,KACjBh5B,KAAK0G,UAAW,CACpB,CA2BA,OAnCAlD,EAAUs1B,EAAwB30B,GASlC20B,EAAuBh1B,UAAUiC,MAAQ,SAAU5F,GAC/CH,KAAKi5B,gBACLj5B,KAAKg5B,UAAY74B,EACjBH,KAAK0G,UAAW,EAChB1G,KAAKyI,IAAIzI,KAAK+4B,sBAAwB/4B,KAAKqK,UAAU6C,SAASkU,EAAcphB,KAAK0pB,QAAS1pB,MAC9F,EACA84B,EAAuBh1B,UAAUsC,UAAY,WACzCpG,KAAKk5B,gBACLl5B,KAAK8J,YAAYhF,UACrB,EACAg0B,EAAuBh1B,UAAUo1B,cAAgB,WAC7Cl5B,KAAKi5B,gBACDj5B,KAAK0G,WACL1G,KAAK8J,YAAY9G,KAAKhD,KAAKg5B,WAC3Bh5B,KAAKg5B,UAAY,KACjBh5B,KAAK0G,UAAW,EAExB,EACAoyB,EAAuBh1B,UAAUm1B,cAAgB,WAC7C,IAAIF,EAAwB/4B,KAAK+4B;AACH,OAA1BA,IACA/4B,KAAK2P,OAAOopB,GACZA,EAAsB5yB,cACtBnG,KAAK+4B,sBAAwB,KAErC,EACOD,CACX,CArC6B,CAqC3BvrB,EAAajH;AACf,SAAS8a,EAAa3c,GAClBA,EAAWy0B,eACf,C;ACjHA,IAAI11B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAoC3B/M,EAAQqV,eAJR,SAAwB+c,GAEpB,YADqB,IAAjBA,IAA2BA,EAAe,MACvC,SAAUvqB,GAAU,OAAOA,EAAOH,KAAK,IAAIixB,EAAuBvG,GAAgB,CAC7F;AAEA,IAAIuG,EAA0B,WAC1B,SAASA,EAAuBvG,GAC5B5yB,KAAK4yB,aAAeA,CACxB,CAIA,OAHAuG,EAAuBr1B,UAAUiB,KAAO,SAAUN,EAAY4D,GAC1D,OAAOA,EAAOL,UAAU,IAAIoxB,EAAyB30B,EAAYzE,KAAK4yB,cAC1E,EACOuG,CACX,CAR6B,GAczBC,EAA4B,SAAUj1B,GAEtC,SAASi1B,EAAyBtvB,EAAa8oB,GAC3CzuB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK4yB,aAAeA,EACpB5yB,KAAKoY,SAAU,CACnB,CAWA,OAhBA5U,EAAU41B,EAA0Bj1B,GAMpCi1B,EAAyBt1B,UAAUiC,MAAQ,SAAU5F,GACjDH,KAAKoY,SAAU,EACfpY,KAAK8J,YAAY9G,KAAK7C,EAC1B,EACAi5B,EAAyBt1B,UAAUsC,UAAY,WACvCpG,KAAKoY,SACLpY,KAAK8J,YAAY9G,KAAKhD,KAAK4yB,cAE/B5yB,KAAK8J,YAAYhF,UACrB,EACOs0B,CACX,CAlB+B,CAkB7B7rB,EAAajH,W;AC1Ef,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI4I,EAAU,EAAQ,OAClB+c,EAAW,EAAQ,OACnBjc,EAAe,EAAQ,OACvB8rB,EAAiB,EAAQ;AA8C7B74B,EAAQ4M,MANR,SAAeA,EAAO/C,QACA,IAAdA,IAAwBA,EAAYoC,EAAQzK;AAChD,IACIs3B,EADgB9P,EAASG,OAAOvc,IACHA,EAAQ/C,EAAUK,MAASa,KAAK+c,IAAIlb;AACrE,OAAO,SAAU/E,GAAU,OAAOA,EAAOH,KAAK,IAAIqxB,EAAcD,EAAUjvB,GAAa,CAC3F;AAEA,IAAIkvB,EAAiB,WACjB,SAASA,EAAcnsB,EAAO/C,GAC1BrK,KAAKoN,MAAQA,EACbpN,KAAKqK,UAAYA,CACrB,CAIA,OAHAkvB,EAAcz1B,UAAUiB,KAAO,SAAUN,EAAY4D,GACjD,OAAOA,EAAOL,UAAU,IAAIwxB,EAAgB/0B,EAAYzE,KAAKoN,MAAOpN,KAAKqK,WAC7E,EACOkvB,CACX,CAToB,GAehBC,EAAmB,SAAUr1B,GAE7B,SAASq1B,EAAgB1vB,EAAasD,EAAO/C,GACzClG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKoN,MAAQA,EACbpN,KAAKqK,UAAYA,EACjBrK,KAAKmL,MAAQ,GACbnL,KAAKg4B,QAAS,EACdh4B,KAAKy5B,SAAU,CACnB,CA8CA,OAtDAj2B,EAAUg2B,EAAiBr1B,GAS3Bq1B,EAAgBvZ,SAAW,SAAU5S,GAKjC,IAJA,IAAIhF,EAASgF,EAAMhF,OACf8C,EAAQ9C,EAAO8C,MACfd,EAAYgD,EAAMhD,UAClBP,EAAcuD,EAAMvD,YACjBqB,EAAM/H,OAAS,GAAM+H,EAAM,GAAGG,KAAOjB,EAAUK,OAAU,GAC5DS,EAAMoW,QAAQmY,aAAa/yB,QAAQmD;AAEvC,GAAIqB,EAAM/H,OAAS,EAAG,CAClB,IAAI0S,EAAUvK,KAAKC,IAAI,EAAGL,EAAM,GAAGG,KAAOjB,EAAUK;AACpD1K,KAAKkN,SAASG,EAAOyI,EACzB,MAEI9V,KAAKmG,cACLkC,EAAO2vB,QAAS,CAExB,EACAwB,EAAgB11B,UAAU61B,UAAY,SAAUtvB,GAC5CrK,KAAKg4B,QAAS,EACdh4B,KAAKyI,IAAI4B,EAAU6C,SAASssB,EAAgBvZ,SAAUjgB,KAAKoN,MAAO,CAC9D/E,OAAQrI,KAAM8J,YAAa9J,KAAK8J,YAAaO,UAAWA,IAEhE,EACAmvB,EAAgB11B,UAAU81B,qBAAuB,SAAUF,GACvD,IAAqB,IAAjB15B,KAAKy5B,QAAT,CAGA,IAAIpvB,EAAYrK,KAAKqK,UACjB/K,EAAU,IAAIu6B,EAAaxvB,EAAUK,MAAQ1K,KAAKoN,MAAOssB;AAC7D15B,KAAKmL,MAAM7H,KAAKhE,IACI,IAAhBU,KAAKg4B,QACLh4B,KAAK25B,UAAUtvB,EALnB,CAOJ,EACAmvB,EAAgB11B,UAAUiC,MAAQ,SAAU5F,GACxCH,KAAK45B,qBAAqBP,EAAe7yB,aAAaa,WAAWlH,GACrE,EACAq5B,EAAgB11B,UAAUmC,OAAS,SAAUuB,GACzCxH,KAAKy5B,SAAU,EACfz5B,KAAKmL,MAAQ,GACbnL,KAAK8J,YAAYtK,MAAMgI,EAC3B,EACAgyB,EAAgB11B,UAAUsC,UAAY,WAClCpG,KAAK45B,qBAAqBP,EAAe7yB,aAAakB,iBAC1D,EACO8xB,CACX,CAxDsB,CAwDpBjsB,EAAajH,YACXuzB,EACA,SAAsBvuB,EAAMouB,GACxB15B,KAAKsL,KAAOA,EACZtL,KAAK05B,aAAeA,CACxB,C;ACnIJ,IAAIl2B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBhH,EAAe,EAAQ,OACvBqc,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAuDlCniB,EAAQwV,UATR,SAAmB6c,EAAuBC,GACtC,OAAIA,EACO,SAAUzqB,GACb,OAAO,IAAIyxB,EAA4BzxB,EAAQyqB,GAC1C5qB,KAAK,IAAI6xB,EAAkBlH,GACpC,EAEG,SAAUxqB,GAAU,OAAOA,EAAOH,KAAK,IAAI6xB,EAAkBlH,GAAyB,CACjG;AAEA,IAAIkH,EAAqB,WACrB,SAASA,EAAkBlH,GACvB7yB,KAAK6yB,sBAAwBA,CACjC,CAIA,OAHAkH,EAAkBj2B,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAIgyB,EAAoBv1B,EAAYzE,KAAK6yB,uBACrE,EACOkH,CACX,CARwB,GAcpBC,EAAuB,SAAU71B,GAEjC,SAAS61B,EAAoBlwB,EAAa+oB,GACtC1uB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK6yB,sBAAwBA,EAC7B7yB,KAAKyjB,WAAY,EACjBzjB,KAAKi6B,2BAA6B,GAClCj6B,KAAK4jB,OAAS,EAClB,CAuDA,OA9DApgB,EAAUw2B,EAAqB71B,GAQ/B61B,EAAoBl2B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACjG7J,KAAK8J,YAAY9G,KAAK6C,GACtB7F,KAAKk6B,mBAAmBrwB,GACxB7J,KAAKm6B,aACT,EACAH,EAAoBl2B,UAAUoC,YAAc,SAAU1G,EAAOqK,GACzD7J,KAAKiG,OAAOzG,EAChB,EACAw6B,EAAoBl2B,UAAUuC,eAAiB,SAAUwD,GACrD,IAAI1J,EAAQH,KAAKk6B,mBAAmBrwB;AAChC1J,GACAH,KAAK8J,YAAY9G,KAAK7C,GAE1BH,KAAKm6B,aACT,EACAH,EAAoBl2B,UAAUiC,MAAQ,SAAU5F,GAC5C,IACI,IAAIi6B,EAAgBp6B,KAAK6yB,sBAAsB1yB;AAC3Ci6B,GACAp6B,KAAKq6B,SAASD,EAAej6B,EAKrC,CAFA,MAAOqH,GACHxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,CACJ,EACAwyB,EAAoBl2B,UAAUsC,UAAY,WACtCpG,KAAKyjB,WAAY,EACjBzjB,KAAKm6B,aACT,EACAH,EAAoBl2B,UAAUo2B,mBAAqB,SAAU10B,GACzDA,EAAaW;AACb,IAAIm0B,EAAkBt6B,KAAKi6B,2BAA2BnsB,QAAQtI,GAC1DrF,EAAQ;AAMZ,OALyB,IAArBm6B,IACAn6B,EAAQH,KAAK4jB,OAAO0W,GACpBt6B,KAAKi6B,2BAA2BxuB,OAAO6uB,EAAiB,GACxDt6B,KAAK4jB,OAAOnY,OAAO6uB,EAAiB,IAEjCn6B,CACX,EACA65B,EAAoBl2B,UAAUu2B,SAAW,SAAUD,EAAej6B,GAC9D,IAAIo6B,EAAuB5X,EAAoBQ,kBAAkBnjB,KAAMo6B,EAAej6B;AAClFo6B,IAAyBA,EAAqB90B,SAC9CzF,KAAKyI,IAAI8xB,GACTv6B,KAAKi6B,2BAA2B32B,KAAKi3B,IAEzCv6B,KAAK4jB,OAAOtgB,KAAKnD,EACrB,EACA65B,EAAoBl2B,UAAUq2B,YAAc,WACpCn6B,KAAKyjB,WAAwD,IAA3CzjB,KAAKi6B,2BAA2B72B,QAClDpD,KAAK8J,YAAYhF,UAEzB,EACOk1B,CACX,CAhE0B,CAgExBpX,EAAkBlZ,iBAMhBowB,EAA+B,SAAU31B,GAEzC,SAAS21B,EAAiEzxB,EAAQyqB,GAC9E3uB,EAAOY,KAAK/E,MACZA,KAAKqI,OAASA,EACdrI,KAAK8yB,kBAAoBA,CAC7B,CAIA,OATAtvB,EAAUs2B,EAA6B31B,GAMF21B,EAA4Bh2B,UAAUU,WAAa,SAAUC,GAC9FzE,KAAK8yB,kBAAkB9qB,UAAU,IAAIwyB,EAA4B/1B,EAAYzE,KAAKqI,QACtF,EACOyxB,CACX,CAXkC,CAWhCvzB,EAAaU,YAMXuzB,EAA+B,SAAUr2B,GAEzC,SAASq2B,EAA4B50B,EAAQyC,GACzClE,EAAOY,KAAK/E,MACZA,KAAK4F,OAASA,EACd5F,KAAKqI,OAASA,EACdrI,KAAKy6B,kBAAmB,CAC5B,CAkBA,OAxBAj3B,EAAUg3B,EAA6Br2B,GAOvCq2B,EAA4B12B,UAAUiC,MAAQ,SAAUmyB,GACpDl4B,KAAK06B,mBACT,EACAF,EAA4B12B,UAAUmC,OAAS,SAAUuB,GACrDxH,KAAKmG,cACLnG,KAAK4F,OAAOpG,MAAMgI,EACtB,EACAgzB,EAA4B12B,UAAUsC,UAAY,WAC9CpG,KAAK06B,mBACT,EACAF,EAA4B12B,UAAU42B,kBAAoB,WACjD16B,KAAKy6B,mBACNz6B,KAAKy6B,kBAAmB,EACxBz6B,KAAKmG,cACLnG,KAAKqI,OAAOL,UAAUhI,KAAK4F,QAEnC,EACO40B,CACX,CA1BkC,CA0BhCjtB,EAAajH,W;AC/Lf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AA8C3B/M,EAAQ0V,cALR,WACI,OAAO,SAAuC7N,GAC1C,OAAOA,EAAOH,KAAK,IAAIyyB,EAC3B,CACJ;AAEA,IAAIA,EAAyB,WACzB,SAASA,IACT,CAIA,OAHAA,EAAsB72B,UAAUiB,KAAO,SAAUN,EAAY4D,GACzD,OAAOA,EAAOL,UAAU,IAAI4yB,EAAwBn2B,GACxD,EACOk2B,CACX,CAP4B,GAaxBC,EAA2B,SAAUz2B,GAErC,SAASy2B,EAAwB9wB,GAC7B3F,EAAOY,KAAK/E,KAAM8J,EACtB,CAIA,OAPAtG,EAAUo3B,EAAyBz2B,GAInCy2B,EAAwB92B,UAAUiC,MAAQ,SAAU5F,GAChDA,EAAMwG,QAAQ3G,KAAK8J,YACvB,EACO8wB,CACX,CAT8B,CAS5BrtB,EAAajH,W;AC1Ef,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ,OAC9BkY,EAAQ,EAAQ;AAiDpBr6B,EAAQ4V,SAHR,SAAkB2c,EAAaC,GAC3B,OAAO,SAAU3qB,GAAU,OAAOA,EAAOH,KAAK,IAAI4yB,EAAiB/H,EAAaC,GAAW,CAC/F;AAEA,IAAI8H,EAAoB,WACpB,SAASA,EAAiB/H,EAAaC,GACnChzB,KAAK+yB,YAAcA,EACnB/yB,KAAKgzB,QAAUA,CACnB,CAIA,OAHA8H,EAAiBh3B,UAAUiB,KAAO,SAAUN,EAAY4D,GACpD,OAAOA,EAAOL,UAAU,IAAI+yB,EAAmBt2B,EAAYzE,KAAK+yB,YAAa/yB,KAAKgzB,SACtF,EACO8H,CACX,CATuB,GAenBC,EAAsB,SAAU52B,GAEhC,SAAS42B,EAAmBjxB,EAAaipB,EAAaC,GAClD7uB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK+yB,YAAcA,EACnB/yB,KAAK4jB,OAAS,IAAIiX,EAAMG,IACpBhI,GACAhzB,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMgzB,GAE7D,CAkCA,OA1CAxvB,EAAUu3B,EAAoB52B,GAS9B42B,EAAmBj3B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAChG7J,KAAK4jB,OAAOqX,OAChB,EACAF,EAAmBj3B,UAAUoC,YAAc,SAAU1G,EAAOqK,GACxD7J,KAAKiG,OAAOzG,EAChB,EACAu7B,EAAmBj3B,UAAUiC,MAAQ,SAAU5F,GACvCH,KAAK+yB,YACL/yB,KAAKk7B,gBAAgB/6B,GAGrBH,KAAKm7B,cAAch7B,EAAOA,EAElC,EACA46B,EAAmBj3B,UAAUo3B,gBAAkB,SAAU/6B,GACrD,IAAI2oB,EACAhf,EAAc9J,KAAK8J;AACvB,IACIgf,EAAM9oB,KAAK+yB,YAAY5yB,EAK3B,CAHA,MAAOqH,GAEH,YADAsC,EAAYtK,MAAMgI,EAEtB,CACAxH,KAAKm7B,cAAcrS,EAAK3oB,EAC5B,EACA46B,EAAmBj3B,UAAUq3B,cAAgB,SAAUrS,EAAK3oB,GACxD,IAAIyjB,EAAS5jB,KAAK4jB;AACbA,EAAOwX,IAAItS,KACZlF,EAAOnb,IAAIqgB,GACX9oB,KAAK8J,YAAY9G,KAAK7C,GAE9B,EACO46B,CACX,CA5CyB,CA4CvBnY,EAAkBlZ;AACpBlJ,EAAQu6B,mBAAqBA,C;ACrH7B,IAAIv3B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvB8B,EAAa,EAAQ,OACrBC,EAAgB,EAAQ;AA4C5B9O,EAAQ8V,qBAHR,SAA8B2c,EAASF,GACnC,OAAO,SAAU1qB,GAAU,OAAOA,EAAOH,KAAK,IAAImzB,EAA6BpI,EAASF,GAAe,CAC3G;AAEA,IAAIsI,EAAgC,WAChC,SAASA,EAA6BpI,EAASF,GAC3C/yB,KAAKizB,QAAUA,EACfjzB,KAAK+yB,YAAcA,CACvB,CAIA,OAHAsI,EAA6Bv3B,UAAUiB,KAAO,SAAUN,EAAY4D,GAChE,OAAOA,EAAOL,UAAU,IAAIszB,EAA+B72B,EAAYzE,KAAKizB,QAASjzB,KAAK+yB,aAC9F,EACOsI,CACX,CATmC,GAe/BC,EAAkC,SAAUn3B,GAE5C,SAASm3B,EAA+BxxB,EAAampB,EAASF,GAC1D5uB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK+yB,YAAcA,EACnB/yB,KAAKu7B,QAAS,EACS,mBAAZtI,IACPjzB,KAAKizB,QAAUA,EAEvB,CA4BA,OApCAzvB,EAAU83B,EAAgCn3B,GAS1Cm3B,EAA+Bx3B,UAAUmvB,QAAU,SAAUxpB,EAAG+xB,GAC5D,OAAO/xB,IAAM+xB,CACjB,EACAF,EAA+Bx3B,UAAUiC,MAAQ,SAAU5F,GACvD,IACI2oB,EAAM3oB;AACV,GAFkBH,KAAK+yB,cAGnBjK,EAAMzZ,EAAWO,SAAS5P,KAAK+yB,YAAzB1jB,CAAsClP,MAChCmP,EAAcO,YACtB,OAAO7P,KAAK8J,YAAYtK,MAAM8P,EAAcO,YAAYC;AAGhE,IAAInN,GAAS;AACb,GAAI3C,KAAKu7B,QAEL,IADA54B,EAAS0M,EAAWO,SAAS5P,KAAKizB,QAAzB5jB,CAAkCrP,KAAK8oB,IAAKA,MACtCxZ,EAAcO,YACzB,OAAO7P,KAAK8J,YAAYtK,MAAM8P,EAAcO,YAAYC,QAI5D9P,KAAKu7B,QAAS;CAEM,IAApBE,QAAQ94B,KACR3C,KAAK8oB,IAAMA,EACX9oB,KAAK8J,YAAY9G,KAAK7C,GAE9B,EACOm7B,CACX,CAtCqC,CAsCnC/tB,EAAajH,W;ACzGf,IAAI+P,EAAyB,EAAQ;AA8DrC7V,EAAQgW,wBAHR,SAAiCsS,EAAKmK,GAClC,OAAO5c,EAAuBC,sBAAqB,SAAU7M,EAAG+xB,GAAK,OAAOvI,EAAUA,EAAQxpB,EAAEqf,GAAM0S,EAAE1S,IAAQrf,EAAEqf,KAAS0S,EAAE1S,EAAM,GACvI,C;AC7DA,IAAItlB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBmuB,EAA4B,EAAQ;AA8CxCl7B,EAAQoW,UAHR,SAAmB1T,EAAO0vB,GACtB,OAAO,SAAUvqB,GAAU,OAAOA,EAAOH,KAAK,IAAIyzB,EAAkBz4B,EAAO0vB,GAAgB,CAC/F;AAEA,IAAI+I,EAAqB,WACrB,SAASA,EAAkBz4B,EAAO0vB,GAG9B,GAFA5yB,KAAKkD,MAAQA,EACblD,KAAK4yB,aAAeA,EAChB1vB,EAAQ,EACR,MAAM,IAAIw4B,EAA0B7vB,uBAE5C,CAIA,OAHA8vB,EAAkB73B,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAI4zB,EAAoBn3B,EAAYzE,KAAKkD,MAAOlD,KAAK4yB,cACjF,EACO+I,CACX,CAZwB,GAkBpBC,EAAuB,SAAUz3B,GAEjC,SAASy3B,EAAoB9xB,EAAa5G,EAAO0vB,GAC7CzuB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKkD,MAAQA,EACblD,KAAK4yB,aAAeA,CACxB,CAmBA,OAxBApvB,EAAUo4B,EAAqBz3B,GAM/By3B,EAAoB93B,UAAUiC,MAAQ,SAAU0D,GACvB,GAAjBzJ,KAAKkD,UACLlD,KAAK8J,YAAY9G,KAAKyG,GACtBzJ,KAAK8J,YAAYhF,WAEzB,EACA82B,EAAoB93B,UAAUsC,UAAY,WACtC,IAAI0D,EAAc9J,KAAK8J;AACnB9J,KAAKkD,OAAS,SACmB,IAAtBlD,KAAK4yB,aACZ9oB,EAAY9G,KAAKhD,KAAK4yB,cAGtB9oB,EAAYtK,MAAM,IAAIk8B,EAA0B7vB,0BAGxD/B,EAAYhF,UAChB,EACO82B,CACX,CA1B0B,CA0BxBruB,EAAajH,W;ACjGf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAkB3B/M,EAAQsW,MAHR,SAAe6b,EAAWS,GACtB,OAAO,SAAU/qB,GAAU,OAAOA,EAAOH,KAAK,IAAI2zB,EAAclJ,EAAWS,EAAS/qB,GAAU,CAClG;AAEA,IAAIwzB,EAAiB,WACjB,SAASA,EAAclJ,EAAWS,EAAS/qB,GACvCrI,KAAK2yB,UAAYA,EACjB3yB,KAAKozB,QAAUA,EACfpzB,KAAKqI,OAASA,CAClB,CAIA,OAHAwzB,EAAc/3B,UAAUiB,KAAO,SAAU6B,EAAUyB,GAC/C,OAAOA,EAAOL,UAAU,IAAI8zB,EAAgBl1B,EAAU5G,KAAK2yB,UAAW3yB,KAAKozB,QAASpzB,KAAKqI,QAC7F,EACOwzB,CACX,CAVoB,GAgBhBC,EAAmB,SAAU33B,GAE7B,SAAS23B,EAAgBhyB,EAAa6oB,EAAWS,EAAS/qB,GACtDlE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKozB,QAAUA,EACfpzB,KAAKqI,OAASA,EACdrI,KAAKkD,MAAQ,EACblD,KAAKozB,QAAUA,GAAWpzB,IAC9B,CAqBA,OA7BAwD,EAAUs4B,EAAiB33B,GAS3B23B,EAAgBh4B,UAAUuC,eAAiB,SAAU01B,GACjD/7B,KAAK8J,YAAY9G,KAAK+4B,GACtB/7B,KAAK8J,YAAYhF,UACrB,EACAg3B,EAAgBh4B,UAAUiC,MAAQ,SAAU5F,GACxC,IAAIwC,GAAS;AACb,IACIA,EAAS3C,KAAK2yB,UAAU5tB,KAAK/E,KAAKozB,QAASjzB,EAAOH,KAAKkD,QAASlD,KAAKqI,OAKzE,CAHA,MAAOb,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACK7E,GACD3C,KAAKqG,gBAAe,EAE5B,EACAy1B,EAAgBh4B,UAAUsC,UAAY,WAClCpG,KAAKqG,gBAAe,EACxB,EACOy1B,CACX,CA/BsB,CA+BpBvuB,EAAajH,W;ACvEf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAuClCniB,EAAQwW,QAHR,WACI,OAAO,SAAU3O,GAAU,OAAOA,EAAOH,KAAK,IAAI8zB,EAAwB,CAC9E;AAEA,IAAIA,EAAuB,WACvB,SAASA,IACT,CAIA,OAHAA,EAAoBl4B,UAAUiB,KAAO,SAAUN,EAAY4D,GACvD,OAAOA,EAAOL,UAAU,IAAIi0B,EAAsBx3B,GACtD,EACOu3B,CACX,CAP0B,GAatBC,EAAyB,SAAU93B,GAEnC,SAAS83B,EAAsBnyB,GAC3B3F,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKuE,cAAe,EACpBvE,KAAKk8B,iBAAkB,CAC3B,CAoBA,OAzBA14B,EAAUy4B,EAAuB93B,GAMjC83B,EAAsBn4B,UAAUiC,MAAQ,SAAU5F,GACzCH,KAAKk8B,kBACNl8B,KAAKk8B,iBAAkB,EACvBl8B,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMG,IAE7D,EACA87B,EAAsBn4B,UAAUsC,UAAY,WACxCpG,KAAKuE,cAAe,EACfvE,KAAKk8B,iBACNl8B,KAAK8J,YAAYhF,UAEzB,EACAm3B,EAAsBn4B,UAAUuC,eAAiB,SAAUwD,GACvD7J,KAAK2P,OAAO9F,GACZ7J,KAAKk8B,iBAAkB,EACnBl8B,KAAKuE,cACLvE,KAAK8J,YAAYhF,UAEzB,EACOm3B,CACX,CA3B4B,CA2B1BrZ,EAAkBlZ,gB;ACtFpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAkDlCniB,EAAQ0W,WAHR,SAAoBmT,EAAS9G,GACzB,OAAO,SAAUlb,GAAU,OAAOA,EAAOH,KAAK,IAAIi0B,EAAuB9R,EAAS9G,GAAkB,CACxG;AAEA,IAAI4Y,EAA0B,WAC1B,SAASA,EAAuB9R,EAAS9G,GACrCvjB,KAAKqqB,QAAUA,EACfrqB,KAAKujB,eAAiBA,CAC1B,CAIA,OAHA4Y,EAAuBr4B,UAAUiB,KAAO,SAAUN,EAAY4D,GAC1D,OAAOA,EAAOL,UAAU,IAAIo0B,EAAyB33B,EAAYzE,KAAKqqB,QAASrqB,KAAKujB,gBACxF,EACO4Y,CACX,CAT6B,GAezBC,EAA4B,SAAUj4B,GAEtC,SAASi4B,EAAyBtyB,EAAaugB,EAAS9G,GACpDpf,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqqB,QAAUA,EACfrqB,KAAKujB,eAAiBA,EACtBvjB,KAAKk8B,iBAAkB,EACvBl8B,KAAKuE,cAAe,EACpBvE,KAAKkD,MAAQ,CACjB,CAqDA,OA7DAM,EAAU44B,EAA0Bj4B,GASpCi4B,EAAyBt4B,UAAUiC,MAAQ,SAAU5F,GAC5CH,KAAKk8B,iBACNl8B,KAAKq8B,QAAQl8B,EAErB,EACAi8B,EAAyBt4B,UAAUu4B,QAAU,SAAUl8B,GACnD,IAAI+C,EAAQlD,KAAKkD,QACb4G,EAAc9J,KAAK8J;AACvB,IACI,IAAInH,EAAS3C,KAAKqqB,QAAQlqB,EAAO+C;AACjClD,KAAKk8B,iBAAkB,EACvBl8B,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAM2C,EAAQxC,EAAO+C,GAIxE,CAFA,MAAOsE,GACHsC,EAAYtK,MAAMgI,EACtB,CACJ,EACA40B,EAAyBt4B,UAAUsC,UAAY,WAC3CpG,KAAKuE,cAAe,EACfvE,KAAKk8B,iBACNl8B,KAAK8J,YAAYhF,UAEzB,EACAs3B,EAAyBt4B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACtG,IAAe0Z,EAANvjB,KAA0BujB,eAAgBzZ,EAA1C9J,KAA2D8J;AAChEyZ,EACAvjB,KAAKs8B,gBAAgBz2B,EAAY8D,EAAY7D,EAAY8D,GAGzDE,EAAY9G,KAAK2G,EAEzB,EACAyyB,EAAyBt4B,UAAUw4B,gBAAkB,SAAUz2B,EAAY8D,EAAY7D,EAAY8D,GAC/F,IAAe2Z,EAANvjB,KAA0BujB,eAAgBzZ,EAA1C9J,KAA2D8J;AACpE,IACI,IAAInH,EAAS4gB,EAAe1d,EAAY8D,EAAY7D,EAAY8D;AAChEE,EAAY9G,KAAKL,EAIrB,CAFA,MAAO6E,GACHsC,EAAYtK,MAAMgI,EACtB,CACJ,EACA40B,EAAyBt4B,UAAUoC,YAAc,SAAUsB,GACvDxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,EACA40B,EAAyBt4B,UAAUuC,eAAiB,SAAUwD,GAC1D7J,KAAK2P,OAAO9F,GACZ7J,KAAKk8B,iBAAkB,EACnBl8B,KAAKuE,cACLvE,KAAK8J,YAAYhF,UAEzB,EACOs3B,CACX,CA/D+B,CA+D7BxZ,EAAkBlZ,gB;ACvIpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIwL,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBsT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAqDlCniB,EAAQ4W,OANR,SAAgBiT,EAAS4G,EAAY5mB,GAIjC,YAHmB,IAAf4mB,IAAyBA,EAAaxuB,OAAO6H,wBAC/B,IAAdD,IAAwBA,OAAY5C,GACxCwpB,GAAcA,GAAc,GAAK,EAAIxuB,OAAO6H,kBAAoB2mB,EACzD,SAAU5oB,GAAU,OAAOA,EAAOH,KAAK,IAAIq0B,EAAelS,EAAS4G,EAAY5mB,GAAa,CACvG;AAEA,IAAIkyB,EAAkB,WAClB,SAASA,EAAelS,EAAS4G,EAAY5mB,GACzCrK,KAAKqqB,QAAUA,EACfrqB,KAAKixB,WAAaA,EAClBjxB,KAAKqK,UAAYA,CACrB,CAIA,OAHAkyB,EAAez4B,UAAUiB,KAAO,SAAUN,EAAY4D,GAClD,OAAOA,EAAOL,UAAU,IAAIw0B,EAAiB/3B,EAAYzE,KAAKqqB,QAASrqB,KAAKixB,WAAYjxB,KAAKqK,WACjG,EACOkyB,CACX,CAVqB;AAWrB/7B,EAAQ+7B,eAAiBA;AAMzB,IAAIC,EAAoB,SAAUr4B,GAE9B,SAASq4B,EAAiB1yB,EAAaugB,EAAS4G,EAAY5mB,GACxDlG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqqB,QAAUA,EACfrqB,KAAKixB,WAAaA,EAClBjxB,KAAKqK,UAAYA,EACjBrK,KAAKkD,MAAQ,EACblD,KAAKg4B,OAAS,EACdh4B,KAAKuE,cAAe,EAChB0sB,EAAaxuB,OAAO6H,oBACpBtK,KAAKmU,OAAS,GAEtB,CAsDA,OAlEA3Q,EAAUg5B,EAAkBr4B,GAa5Bq4B,EAAiBvc,SAAW,SAAUoB,GAClC,IAAI5c,EAAa4c,EAAI5c,WAAY9B,EAAS0e,EAAI1e,OAAQxC,EAAQkhB,EAAIlhB,MAAO+C,EAAQme,EAAIne;AACrFuB,EAAWg4B,sBAAsB95B,EAAQxC,EAAO+C,EACpD,EACAs5B,EAAiB14B,UAAUiC,MAAQ,SAAU5F,GACzC,IAAI2J,EAAc9J,KAAK8J;AACvB,GAAIA,EAAYrE,OACZzF,KAAKoG;IADT,CAIA,IAAIlD,EAAQlD,KAAKkD;AACjB,GAAIlD,KAAKg4B,OAASh4B,KAAKixB,WAAY,CAC/BnnB,EAAY9G,KAAK7C;AACjB,IAAIwC,EAAS0M,EAAWO,SAAS5P,KAAKqqB,QAAzBhb,CAAkClP,EAAO+C;AACtD,GAAIP,IAAW2M,EAAcO,YACzB/F,EAAYtK,MAAM8P,EAAcO,YAAYC;KAE3C,GAAK9P,KAAKqK,UAGV,CACD,IAAIgD,EAAQ,CAAE5I,WAAYzE,KAAM2C,OAAQA,EAAQxC,MAAOA,EAAO+C,MAAOA;AACrElD,KAAKyI,IAAIzI,KAAKqK,UAAU6C,SAASsvB,EAAiBvc,SAAU,EAAG5S,GACnE,MALIrN,KAAKy8B,sBAAsB95B,EAAQxC,EAAO+C,EAMlD,MAEIlD,KAAKmU,OAAO7Q,KAAKnD,EAjBrB,CAmBJ,EACAq8B,EAAiB14B,UAAU24B,sBAAwB,SAAU95B,EAAQxC,EAAO+C,GACxElD,KAAKg4B,SACLh4B,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAM2C,EAAQxC,EAAO+C,GACxE,EACAs5B,EAAiB14B,UAAUsC,UAAY,WACnCpG,KAAKuE,cAAe,EAChBvE,KAAKuE,cAAgC,IAAhBvE,KAAKg4B,QAC1Bh4B,KAAK8J,YAAYhF,UAEzB,EACA03B,EAAiB14B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC9F7J,KAAK+F,MAAM4D,EACf,EACA6yB,EAAiB14B,UAAUuC,eAAiB,SAAUwD,GAClD,IAAIsK,EAASnU,KAAKmU;AAClBnU,KAAK2P,OAAO9F,GACZ7J,KAAKg4B,SACD7jB,GAAUA,EAAO/Q,OAAS,GAC1BpD,KAAK+F,MAAMoO,EAAOoN,SAElBvhB,KAAKuE,cAAgC,IAAhBvE,KAAKg4B,QAC1Bh4B,KAAK8J,YAAYhF,UAEzB,EACO03B,CACX,CApEuB,CAoErB5Z,EAAkBlZ;AACpBlJ,EAAQg8B,iBAAmBA,C;ACpJ3B,IAAIh5B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AA8C3B/M,EAAQS,OALR,SAAgB0xB,EAAWS,GACvB,OAAO,SAAgC/qB,GACnC,OAAOA,EAAOH,KAAK,IAAIw0B,EAAe/J,EAAWS,GACrD,CACJ;AAEA,IAAIsJ,EAAkB,WAClB,SAASA,EAAe/J,EAAWS,GAC/BpzB,KAAK2yB,UAAYA,EACjB3yB,KAAKozB,QAAUA,CACnB,CAIA,OAHAsJ,EAAe54B,UAAUiB,KAAO,SAAUN,EAAY4D,GAClD,OAAOA,EAAOL,UAAU,IAAI20B,EAAiBl4B,EAAYzE,KAAK2yB,UAAW3yB,KAAKozB,SAClF,EACOsJ,CACX,CATqB,GAejBC,EAAoB,SAAUx4B,GAE9B,SAASw4B,EAAiB7yB,EAAa6oB,EAAWS,GAC9CjvB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKozB,QAAUA,EACfpzB,KAAK2B,MAAQ,CACjB,CAgBA,OAtBA6B,EAAUm5B,EAAkBx4B,GAS5Bw4B,EAAiB74B,UAAUiC,MAAQ,SAAU5F,GACzC,IAAIwC;AACJ,IACIA,EAAS3C,KAAK2yB,UAAU5tB,KAAK/E,KAAKozB,QAASjzB,EAAOH,KAAK2B,QAK3D,CAHA,MAAO6F,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACI7E,GACA3C,KAAK8J,YAAY9G,KAAK7C,EAE9B,EACOw8B,CACX,CAxBuB,CAwBrBpvB,EAAajH,W;AC3Ff,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBtJ,EAAiB,EAAQ;AAY7BzD,EAAQ+yB,SAHR,SAAkBD,GACd,OAAO,SAAUjrB,GAAU,OAAOA,EAAOH,KAAK,IAAI00B,EAAgBtJ,GAAY,CAClF;AAEA,IAAIsJ,EAAmB,WACnB,SAASA,EAAgBtJ,GACrBtzB,KAAKszB,SAAWA,CACpB,CAIA,OAHAsJ,EAAgB94B,UAAUiB,KAAO,SAAUN,EAAY4D,GACnD,OAAOA,EAAOL,UAAU,IAAI60B,EAAkBp4B,EAAYzE,KAAKszB,UACnE,EACOsJ,CACX,CARsB,GAclBC,EAAqB,SAAU14B,GAE/B,SAAS04B,EAAkB/yB,EAAawpB,GACpCnvB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKyI,IAAI,IAAIxE,EAAeW,aAAa0uB,GAC7C,CACA,OALA9vB,EAAUq5B,EAAmB14B,GAKtB04B,CACX,CAPwB,CAOtBtvB,EAAajH,W;ACxCf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAwC3B/M,EAAQkX,KANR,SAAcib,EAAWS,GACrB,GAAyB,mBAAdT,EACP,MAAM,IAAItzB,UAAU;AAExB,OAAO,SAAUgJ,GAAU,OAAOA,EAAOH,KAAK,IAAI40B,EAAkBnK,EAAWtqB,GAAQ,EAAO+qB,GAAW,CAC7G;AAEA,IAAI0J,EAAqB,WACrB,SAASA,EAAkBnK,EAAWtqB,EAAQ00B,EAAY3J,GACtDpzB,KAAK2yB,UAAYA,EACjB3yB,KAAKqI,OAASA,EACdrI,KAAK+8B,WAAaA,EAClB/8B,KAAKozB,QAAUA,CACnB,CAIA,OAHA0J,EAAkBh5B,UAAUiB,KAAO,SAAU6B,EAAUyB,GACnD,OAAOA,EAAOL,UAAU,IAAIg1B,EAAoBp2B,EAAU5G,KAAK2yB,UAAW3yB,KAAKqI,OAAQrI,KAAK+8B,WAAY/8B,KAAKozB,SACjH,EACO0J,CACX,CAXwB;AAYxBt8B,EAAQs8B,kBAAoBA;AAM5B,IAAIE,EAAuB,SAAU74B,GAEjC,SAAS64B,EAAoBlzB,EAAa6oB,EAAWtqB,EAAQ00B,EAAY3J,GACrEjvB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKqI,OAASA,EACdrI,KAAK+8B,WAAaA,EAClB/8B,KAAKozB,QAAUA,EACfpzB,KAAKkD,MAAQ,CACjB,CAsBA,OA9BAM,EAAUw5B,EAAqB74B,GAS/B64B,EAAoBl5B,UAAUuC,eAAiB,SAAUlG,GACrD,IAAI2J,EAAc9J,KAAK8J;AACvBA,EAAY9G,KAAK7C,GACjB2J,EAAYhF,UAChB,EACAk4B,EAAoBl5B,UAAUiC,MAAQ,SAAU5F,GAC5C,IAAewyB,EAAN3yB,KAAqB2yB,UAAWS,EAAhCpzB,KAA6CozB,QAClDlwB,EAAQlD,KAAKkD;AACjB,IACiByvB,EAAU5tB,KAAKquB,GAAWpzB,KAAMG,EAAO+C,EAAOlD,KAAKqI,SAE5DrI,KAAKqG,eAAerG,KAAK+8B,WAAa75B,EAAQ/C,EAKtD,CAFA,MAAOqH,GACHxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,CACJ,EACAw1B,EAAoBl5B,UAAUsC,UAAY,WACtCpG,KAAKqG,eAAerG,KAAK+8B,YAAc,OAAIt1B,EAC/C,EACOu1B,CACX,CAhC0B,CAgCxBzvB,EAAajH;AACf9F,EAAQw8B,oBAAsBA,C;ACjG9B,IAAIvlB,EAAS,EAAQ;AAsCrBjX,EAAQoX,UAHR,SAAmB+a,EAAWS,GAC1B,OAAO,SAAU/qB,GAAU,OAAOA,EAAOH,KAAK,IAAIuP,EAAOqlB,kBAAkBnK,EAAWtqB,GAAQ,EAAM+qB,GAAW,CACnH,C;ACrCA,IAAI5vB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvB0vB,EAAe,EAAQ;AAqD3Bz8B,EAAQsX,MAHR,SAAe6a,EAAWpP,EAAgBqP,GACtC,OAAO,SAAUvqB,GAAU,OAAOA,EAAOH,KAAK,IAAIg1B,EAAcvK,EAAWpP,EAAgBqP,EAAcvqB,GAAU,CACvH;AAEA,IAAI60B,EAAiB,WACjB,SAASA,EAAcvK,EAAWpP,EAAgBqP,EAAcvqB,GAC5DrI,KAAK2yB,UAAYA,EACjB3yB,KAAKujB,eAAiBA,EACtBvjB,KAAK4yB,aAAeA,EACpB5yB,KAAKqI,OAASA,CAClB,CAIA,OAHA60B,EAAcp5B,UAAUiB,KAAO,SAAU6B,EAAUyB,GAC/C,OAAOA,EAAOL,UAAU,IAAIm1B,EAAgBv2B,EAAU5G,KAAK2yB,UAAW3yB,KAAKujB,eAAgBvjB,KAAK4yB,aAAc5yB,KAAKqI,QACvH,EACO60B,CACX,CAXoB,GAiBhBC,EAAmB,SAAUh5B,GAE7B,SAASg5B,EAAgBrzB,EAAa6oB,EAAWpP,EAAgBqP,EAAcvqB,GAC3ElE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKujB,eAAiBA,EACtBvjB,KAAK4yB,aAAeA,EACpB5yB,KAAKqI,OAASA,EACdrI,KAAKkD,MAAQ,EACblD,KAAKuE,cAAe,EACpBvE,KAAKo9B,UAAW,CACpB,CA4DA,OAtEA55B,EAAU25B,EAAiBh5B,GAW3Bg5B,EAAgBr5B,UAAUiC,MAAQ,SAAU5F,GACxC,IAAI+C,EAAQlD,KAAKkD;AACblD,KAAK2yB,UACL3yB,KAAKu4B,cAAcp4B,EAAO+C,GAG1BlD,KAAKq9B,MAAMl9B,EAAO+C,EAE1B,EACAi6B,EAAgBr5B,UAAUy0B,cAAgB,SAAUp4B,EAAO+C,GACvD,IAAIP;AACJ,IACIA,EAAS3C,KAAK2yB,UAAUxyB,EAAO+C,EAAOlD,KAAKqI,OAK/C,CAHA,MAAOb,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACI7E,GACA3C,KAAKq9B,MAAMl9B,EAAO+C,EAE1B,EACAi6B,EAAgBr5B,UAAUu5B,MAAQ,SAAUl9B,EAAO+C,GAC3ClD,KAAKujB,eACLvjB,KAAKs9B,mBAAmBn9B,EAAO+C,GAGnClD,KAAKu9B,WAAWp9B,EACpB,EACAg9B,EAAgBr5B,UAAUw5B,mBAAqB,SAAUn9B,EAAO+C,GAC5D,IAAIP;AACJ,IACIA,EAAS3C,KAAKujB,eAAepjB,EAAO+C,EAKxC,CAHA,MAAOsE,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAKu9B,WAAW56B,EACpB,EACAw6B,EAAgBr5B,UAAUy5B,WAAa,SAAUp9B,GAC7C,IAAI2J,EAAc9J,KAAK8J;AAClB9J,KAAKo9B,WACNp9B,KAAKo9B,UAAW,EAChBtzB,EAAY9G,KAAK7C,GACjB2J,EAAYhF,WACZ9E,KAAKuE,cAAe,EAE5B,EACA44B,EAAgBr5B,UAAUsC,UAAY,WAClC,IAAI0D,EAAc9J,KAAK8J;AAClB9J,KAAKuE,mBAA6C,IAAtBvE,KAAK4yB,aAI5B5yB,KAAKuE,cACXuF,EAAYtK,MAAM,IAAIy9B,EAAarxB,aAJnC9B,EAAY9G,KAAKhD,KAAK4yB,cACtB9oB,EAAYhF,WAKpB,EACOq4B,CACX,CAxEsB,CAwEpB5vB,EAAajH,W;ACrJf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBtJ,EAAiB,EAAQ,OACzBsC,EAAe,EAAQ,OACvBvC,EAAY,EAAQ,OACpBw5B,EAAQ,EAAQ,OAChBC,EAAY,EAAQ;AA0ExBj9B,EAAQwX,QALR,SAAiB+a,EAAaU,EAAiB5B,EAAkB6B,GAC7D,OAAO,SAAUrrB,GACb,OAAOA,EAAOH,KAAK,IAAIw1B,EAAgB3K,EAAaU,EAAiB5B,EAAkB6B,GAC3F,CACJ;AAEA,IAAIgK,EAAmB,WACnB,SAASA,EAAgB3K,EAAaU,EAAiB5B,EAAkB6B,GACrE1zB,KAAK+yB,YAAcA,EACnB/yB,KAAKyzB,gBAAkBA,EACvBzzB,KAAK6xB,iBAAmBA,EACxB7xB,KAAK0zB,gBAAkBA,CAC3B,CAIA,OAHAgK,EAAgB55B,UAAUiB,KAAO,SAAUN,EAAY4D,GACnD,OAAOA,EAAOL,UAAU,IAAI21B,EAAkBl5B,EAAYzE,KAAK+yB,YAAa/yB,KAAKyzB,gBAAiBzzB,KAAK6xB,iBAAkB7xB,KAAK0zB,iBAClI,EACOgK,CACX,CAXsB,GAiBlBC,EAAqB,SAAUx5B,GAE/B,SAASw5B,EAAkB7zB,EAAaipB,EAAaU,EAAiB5B,EAAkB6B,GACpFvvB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK+yB,YAAcA,EACnB/yB,KAAKyzB,gBAAkBA,EACvBzzB,KAAK6xB,iBAAmBA,EACxB7xB,KAAK0zB,gBAAkBA,EACvB1zB,KAAK49B,OAAS,KACd59B,KAAK69B,wBAAyB,EAC9B79B,KAAK2B,MAAQ,CACjB,CAkFA,OA5FA6B,EAAUm6B,EAAmBx5B,GAW7Bw5B,EAAkB75B,UAAUiC,MAAQ,SAAU5F,GAC1C,IAAI2oB;AACJ,IACIA,EAAM9oB,KAAK+yB,YAAY5yB,EAK3B,CAHA,MAAOqH,GAEH,YADAxH,KAAKR,MAAMgI,EAEf,CACAxH,KAAK89B,OAAO39B,EAAO2oB,EACvB,EACA6U,EAAkB75B,UAAUg6B,OAAS,SAAU39B,EAAO2oB,GAClD,IAAI8U,EAAS59B,KAAK49B;AACbA,IACDA,EAAS59B,KAAK49B,OAAwB,iBAAR9U,EAAmB,IAAI2U,EAAUM,QAAY,IAAIP,EAAMQ;AAEzF,IACI36B,EADA46B,EAAQL,EAAOx4B,IAAI0jB;AAEvB,GAAI9oB,KAAKyzB,gBACL,IACIpwB,EAAUrD,KAAKyzB,gBAAgBtzB,EAInC,CAFA,MAAOqH,GACHxH,KAAKR,MAAMgI,EACf,MAGAnE,EAAUlD;AAEd,IAAK89B,EAAO,CACRA,EAAQj+B,KAAK0zB,gBAAkB1zB,KAAK0zB,kBAAoB,IAAI1vB,EAAUgB,QACtE44B,EAAOM,IAAIpV,EAAKmV;AAChB,IAAIE,EAAoB,IAAI3K,EAAkB1K,EAAKmV,EAAOj+B;AAE1D,GADAA,KAAK8J,YAAY9G,KAAKm7B,GAClBn+B,KAAK6xB,iBAAkB,CACvB,IAAIC,OAAW;AACf,IACIA,EAAW9xB,KAAK6xB,iBAAiB,IAAI2B,EAAkB1K,EAAKmV,GAKhE,CAHA,MAAOz2B,GAEH,YADAxH,KAAKR,MAAMgI,EAEf,CACAxH,KAAKyI,IAAIqpB,EAAS9pB,UAAU,IAAIo2B,EAAwBtV,EAAKmV,EAAOj+B,OACxE,CACJ,CACKi+B,EAAMx4B,QACPw4B,EAAMj7B,KAAKK,EAEnB,EACAs6B,EAAkB75B,UAAUmC,OAAS,SAAUuB,GAC3C,IAAIo2B,EAAS59B,KAAK49B;AACdA,IACAA,EAAO90B,SAAQ,SAAUm1B,EAAOnV,GAC5BmV,EAAMz+B,MAAMgI,EAChB,IACAo2B,EAAO3C,SAEXj7B,KAAK8J,YAAYtK,MAAMgI,EAC3B,EACAm2B,EAAkB75B,UAAUsC,UAAY,WACpC,IAAIw3B,EAAS59B,KAAK49B;AACdA,IACAA,EAAO90B,SAAQ,SAAUm1B,EAAOnV,GAC5BmV,EAAMn5B,UACV,IACA84B,EAAO3C,SAEXj7B,KAAK8J,YAAYhF,UACrB,EACA64B,EAAkB75B,UAAUu6B,YAAc,SAAUvV,GAChD9oB,KAAK49B,OAAOvR,OAAOvD,EACvB,EACA6U,EAAkB75B,UAAUqC,YAAc,WACjCnG,KAAKyF,SACNzF,KAAK69B,wBAAyB,EACX,IAAf79B,KAAK2B,OACLwC,EAAOL,UAAUqC,YAAYpB,KAAK/E,MAG9C,EACO29B,CACX,CA9FwB,CA8FtBpwB,EAAajH,YAMX83B,EAA2B,SAAUj6B,GAErC,SAASi6B,EAAwBtV,EAAKmV,EAAOr4B,GACzCzB,EAAOY,KAAK/E,KAAMi+B,GAClBj+B,KAAK8oB,IAAMA,EACX9oB,KAAKi+B,MAAQA,EACbj+B,KAAK4F,OAASA,CAClB,CAWA,OAjBApC,EAAU46B,EAAyBj6B,GAOnCi6B,EAAwBt6B,UAAUiC,MAAQ,SAAU5F,GAChDH,KAAK8E,UACT,EACqCs5B,EAAwBt6B,UAAUmL,aAAe,WAClF,IAAerJ,EAAN5F,KAAkB4F,OAAQkjB,EAA1B9oB,KAAmC8oB;AAC5C9oB,KAAK8oB,IAAM9oB,KAAK4F,OAAS,KACrBA,GACAA,EAAOy4B,YAAYvV,EAE3B,EACOsV,CACX,CAnB8B,CAmB5B7wB,EAAajH,YASXktB,EAAqB,SAAUrvB,GAE/B,SAASqvB,EAAkB1K,EAAKwV,EAAcC,GAC1Cp6B,EAAOY,KAAK/E,MACZA,KAAK8oB,IAAMA,EACX9oB,KAAKs+B,aAAeA,EACpBt+B,KAAKu+B,qBAAuBA,CAChC,CAUA,OAhBA/6B,EAAUgwB,EAAmBrvB,GAOQqvB,EAAkB1vB,UAAUU,WAAa,SAAUC,GACpF,IAAIe,EAAe,IAAIvB,EAAeW,aACvB25B,EAANv+B,KAAgCu+B,qBAAsBD,EAAtDt+B,KAAwEs+B;AAKjF,OAJIC,IAAyBA,EAAqB94B,QAC9CD,EAAaiD,IAAI,IAAI+1B,EAA0BD,IAEnD/4B,EAAaiD,IAAI61B,EAAat2B,UAAUvD,IACjCe,CACX,EACOguB,CACX,CAlBwB,CAkBtBjtB,EAAaU;AACfzG,EAAQgzB,kBAAoBA;AAM5B,IAAIgL,EAA6B,SAAUr6B,GAEvC,SAASq6B,EAA0B54B,GAC/BzB,EAAOY,KAAK/E,MACZA,KAAK4F,OAASA,EACdA,EAAOjE,OACX,CAWA,OAhBA6B,EAAUg7B,EAA2Br6B,GAMrCq6B,EAA0B16B,UAAUqC,YAAc,WAC9C,IAAIP,EAAS5F,KAAK4F;AACbA,EAAOH,QAAWzF,KAAKyF,SACxBtB,EAAOL,UAAUqC,YAAYpB,KAAK/E,MAClC4F,EAAOjE,OAAS,EACK,IAAjBiE,EAAOjE,OAAeiE,EAAOi4B,wBAC7Bj4B,EAAOO,cAGnB,EACOq4B,CACX,CAlBgC,CAkB9Bv6B,EAAeW,a;ACjRjB,IAAIpB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBmb,EAAS,EAAQ;AAgBrBloB,EAAQ0X,eALR,WACI,OAAO,SAAwC7P,GAC3C,OAAOA,EAAOH,KAAK,IAAIu2B,EAC3B,CACJ;AAEA,IAAIA,EAA0B,WAC1B,SAASA,IACT,CAIA,OAHAA,EAAuB36B,UAAUiB,KAAO,SAAUN,EAAY4D,GAC1D,OAAOA,EAAOL,UAAU,IAAI02B,EAAyBj6B,GACzD,EACOg6B,CACX,CAP6B,GAazBC,EAA4B,SAAUv6B,GAEtC,SAASu6B,IACLv6B,EAAOC,MAAMpE,KAAMqE,UACvB,CAIA,OAPAb,EAAUk7B,EAA0Bv6B,GAIpCu6B,EAAyB56B,UAAUiC,MAAQ,SAAUmyB,GACjDxP,EAAOE,MACX,EACO8V,CACX,CAT+B,CAS7BnxB,EAAajH,W;AC7Cf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAI3B/M,EAAQ4X,QAHR,WACI,OAAO,SAAU/P,GAAU,OAAOA,EAAOH,KAAK,IAAIy2B,EAAoB,CAC1E;AAEA,IAAIA,EAAmB,WACnB,SAASA,IACT,CAIA,OAHAA,EAAgB76B,UAAUiB,KAAO,SAAU6B,EAAUyB,GACjD,OAAOA,EAAOL,UAAU,IAAI42B,EAAkBh4B,GAClD,EACO+3B,CACX,CAPsB,GAalBC,EAAqB,SAAUz6B,GAE/B,SAASy6B,EAAkB90B,GACvB3F,EAAOY,KAAK/E,KAAM8J,EACtB,CAYA,OAfAtG,EAAUo7B,EAAmBz6B,GAI7By6B,EAAkB96B,UAAUuC,eAAiB,SAAU+R,GACnD,IAAItO,EAAc9J,KAAK8J;AACvBA,EAAY9G,KAAKoV,GACjBtO,EAAYhF,UAChB,EACA85B,EAAkB96B,UAAUiC,MAAQ,SAAU5F,GAC1CH,KAAKqG,gBAAe,EACxB,EACAu4B,EAAkB96B,UAAUsC,UAAY,WACpCpG,KAAKqG,gBAAe,EACxB,EACOu4B,CACX,CAjBwB,CAiBtBrxB,EAAajH,W;ACxCf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvB0vB,EAAe,EAAQ;AAsB3Bz8B,EAAQ8X,KAHR,SAAcqa,EAAWpP,EAAgBqP,GACrC,OAAO,SAAUvqB,GAAU,OAAOA,EAAOH,KAAK,IAAI22B,EAAalM,EAAWpP,EAAgBqP,EAAcvqB,GAAU,CACtH;AAEA,IAAIw2B,EAAgB,WAChB,SAASA,EAAalM,EAAWpP,EAAgBqP,EAAcvqB,GAC3DrI,KAAK2yB,UAAYA,EACjB3yB,KAAKujB,eAAiBA,EACtBvjB,KAAK4yB,aAAeA,EACpB5yB,KAAKqI,OAASA,CAClB,CAIA,OAHAw2B,EAAa/6B,UAAUiB,KAAO,SAAU6B,EAAUyB,GAC9C,OAAOA,EAAOL,UAAU,IAAI82B,EAAel4B,EAAU5G,KAAK2yB,UAAW3yB,KAAKujB,eAAgBvjB,KAAK4yB,aAAc5yB,KAAKqI,QACtH,EACOw2B,CACX,CAXmB,GAiBfC,EAAkB,SAAU36B,GAE5B,SAAS26B,EAAeh1B,EAAa6oB,EAAWpP,EAAgBqP,EAAcvqB,GAC1ElE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKujB,eAAiBA,EACtBvjB,KAAK4yB,aAAeA,EACpB5yB,KAAKqI,OAASA,EACdrI,KAAK0G,UAAW,EAChB1G,KAAKkD,MAAQ,OACe,IAAjB0vB,IACP5yB,KAAKg5B,UAAYpG,EACjB5yB,KAAK0G,UAAW,EAExB,CAuDA,OApEAlD,EAAUs7B,EAAgB36B,GAc1B26B,EAAeh7B,UAAUiC,MAAQ,SAAU5F,GACvC,IAAI+C,EAAQlD,KAAKkD;AACjB,GAAIlD,KAAK2yB,UACL3yB,KAAKu4B,cAAcp4B,EAAO+C;IAEzB,CACD,GAAIlD,KAAKujB,eAEL,YADAvjB,KAAKs9B,mBAAmBn9B,EAAO+C;AAGnClD,KAAKg5B,UAAY74B,EACjBH,KAAK0G,UAAW,CACpB,CACJ,EACAo4B,EAAeh7B,UAAUy0B,cAAgB,SAAUp4B,EAAO+C,GACtD,IAAIP;AACJ,IACIA,EAAS3C,KAAK2yB,UAAUxyB,EAAO+C,EAAOlD,KAAKqI,OAK/C,CAHA,MAAOb,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACA,GAAI7E,EAAQ,CACR,GAAI3C,KAAKujB,eAEL,YADAvjB,KAAKs9B,mBAAmBn9B,EAAO+C;AAGnClD,KAAKg5B,UAAY74B,EACjBH,KAAK0G,UAAW,CACpB,CACJ,EACAo4B,EAAeh7B,UAAUw5B,mBAAqB,SAAUn9B,EAAO+C,GAC3D,IAAIP;AACJ,IACIA,EAAS3C,KAAKujB,eAAepjB,EAAO+C,EAKxC,CAHA,MAAOsE,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAKg5B,UAAYr2B,EACjB3C,KAAK0G,UAAW,CACpB,EACAo4B,EAAeh7B,UAAUsC,UAAY,WACjC,IAAI0D,EAAc9J,KAAK8J;AACnB9J,KAAK0G,UACLoD,EAAY9G,KAAKhD,KAAKg5B,WACtBlvB,EAAYhF,YAGZgF,EAAYtK,MAAM,IAAIy9B,EAAarxB,WAE3C,EACOkzB,CACX,CAtEqB,CAsEnBvxB,EAAajH,W;ACpHf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AA0C3B/M,EAAQjB,IARR,SAAa8qB,EAAS+I,GAClB,OAAO,SAAsB/qB,GACzB,GAAuB,mBAAZgiB,EACP,MAAM,IAAIhrB,UAAU;AAExB,OAAOgJ,EAAOH,KAAK,IAAI62B,EAAY1U,EAAS+I,GAChD,CACJ;AAEA,IAAI2L,EAAe,WACf,SAASA,EAAY1U,EAAS+I,GAC1BpzB,KAAKqqB,QAAUA,EACfrqB,KAAKozB,QAAUA,CACnB,CAIA,OAHA2L,EAAYj7B,UAAUiB,KAAO,SAAUN,EAAY4D,GAC/C,OAAOA,EAAOL,UAAU,IAAIg3B,EAAcv6B,EAAYzE,KAAKqqB,QAASrqB,KAAKozB,SAC7E,EACO2L,CACX,CATkB;AAUlBv+B,EAAQu+B,YAAcA;AAMtB,IAAIC,EAAiB,SAAU76B,GAE3B,SAAS66B,EAAcl1B,EAAaugB,EAAS+I,GACzCjvB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqqB,QAAUA,EACfrqB,KAAK2B,MAAQ,EACb3B,KAAKozB,QAAUA,GAAWpzB,IAC9B,CAcA,OApBAwD,EAAUw7B,EAAe76B,GASzB66B,EAAcl7B,UAAUiC,MAAQ,SAAU5F,GACtC,IAAIwC;AACJ,IACIA,EAAS3C,KAAKqqB,QAAQtlB,KAAK/E,KAAKozB,QAASjzB,EAAOH,KAAK2B,QAKzD,CAHA,MAAO6F,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAK8J,YAAY9G,KAAKL,EAC1B,EACOq8B,CACX,CAtBoB,CAsBlBzxB,EAAajH,W;ACtFf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AA8B3B/M,EAAQqY,MAHR,SAAe1Y,GACX,OAAO,SAAUkI,GAAU,OAAOA,EAAOH,KAAK,IAAI+2B,EAAc9+B,GAAS,CAC7E;AAEA,IAAI8+B,EAAiB,WACjB,SAASA,EAAc9+B,GACnBH,KAAKG,MAAQA,CACjB,CAIA,OAHA8+B,EAAcn7B,UAAUiB,KAAO,SAAUN,EAAY4D,GACjD,OAAOA,EAAOL,UAAU,IAAIk3B,EAAgBz6B,EAAYzE,KAAKG,OACjE,EACO8+B,CACX,CARoB,GAchBC,EAAmB,SAAU/6B,GAE7B,SAAS+6B,EAAgBp1B,EAAa3J,GAClCgE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKG,MAAQA,CACjB,CAIA,OARAqD,EAAU07B,EAAiB/6B,GAK3B+6B,EAAgBp7B,UAAUiC,MAAQ,SAAU0D,GACxCzJ,KAAK8J,YAAY9G,KAAKhD,KAAKG,MAC/B,EACO++B,CACX,CAVsB,CAUpB3xB,EAAajH,W;AC5Df,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvB8rB,EAAiB,EAAQ;AAkD7B74B,EAAQuY,YALR,WACI,OAAO,SAAqC1Q,GACxC,OAAOA,EAAOH,KAAK,IAAIi3B,EAC3B,CACJ;AAEA,IAAIA,EAAuB,WACvB,SAASA,IACT,CAIA,OAHAA,EAAoBr7B,UAAUiB,KAAO,SAAUN,EAAY4D,GACvD,OAAOA,EAAOL,UAAU,IAAIo3B,EAAsB36B,GACtD,EACO06B,CACX,CAP0B,GAatBC,EAAyB,SAAUj7B,GAEnC,SAASi7B,EAAsBt1B,GAC3B3F,EAAOY,KAAK/E,KAAM8J,EACtB,CAcA,OAjBAtG,EAAU47B,EAAuBj7B,GAIjCi7B,EAAsBt7B,UAAUiC,MAAQ,SAAU5F,GAC9CH,KAAK8J,YAAY9G,KAAKq2B,EAAe7yB,aAAaa,WAAWlH,GACjE,EACAi/B,EAAsBt7B,UAAUmC,OAAS,SAAUuB,GAC/C,IAAIsC,EAAc9J,KAAK8J;AACvBA,EAAY9G,KAAKq2B,EAAe7yB,aAAae,YAAYC,IACzDsC,EAAYhF,UAChB,EACAs6B,EAAsBt7B,UAAUsC,UAAY,WACxC,IAAI0D,EAAc9J,KAAK8J;AACvBA,EAAY9G,KAAKq2B,EAAe7yB,aAAakB,kBAC7CoC,EAAYhF,UAChB,EACOs6B,CACX,CAnB4B,CAmB1B7xB,EAAajH,W;ACzFf,IAAIwU,EAAW,EAAQ;AAsCvBta,EAAQgL,IANR,SAAamoB,GACT,IAAInoB,EAA2B,mBAAbmoB,EACZ,SAAUlqB,EAAG+xB,GAAK,OAAO7H,EAASlqB,EAAG+xB,GAAK,EAAI/xB,EAAI+xB,CAAG,EACrD,SAAU/xB,EAAG+xB,GAAK,OAAO/xB,EAAI+xB,EAAI/xB,EAAI+xB,CAAG;AAC9C,OAAO1gB,EAAStK,OAAOhF,EAC3B,C;ACrCA,IAAIiH,EAAU,EAAQ,OAClBmhB,EAAU,EAAQ;AACtBpzB,EAAQqzB,YAAcD,EAAQlhB,MAuD9BlS,EAAQkS,MAPR,WAEI,IADA,IAAI0X,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAO,SAAUjB,GAAU,OAAOA,EAAOH,KAAKnD,KAAK0N,EAAQC,MAAMtO,WAAM,EAAQ,CAACiE,GAAQ6H,OAAOka,IAAgB,CACnH,C;ACxDA,IAAIjR,EAAa,EAAQ,OACrBkmB,EAAa,EAAQ;AAiDzB7+B,EAAQ0Y,SAJR,SAAkB+X,GAEd,YADmB,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBAC1C6O,EAAWC,SAASimB,EAAWC,SAAU,KAAMrO,EAC1D,C;ACjDA,IAAIztB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI8e,EAAsB,EAAQ,OAC9BC,EAAoB,EAAQ;AAsEhCpiB,EAAQ4Y,SAVR,SAAkBiR,EAAS9G,EAAgB0N,GAEvC,YADmB,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBAC1C,SAAkCjC,GAKrC,MAJ8B,iBAAnBkb,IACP0N,EAAa1N,EACbA,EAAiB,MAEdlb,EAAOH,KAAK,IAAIq3B,EAAiBlV,EAAS9G,EAAgB0N,GACrE,CACJ;AAEA,IAAIsO,EAAoB,WACpB,SAASA,EAAiBlV,EAAS9G,EAAgB0N,QAC5B,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBACjDtK,KAAKqqB,QAAUA,EACfrqB,KAAKujB,eAAiBA,EACtBvjB,KAAKixB,WAAaA,CACtB,CAIA,OAHAsO,EAAiBz7B,UAAUiB,KAAO,SAAU6B,EAAUyB,GAClD,OAAOA,EAAOL,UAAU,IAAIw3B,EAAmB54B,EAAU5G,KAAKqqB,QAASrqB,KAAKujB,eAAgBvjB,KAAKixB,YACrG,EACOsO,CACX,CAXuB;AAYvB/+B,EAAQ++B,iBAAmBA;AAM3B,IAAIC,EAAsB,SAAUr7B,GAEhC,SAASq7B,EAAmB11B,EAAaugB,EAAS9G,EAAgB0N,QAC3C,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBACjDnG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqqB,QAAUA,EACfrqB,KAAKujB,eAAiBA,EACtBvjB,KAAKixB,WAAaA,EAClBjxB,KAAKuE,cAAe,EACpBvE,KAAKmU,OAAS,GACdnU,KAAKg4B,OAAS,EACdh4B,KAAKkD,MAAQ,CACjB,CA6DA,OAxEAM,EAAUg8B,EAAoBr7B,GAY9Bq7B,EAAmB17B,UAAUiC,MAAQ,SAAU5F,GACvCH,KAAKg4B,OAASh4B,KAAKixB,WACnBjxB,KAAK24B,SAASx4B,GAGdH,KAAKmU,OAAO7Q,KAAKnD,EAEzB,EACAq/B,EAAmB17B,UAAU60B,SAAW,SAAUx4B,GAC9C,IAAIwC,EACAO,EAAQlD,KAAKkD;AACjB,IACIP,EAAS3C,KAAKqqB,QAAQlqB,EAAO+C,EAKjC,CAHA,MAAOsE,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAKg4B,SACLh4B,KAAKy/B,UAAU98B,EAAQxC,EAAO+C,EAClC,EACAs8B,EAAmB17B,UAAU27B,UAAY,SAAUxZ,EAAK9lB,EAAO+C,GAC3DlD,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMimB,EAAK9lB,EAAO+C,GACrE,EACAs8B,EAAmB17B,UAAUsC,UAAY,WACrCpG,KAAKuE,cAAe,EACA,IAAhBvE,KAAKg4B,QAAuC,IAAvBh4B,KAAKmU,OAAO/Q,QACjCpD,KAAK8J,YAAYhF,UAEzB,EACA06B,EAAmB17B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC5F7J,KAAKujB,eACLvjB,KAAK0/B,sBAAsB75B,EAAY8D,EAAY7D,EAAY8D,GAG/D5J,KAAK8J,YAAY9G,KAAK2G,EAE9B,EACA61B,EAAmB17B,UAAU47B,sBAAwB,SAAU75B,EAAY8D,EAAY7D,EAAY8D,GAC/F,IAAIjH;AACJ,IACIA,EAAS3C,KAAKujB,eAAe1d,EAAY8D,EAAY7D,EAAY8D,EAKrE,CAHA,MAAOpC,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAK8J,YAAY9G,KAAKL,EAC1B,EACA68B,EAAmB17B,UAAUuC,eAAiB,SAAUwD,GACpD,IAAIsK,EAASnU,KAAKmU;AAClBnU,KAAK2P,OAAO9F,GACZ7J,KAAKg4B,SACD7jB,EAAO/Q,OAAS,EAChBpD,KAAK+F,MAAMoO,EAAOoN,SAEG,IAAhBvhB,KAAKg4B,QAAgBh4B,KAAKuE,cAC/BvE,KAAK8J,YAAYhF,UAEzB,EACO06B,CACX,CA1EyB,CA0EvB5c,EAAkBlZ;AACpBlJ,EAAQg/B,mBAAqBA,C;AC1K7B,IAAIh8B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAqDlCniB,EAAQgZ,WARR,SAAoBkZ,EAAiBnP,EAAgB0N,GAMjD,YALmB,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBACnB,iBAAnBiZ,IACP0N,EAAa1N,EACbA,EAAiB,MAEd,SAAUlb,GAAU,OAAOA,EAAOH,KAAK,IAAIy3B,EAAmBjN,EAAiBnP,EAAgB0N,GAAc,CACxH;AAIA,IAAI0O,EAAsB,WACtB,SAASA,EAAmB1Z,EAAK1C,EAAgB0N,QAC1B,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBACjDtK,KAAKimB,IAAMA,EACXjmB,KAAKujB,eAAiBA,EACtBvjB,KAAKixB,WAAaA,CACtB,CAIA,OAHA0O,EAAmB77B,UAAUiB,KAAO,SAAU6B,EAAUyB,GACpD,OAAOA,EAAOL,UAAU,IAAI43B,EAAqBh5B,EAAU5G,KAAKimB,IAAKjmB,KAAKujB,eAAgBvjB,KAAKixB,YACnG,EACO0O,CACX,CAXyB;AAYzBn/B,EAAQm/B,mBAAqBA;AAM7B,IAAIC,EAAwB,SAAUz7B,GAElC,SAASy7B,EAAqB91B,EAAamc,EAAK1C,EAAgB0N,QACzC,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBACjDnG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKimB,IAAMA,EACXjmB,KAAKujB,eAAiBA,EACtBvjB,KAAKixB,WAAaA,EAClBjxB,KAAKuE,cAAe,EACpBvE,KAAKmU,OAAS,GACdnU,KAAKg4B,OAAS,EACdh4B,KAAKkD,MAAQ,CACjB,CA0DA,OArEAM,EAAUo8B,EAAsBz7B,GAYhCy7B,EAAqB97B,UAAUiC,MAAQ,SAAU5F,GAC7C,GAAIH,KAAKg4B,OAASh4B,KAAKixB,WAAY,CAC/B,IAAI1N,EAAiBvjB,KAAKujB,eACtBrgB,EAAQlD,KAAKkD,QACb+iB,EAAMjmB,KAAKimB,IACXnc,EAAc9J,KAAK8J;AACvB9J,KAAKg4B,SACLh4B,KAAKy/B,UAAUxZ,EAAKnc,EAAayZ,EAAgBpjB,EAAO+C,EAC5D,MAEIlD,KAAKmU,OAAO7Q,KAAKnD,EAEzB,EACAy/B,EAAqB97B,UAAU27B,UAAY,SAAUxZ,EAAKnc,EAAayZ,EAAgBpjB,EAAO+C,GAC1FlD,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMimB,EAAK9lB,EAAO+C,GACrE,EACA08B,EAAqB97B,UAAUsC,UAAY,WACvCpG,KAAKuE,cAAe,EACA,IAAhBvE,KAAKg4B,QAAuC,IAAvBh4B,KAAKmU,OAAO/Q,QACjCpD,KAAK8J,YAAYhF,UAEzB,EACA86B,EAAqB97B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAClG,IAAe0Z,EAANvjB,KAA0BujB,eAAgBzZ,EAA1C9J,KAA2D8J;AAChEyZ,EACAvjB,KAAKs8B,gBAAgBz2B,EAAY8D,EAAY7D,EAAY8D,GAGzDE,EAAY9G,KAAK2G,EAEzB,EACAi2B,EAAqB97B,UAAUw4B,gBAAkB,SAAUz2B,EAAY8D,EAAY7D,EAAY8D,GAC3F,IACIjH,EADW4gB,EAANvjB,KAA0BujB,eAAgBzZ,EAA1C9J,KAA2D8J;AAEpE,IACInH,EAAS4gB,EAAe1d,EAAY8D,EAAY7D,EAAY8D,EAKhE,CAHA,MAAOpC,GAEH,YADAsC,EAAYtK,MAAMgI,EAEtB,CACAsC,EAAY9G,KAAKL,EACrB,EACAi9B,EAAqB97B,UAAUoC,YAAc,SAAUsB,GACnDxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,EACAo4B,EAAqB97B,UAAUuC,eAAiB,SAAUwD,GACtD,IAAIsK,EAASnU,KAAKmU;AAClBnU,KAAK2P,OAAO9F,GACZ7J,KAAKg4B,SACD7jB,EAAO/Q,OAAS,EAChBpD,KAAK+F,MAAMoO,EAAOoN,SAEG,IAAhBvhB,KAAKg4B,QAAgBh4B,KAAKuE,cAC/BvE,KAAK8J,YAAYhF,UAEzB,EACO86B,CACX,CAvE2B,CAuEzBhd,EAAkBlZ;AACpBlJ,EAAQo/B,qBAAuBA,C;ACxJ/B,IAAIp8B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIwL,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBqT,EAAsB,EAAQ,OAC9BC,EAAoB,EAAQ;AAoChCpiB,EAAQkZ,UAJR,SAAmBoa,EAAaC,EAAM9C,GAElC,YADmB,IAAfA,IAAyBA,EAAaxuB,OAAO6H,mBAC1C,SAAUjC,GAAU,OAAOA,EAAOH,KAAK,IAAI23B,EAAkB/L,EAAaC,EAAM9C,GAAc,CACzG;AAEA,IAAI4O,EAAqB,WACrB,SAASA,EAAkB/L,EAAaC,EAAM9C,GAC1CjxB,KAAK8zB,YAAcA,EACnB9zB,KAAK+zB,KAAOA,EACZ/zB,KAAKixB,WAAaA,CACtB,CAIA,OAHA4O,EAAkB/7B,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAI83B,EAAoBr7B,EAAYzE,KAAK8zB,YAAa9zB,KAAK+zB,KAAM/zB,KAAKixB,YAClG,EACO4O,CACX,CAVwB;AAWxBr/B,EAAQq/B,kBAAoBA;AAM5B,IAAIC,EAAuB,SAAU37B,GAEjC,SAAS27B,EAAoBh2B,EAAagqB,EAAaiM,EAAK9O,GACxD9sB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8zB,YAAcA,EACnB9zB,KAAK+/B,IAAMA,EACX//B,KAAKixB,WAAaA,EAClBjxB,KAAK0G,UAAW,EAChB1G,KAAKuE,cAAe,EACpBvE,KAAKmU,OAAS,GACdnU,KAAKg4B,OAAS,EACdh4B,KAAKkD,MAAQ,CACjB,CAkDA,OA7DAM,EAAUs8B,EAAqB37B,GAY/B27B,EAAoBh8B,UAAUiC,MAAQ,SAAU5F,GAC5C,GAAIH,KAAKg4B,OAASh4B,KAAKixB,WAAY,CAC/B,IAAI/tB,EAAQlD,KAAKkD,QACb+iB,EAAM5W,EAAWO,SAAS5P,KAAK8zB,YAAzBzkB,CAAsCrP,KAAK+/B,IAAK5/B,GACtD2J,EAAc9J,KAAK8J;AACnBmc,IAAQ3W,EAAcO,YACtB/F,EAAYtK,MAAM8P,EAAcO,YAAYC,IAG5C9P,KAAKg4B,SACLh4B,KAAKy/B,UAAUxZ,EAAK9lB,EAAO+C,GAEnC,MAEIlD,KAAKmU,OAAO7Q,KAAKnD,EAEzB,EACA2/B,EAAoBh8B,UAAU27B,UAAY,SAAUxZ,EAAK9lB,EAAO+C,GAC5DlD,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMimB,EAAK9lB,EAAO+C,GACrE,EACA48B,EAAoBh8B,UAAUsC,UAAY,WACtCpG,KAAKuE,cAAe,EACA,IAAhBvE,KAAKg4B,QAAuC,IAAvBh4B,KAAKmU,OAAO/Q,UACX,IAAlBpD,KAAK0G,UACL1G,KAAK8J,YAAY9G,KAAKhD,KAAK+/B,KAE/B//B,KAAK8J,YAAYhF,WAEzB,EACAg7B,EAAoBh8B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACjG,IAAIC,EAAc9J,KAAK8J;AACvB9J,KAAK+/B,IAAMp2B,EACX3J,KAAK0G,UAAW,EAChBoD,EAAY9G,KAAK2G,EACrB,EACAm2B,EAAoBh8B,UAAUuC,eAAiB,SAAUwD,GACrD,IAAIsK,EAASnU,KAAKmU;AAClBnU,KAAK2P,OAAO9F,GACZ7J,KAAKg4B,SACD7jB,EAAO/Q,OAAS,EAChBpD,KAAK+F,MAAMoO,EAAOoN,SAEG,IAAhBvhB,KAAKg4B,QAAgBh4B,KAAKuE,gBACT,IAAlBvE,KAAK0G,UACL1G,KAAK8J,YAAY9G,KAAKhD,KAAK+/B,KAE/B//B,KAAK8J,YAAYhF,WAEzB,EACOg7B,CACX,CA/D0B,CA+DxBld,EAAkBlZ;AACpBlJ,EAAQs/B,oBAAsBA,C;AC9H9B,IAAIhlB,EAAW,EAAQ;AAsCvBta,EAAQoZ,IANR,SAAa+Z,GACT,IAAI/Z,EAA2B,mBAAb+Z,EACZ,SAAUlqB,EAAG+xB,GAAK,OAAO7H,EAASlqB,EAAG+xB,GAAK,EAAI/xB,EAAI+xB,CAAG,EACrD,SAAU/xB,EAAG+xB,GAAK,OAAO/xB,EAAI+xB,EAAI/xB,EAAI+xB,CAAG;AAC9C,OAAO1gB,EAAStK,OAAOoJ,EAC3B,C;ACrCA,IAAIomB,EAA0B,EAAQ;AAyCtCx/B,EAAQsZ,UApBR,SAAmBka,EAAyBtT,GACxC,OAAO,SAAmCrY,GACtC,IAAIoZ;AASJ,GAPIA,EADmC,mBAA5BuS,EACUA,EAGA,WACb,OAAOA,CACX,EAEoB,mBAAbtT,EACP,OAAOrY,EAAOH,KAAK,IAAI+3B,EAAkBxe,EAAgBf;AAE7D,IAAI4B,EAAc7iB,OAAOsE,OAAOsE,EAAQ23B,EAAwB5d;AAGhE,OAFAE,EAAYja,OAASA,EACrBia,EAAYb,eAAiBA,EACtBa,CACX,CACJ;AAEA,IAAI2d,EAAqB,WACrB,SAASA,EAAkBxe,EAAgBf,GACvC1gB,KAAKyhB,eAAiBA,EACtBzhB,KAAK0gB,SAAWA,CACpB,CAQA,OAPAuf,EAAkBn8B,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,IAAIqY,EAAW1gB,KAAK0gB,SAChBjT,EAAUzN,KAAKyhB,iBACfjc,EAAekb,EAASjT,GAASzF,UAAUvD;AAE/C,OADAe,EAAaiD,IAAIJ,EAAOL,UAAUyF,IAC3BjI,CACX,EACOy6B,CACX,CAbwB;AAcxBz/B,EAAQy/B,kBAAoBA,C;ACxD5B,IAAIz8B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvB8rB,EAAiB,EAAQ;AAqD7B74B,EAAQuZ,UANR,SAAmB1P,EAAW+C,GAE1B,YADc,IAAVA,IAAoBA,EAAQ,GACzB,SAAmC/E,GACtC,OAAOA,EAAOH,KAAK,IAAIg4B,EAAkB71B,EAAW+C,GACxD,CACJ;AAEA,IAAI8yB,EAAqB,WACrB,SAASA,EAAkB71B,EAAW+C,QACpB,IAAVA,IAAoBA,EAAQ,GAChCpN,KAAKqK,UAAYA,EACjBrK,KAAKoN,MAAQA,CACjB,CAIA,OAHA8yB,EAAkBp8B,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAIiD,EAAoBxG,EAAYzE,KAAKqK,UAAWrK,KAAKoN,OACrF,EACO8yB,CACX,CAVwB;AAWxB1/B,EAAQ0/B,kBAAoBA;AAM5B,IAAIj1B,EAAuB,SAAU9G,GAEjC,SAAS8G,EAAoBnB,EAAaO,EAAW+C,QACnC,IAAVA,IAAoBA,EAAQ,GAChCjJ,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqK,UAAYA,EACjBrK,KAAKoN,MAAQA,CACjB,CAkBA,OAxBA5J,EAAUyH,EAAqB9G,GAO/B8G,EAAoBgV,SAAW,SAAUoB,GACrC,IAAIqY,EAAerY,EAAIqY,aAAc5vB,EAAcuX,EAAIvX;AACvD4vB,EAAa/yB,QAAQmD,GACrB9J,KAAKmG,aACT,EACA8E,EAAoBnH,UAAUq8B,gBAAkB,SAAUzG,GACtD15B,KAAKyI,IAAIzI,KAAKqK,UAAU6C,SAASjC,EAAoBgV,SAAUjgB,KAAKoN,MAAO,IAAIgzB,EAAiB1G,EAAc15B,KAAK8J,cACvH,EACAmB,EAAoBnH,UAAUiC,MAAQ,SAAU5F,GAC5CH,KAAKmgC,gBAAgB9G,EAAe7yB,aAAaa,WAAWlH,GAChE,EACA8K,EAAoBnH,UAAUmC,OAAS,SAAUuB,GAC7CxH,KAAKmgC,gBAAgB9G,EAAe7yB,aAAae,YAAYC,GACjE,EACAyD,EAAoBnH,UAAUsC,UAAY,WACtCpG,KAAKmgC,gBAAgB9G,EAAe7yB,aAAakB,iBACrD,EACOuD,CACX,CA1B0B,CA0BxBsC,EAAajH;AACf9F,EAAQyK,oBAAsBA;AAC9B,IAAIm1B,EACA,SAA0B1G,EAAc5vB,GACpC9J,KAAK05B,aAAeA,EACpB15B,KAAK8J,YAAcA,CACvB;AAGJtJ,EAAQ4/B,iBAAmBA,C;AChH3B,IAAI58B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI8sB,EAAmB,EAAQ,MAC3BxhB,EAAY,EAAQ,OACpByT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAyElCniB,EAAQuS,kBAVR,WAEI,IADA,IAAIkhB,EAAc,GACT3qB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC2qB,EAAY3qB,EAAK,GAAKjF,UAAUiF;AAKpC,OAH2B,IAAvB2qB,EAAY7wB,QAAgB+L,EAAU/P,QAAQ60B,EAAY,MAC1DA,EAAcA,EAAY,IAEvB,SAAU5rB,GAAU,OAAOA,EAAOH,KAAK,IAAIm4B,EAA0BpM,GAAe,CAC/F,EAeAzzB,EAAQ2wB,wBAZR,WAEI,IADA,IAAI8C,EAAc,GACT3qB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC2qB,EAAY3qB,EAAK,GAAKjF,UAAUiF;AAEpC,IAAIjB,EAAS;AAKb,OAJ2B,IAAvB4rB,EAAY7wB,QAAgB+L,EAAU/P,QAAQ60B,EAAY,MAC1DA,EAAcA,EAAY,IAE9B5rB,EAAS4rB,EAAY1S,QACd,IAAIoP,EAAiB3K,eAAe3d,EAAQ,MAAMH,KAAK,IAAIm4B,EAA0BpM,GAChG;AAEA,IAAIoM,EAA6B,WAC7B,SAASA,EAA0BpM,GAC/Bj0B,KAAKi0B,YAAcA,CACvB,CAIA,OAHAoM,EAA0Bv8B,UAAUiB,KAAO,SAAUN,EAAY4D,GAC7D,OAAOA,EAAOL,UAAU,IAAIs4B,EAA4B77B,EAAYzE,KAAKi0B,aAC7E,EACOoM,CACX,CARgC,GAS5BC,EAA+B,SAAUn8B,GAEzC,SAASm8B,EAA4Bx2B,EAAamqB,GAC9C9vB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8J,YAAcA,EACnB9J,KAAKi0B,YAAcA,CACvB,CAsBA,OA3BAzwB,EAAU88B,EAA6Bn8B,GAMvCm8B,EAA4Bx8B,UAAUoC,YAAc,SAAU1G,EAAOqK,GACjE7J,KAAKugC,uBACT,EACAD,EAA4Bx8B,UAAUuC,eAAiB,SAAUwD,GAC7D7J,KAAKugC,uBACT,EACAD,EAA4Bx8B,UAAUmC,OAAS,SAAUuB,GACrDxH,KAAKugC,uBACT,EACAD,EAA4Bx8B,UAAUsC,UAAY,WAC9CpG,KAAKugC,uBACT,EACAD,EAA4Bx8B,UAAUy8B,sBAAwB,WAC1D,IAAIv9B,EAAOhD,KAAKi0B,YAAY1S;AACxBve,EACAhD,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMgD,IAGrDhD,KAAK8J,YAAYhF,UAEzB,EACOw7B,CACX,CA7BkC,CA6BhC1d,EAAkBlZ,gB;ACtIpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAuC3B/M,EAAQyZ,SAHR,WACI,OAAO,SAAU5R,GAAU,OAAOA,EAAOH,KAAK,IAAIs4B,EAAqB,CAC3E;AAEA,IAAIA,EAAoB,WACpB,SAASA,IACT,CAIA,OAHAA,EAAiB18B,UAAUiB,KAAO,SAAUN,EAAY4D,GACpD,OAAOA,EAAOL,UAAU,IAAIy4B,EAAmBh8B,GACnD,EACO+7B,CACX,CAPuB,GAanBC,EAAsB,SAAUt8B,GAEhC,SAASs8B,EAAmB32B,GACxB3F,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK0gC,SAAU,CACnB,CAUA,OAdAl9B,EAAUi9B,EAAoBt8B,GAK9Bs8B,EAAmB38B,UAAUiC,MAAQ,SAAU5F,GACvCH,KAAK0gC,QACL1gC,KAAK8J,YAAY9G,KAAK,CAAChD,KAAK2gC,KAAMxgC,IAGlCH,KAAK0gC,SAAU,EAEnB1gC,KAAK2gC,KAAOxgC,CAChB,EACOsgC,CACX,CAhByB,CAgBvBlzB,EAAajH,W;AC1Ef,IAAIs6B,EAAQ,EAAQ,OAChBvpB,EAAW,EAAQ;AAgDvB7W,EAAQ2Z,UANR,SAAmBwY,EAAWS,GAC1B,OAAO,SAAU/qB,GAAU,MAAO,CAC9BgP,EAASpW,OAAO0xB,EAAWS,EAA3B/b,CAAoChP,GACpCgP,EAASpW,OAAO2/B,EAAMC,IAAIlO,EAAWS,GAArC/b,CAA+ChP,GAChD,CACP,C;AChDA,IAAIsQ,EAAQ,EAAQ;AAuCpB,SAASmoB,EAAQC,EAAO39B,GAcpB,OAba,SAAUqG,GAEnB,IADA,IAAIu3B,EAAcv3B,EACTlG,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAC7B,IAAII,EAAIq9B,EAAYD,EAAMx9B;AAC1B,QAAiB,IAANI,EAIP;AAHAq9B,EAAcr9B,CAKtB,CACA,OAAOq9B,CACX,CAEJ,CAhBAxgC,EAAQ6Z,MAXR,WAEI,IADA,IAAI6Z,EAAa,GACR5qB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC4qB,EAAW5qB,EAAK,GAAKjF,UAAUiF;AAEnC,IAAIlG,EAAS8wB,EAAW9wB;AACxB,GAAe,IAAXA,EACA,MAAM,IAAIpE,MAAM;AAEpB,OAAO,SAAUqJ,GAAU,OAAOsQ,EAAMpZ,IAAIuhC,EAAQ5M,EAAY9wB,GAA9BuV,CAAuCtQ,EAAS,CACtF,C;ACrCA,IAAIrE,EAAY,EAAQ,OACpB6V,EAAc,EAAQ;AAoB1BrZ,EAAQ+Z,QALR,SAAiBmG,GACb,OAAOA,EACH7G,EAAYC,WAAU,WAAc,OAAO,IAAI9V,EAAUgB,OAAW,GAAG0b,GACvE7G,EAAYC,UAAU,IAAI9V,EAAUgB,QAC5C,C;ACpBA,IAAIi8B,EAAoB,EAAQ,OAC5BpnB,EAAc,EAAQ;AAU1BrZ,EAAQia,gBAHR,SAAyBta,GACrB,OAAO,SAAUkI,GAAU,OAAOwR,EAAYC,UAAU,IAAImnB,EAAkB/7B,gBAAgB/E,GAA5D0Z,CAAoExR,EAAS,CACnH,C;ACVA,IAAIkY,EAAiB,EAAQ,OACzB1G,EAAc,EAAQ;AAI1BrZ,EAAQma,YAHR,WACI,OAAO,SAAUtS,GAAU,OAAOwR,EAAYC,UAAU,IAAIyG,EAAerc,aAAzC2V,CAAyDxR,EAAS,CACxG,C;ACJA,IAAIwmB,EAAkB,EAAQ,OAC1BhV,EAAc,EAAQ;AAU1BrZ,EAAQqa,cARR,SAAuB1Q,EAAYC,EAAY+pB,EAAqB9pB,GAC5D8pB,GAAsD,mBAAxBA,IAC9B9pB,EAAY8pB;AAEhB,IAAIzT,EAA0C,mBAAxByT,EAAqCA,OAAsB1sB,EAC7EgG,EAAU,IAAIohB,EAAgB3kB,cAAcC,EAAYC,EAAYC;AACxE,OAAO,SAAUhC,GAAU,OAAOwR,EAAYC,WAAU,WAAc,OAAOrM,CAAS,GAAGiT,EAAvD7G,CAAiExR,EAAS,CAChH,C;ACVA,IAAI8G,EAAY,EAAQ,OACpB+D,EAAS,EAAQ;AAwBrB1S,EAAQ2S,KAdR,WAEI,IADA,IAAIiX,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAO,SAA8BjB,GAMjC,OAH2B,IAAvB+hB,EAAYhnB,QAAgB+L,EAAU/P,QAAQgrB,EAAY,MAC1DA,EAAcA,EAAY,IAEvB/hB,EAAOH,KAAKnD,KAAKmO,EAAOC,KAAK/O,WAAM,EAAQ,CAACiE,GAAQ6H,OAAOka,IACtE,CACJ,C;ACxBA,IAAI1O,EAAS,EAAQ,OACjB+B,EAAa,EAAQ,MACrB7H,EAAmB,EAAQ,OAC3B7N,EAAS,EAAQ;AA+DrBvH,EAAQgQ,OAjBR,SAAgBsjB,EAAaC,GAMzB,OAAI1vB,UAAUjB,QAAU,EACb,SAAwCiF,GAC3C,OAAON,EAAOqB,KAAKsS,EAAOC,KAAKmY,EAAaC,GAAOtW,EAAWC,SAAS,GAAI9H,EAAiBC,eAAeke,GAApGhsB,CAA2GM,EACtH,EAEG,SAAgCA,GACnC,OAAON,EAAOqB,KAAKsS,EAAOC,MAAK,SAAUokB,EAAK5/B,EAAO+C,GACjD,OAAO4wB,EAAYiM,EAAK5/B,EAAO+C,EAAQ,EAC3C,IAAIua,EAAWC,SAAS,GAFjB3V,CAEqBM,EAChC,CACJ,C;ACjEA,IAAI7E,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAM3B/M,EAAQ0hB,SALR,WACI,OAAO,SAAkC7Z,GACrC,OAAOA,EAAOH,KAAK,IAAIsa,EAAiBna,GAC5C,CACJ;AAEA,IAAIma,EAAoB,WACpB,SAASA,EAAiBF,GACtBtiB,KAAKsiB,YAAcA,CACvB,CAWA,OAVAE,EAAiB1e,UAAUiB,KAAO,SAAUN,EAAY4D,GACpD,IAAIia,EAActiB,KAAKsiB;AACvBA,EAAYZ;AACZ,IAAIe,EAAa,IAAIF,EAAmB9d,EAAY6d,GAChD9c,EAAe6C,EAAOL,UAAUya;AAIpC,OAHKA,EAAWhd,SACZgd,EAAWV,WAAaO,EAAYR,WAEjCtc,CACX,EACOgd,CACX,CAfuB,GAgBnBD,EAAsB,SAAUpe,GAEhC,SAASoe,EAAmBzY,EAAawY,GACrCne,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKsiB,YAAcA,CACvB,CAgDA,OApDA9e,EAAU+e,EAAoBpe,GAKOoe,EAAmBze,UAAUmL,aAAe,WAC7E,IAAIqT,EAActiB,KAAKsiB;AACvB,GAAKA,EAAL,CAIAtiB,KAAKsiB,YAAc;AACnB,IAAIJ,EAAWI,EAAYZ;AAC3B,GAAIQ,GAAY,EACZliB,KAAK+hB,WAAa;KAItB,GADAO,EAAYZ,UAAYQ,EAAW,EAC/BA,EAAW,EACXliB,KAAK+hB,WAAa;IADtB,CA2BA,IAAIA,EAAa/hB,KAAK+hB,WAClBW,EAAmBJ,EAAYN;AACnChiB,KAAK+hB,WAAa,MACdW,GAAsBX,GAAcW,IAAqBX,GACzDW,EAAiBvc,aA5BrB,CAXA,MAFInG,KAAK+hB,WAAa,IA2C1B,EACOQ,CACX,CAtDyB,CAsDvBhV,EAAajH,W;AClFf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBqS,EAAoB,EAAQ;AA2BhCpf,EAAQuB,OAdR,SAAgBJ,GAEZ,YADc,IAAVA,IAAoBA,GAAS,GAC1B,SAAU0G,GACb,OAAc,IAAV1G,EACO,IAAIie,EAAkBG,gBAExBpe,EAAQ,EACN0G,EAAOH,KAAK,IAAIg5B,GAAgB,EAAG74B,IAGnCA,EAAOH,KAAK,IAAIg5B,EAAev/B,EAAQ,EAAG0G,GAEzD,CACJ;AAEA,IAAI64B,EAAkB,WAClB,SAASA,EAAev/B,EAAO0G,GAC3BrI,KAAK2B,MAAQA,EACb3B,KAAKqI,OAASA,CAClB,CAIA,OAHA64B,EAAep9B,UAAUiB,KAAO,SAAUN,EAAY4D,GAClD,OAAOA,EAAOL,UAAU,IAAIm5B,EAAiB18B,EAAYzE,KAAK2B,MAAO3B,KAAKqI,QAC9E,EACO64B,CACX,CATqB,GAejBC,EAAoB,SAAUh9B,GAE9B,SAASg9B,EAAiBr3B,EAAanI,EAAO0G,GAC1ClE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2B,MAAQA,EACb3B,KAAKqI,OAASA,CAClB,CAaA,OAlBA7E,EAAU29B,EAAkBh9B,GAM5Bg9B,EAAiBr9B,UAAUgB,SAAW,WAClC,IAAK9E,KAAK8K,UAAW,CACjB,IAAezC,EAANrI,KAAkBqI,OAAQ1G,EAA1B3B,KAAqC2B;AAC9C,GAAc,IAAVA,EACA,OAAOwC,EAAOL,UAAUgB,SAASC,KAAK/E;AAEjC2B,GAAS,IACd3B,KAAK2B,MAAQA,EAAQ,GAEzB0G,EAAOL,UAAUhI,KAAKqO,yBAC1B,CACJ,EACO8yB,CACX,CApBuB,CAoBrB5zB,EAAajH,W;ACrEf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBqL,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBsT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAkBlCniB,EAAQya,WAHR,SAAoBqZ,GAChB,OAAO,SAAUjsB,GAAU,OAAOA,EAAOH,KAAK,IAAIk5B,EAAmB9M,GAAY,CACrF;AAEA,IAAI8M,EAAsB,WACtB,SAASA,EAAmB9M,GACxBt0B,KAAKs0B,SAAWA,CACpB,CAIA,OAHA8M,EAAmBt9B,UAAUiB,KAAO,SAAUN,EAAY4D,GACtD,OAAOA,EAAOL,UAAU,IAAIq5B,EAAqB58B,EAAYzE,KAAKs0B,SAAUjsB,GAChF,EACO+4B,CACX,CARyB,GAcrBC,EAAwB,SAAUl9B,GAElC,SAASk9B,EAAqBv3B,EAAawqB,EAAUjsB,GACjDlE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKs0B,SAAWA,EAChBt0B,KAAKqI,OAASA,EACdrI,KAAKshC,2BAA4B,CACrC,CAuDA,OA7DA99B,EAAU69B,EAAsBl9B,GAOhCk9B,EAAqBv9B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAClG7J,KAAKshC,2BAA4B,EACjCthC,KAAKqI,OAAOL,UAAUhI,KAC1B,EACAqhC,EAAqBv9B,UAAUuC,eAAiB,SAAUwD,GACtD,IAAuC,IAAnC7J,KAAKshC,0BACL,OAAOn9B,EAAOL,UAAUgB,SAASC,KAAK/E,KAE9C,EACAqhC,EAAqBv9B,UAAUgB,SAAW,WAEtC,GADA9E,KAAKshC,2BAA4B,GAC5BthC,KAAK8K,UAAW,CAIjB,GAHK9K,KAAKuhC,SACNvhC,KAAKwhC,sBAEJxhC,KAAKyhC,qBAAuBzhC,KAAKyhC,oBAAoBh8B,OACtD,OAAOtB,EAAOL,UAAUgB,SAASC,KAAK/E;AAE1CA,KAAKqO,yBACLrO,KAAK0hC,cAAc1+B,MACvB,CACJ,EACqCq+B,EAAqBv9B,UAAUmL,aAAe,WAC/E,IAAeyyB,EAAN1hC,KAAyB0hC,cAAeD,EAAxCzhC,KAAiEyhC;AACtEC,IACAA,EAAcv7B,cACdnG,KAAK0hC,cAAgB,MAErBD,IACAA,EAAoBt7B,cACpBnG,KAAKyhC,oBAAsB,MAE/BzhC,KAAKuhC,QAAU,IACnB,EACqCF,EAAqBv9B,UAAUuK,uBAAyB,WACzF,IAAIqB,EAAK1P,KAAM0hC,EAAgBhyB,EAAGgyB,cAAeH,EAAU7xB,EAAG6xB,QAASE,EAAsB/xB,EAAG+xB;AAQhG,OAPAzhC,KAAK0hC,cAAgB,KACrB1hC,KAAKuhC,QAAU,KACfvhC,KAAKyhC,oBAAsB,KAC3Bt9B,EAAOL,UAAUuK,uBAAuBtJ,KAAK/E,MAC7CA,KAAK0hC,cAAgBA,EACrB1hC,KAAKuhC,QAAUA,EACfvhC,KAAKyhC,oBAAsBA,EACpBzhC,IACX,EACAqhC,EAAqBv9B,UAAU09B,mBAAqB,WAChDxhC,KAAK0hC,cAAgB,IAAI19B,EAAUgB;AACnC,IAAIu8B,EAAUlyB,EAAWO,SAAS5P,KAAKs0B,SAAzBjlB,CAAmCrP,KAAK0hC;AACtD,GAAIH,IAAYjyB,EAAcO,YAC1B,OAAO1L,EAAOL,UAAUgB,SAASC,KAAK/E;AAE1CA,KAAKuhC,QAAUA,EACfvhC,KAAKyhC,oBAAsB9e,EAAoBQ,kBAAkBnjB,KAAMuhC,EAC3E,EACOF,CACX,CA/D2B,CA+DzBze,EAAkBlZ,gB;ACzGpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAqB3B/M,EAAQ2a,MAJR,SAAexZ,GAEX,YADc,IAAVA,IAAoBA,GAAS,GAC1B,SAAU0G,GAAU,OAAOA,EAAOH,KAAK,IAAIy5B,EAAchgC,EAAO0G,GAAU,CACrF;AAEA,IAAIs5B,EAAiB,WACjB,SAASA,EAAchgC,EAAO0G,GAC1BrI,KAAK2B,MAAQA,EACb3B,KAAKqI,OAASA,CAClB,CAIA,OAHAs5B,EAAc79B,UAAUiB,KAAO,SAAUN,EAAY4D,GACjD,OAAOA,EAAOL,UAAU,IAAI45B,EAAgBn9B,EAAYzE,KAAK2B,MAAO3B,KAAKqI,QAC7E,EACOs5B,CACX,CAToB,GAehBC,EAAmB,SAAUz9B,GAE7B,SAASy9B,EAAgB93B,EAAanI,EAAO0G,GACzClE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2B,MAAQA,EACb3B,KAAKqI,OAASA,CAClB,CAaA,OAlBA7E,EAAUo+B,EAAiBz9B,GAM3By9B,EAAgB99B,UAAUtE,MAAQ,SAAUgI,GACxC,IAAKxH,KAAK8K,UAAW,CACjB,IAAezC,EAANrI,KAAkBqI,OAAQ1G,EAA1B3B,KAAqC2B;AAC9C,GAAc,IAAVA,EACA,OAAOwC,EAAOL,UAAUtE,MAAMuF,KAAK/E,KAAMwH;AAEpC7F,GAAS,IACd3B,KAAK2B,MAAQA,EAAQ,GAEzB0G,EAAOL,UAAUhI,KAAKqO,yBAC1B,CACJ,EACOuzB,CACX,CApBsB,CAoBpBr0B,EAAajH,W;AC9Df,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBqL,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBsT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAkBlCniB,EAAQ6a,UAHR,SAAmBiZ,GACf,OAAO,SAAUjsB,GAAU,OAAOA,EAAOH,KAAK,IAAI25B,EAAkBvN,EAAUjsB,GAAU,CAC5F;AAEA,IAAIw5B,EAAqB,WACrB,SAASA,EAAkBvN,EAAUjsB,GACjCrI,KAAKs0B,SAAWA,EAChBt0B,KAAKqI,OAASA,CAClB,CAIA,OAHAw5B,EAAkB/9B,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAI85B,EAAoBr9B,EAAYzE,KAAKs0B,SAAUt0B,KAAKqI,QACpF,EACOw5B,CACX,CATwB,GAepBC,EAAuB,SAAU39B,GAEjC,SAAS29B,EAAoBh4B,EAAawqB,EAAUjsB,GAChDlE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKs0B,SAAWA,EAChBt0B,KAAKqI,OAASA,CAClB,CAgDA,OArDA7E,EAAUs+B,EAAqB39B,GAM/B29B,EAAoBh+B,UAAUtE,MAAQ,SAAUgI,GAC5C,IAAKxH,KAAK8K,UAAW,CACjB,IAAI5L,EAASc,KAAKd,OACdqiC,EAAUvhC,KAAKuhC,QACfE,EAAsBzhC,KAAKyhC;AAC/B,GAAKF,EASDvhC,KAAKd,OAAS,KACdc,KAAKyhC,oBAAsB;IAVjB,CAGV,GAFAviC,EAAS,IAAI8E,EAAUgB,SACvBu8B,EAAUlyB,EAAWO,SAAS5P,KAAKs0B,SAAzBjlB,CAAmCnQ,MAC7BoQ,EAAcO,YAC1B,OAAO1L,EAAOL,UAAUtE,MAAMuF,KAAK/E,KAAMsP,EAAcO,YAAYC;AAEvE2xB,EAAsB9e,EAAoBQ,kBAAkBnjB,KAAMuhC,EACtE,CAKAvhC,KAAKqO,yBACLrO,KAAKd,OAASA,EACdc,KAAKuhC,QAAUA,EACfvhC,KAAKyhC,oBAAsBA,EAC3BviC,EAAO8D,KAAKwE,EAChB,CACJ,EACqCs6B,EAAoBh+B,UAAUmL,aAAe,WAC9E,IAAe/P,EAANc,KAAkBd,OAAQuiC,EAA1BzhC,KAAmDyhC;AACxDviC,IACAA,EAAOiH,cACPnG,KAAKd,OAAS,MAEduiC,IACAA,EAAoBt7B,cACpBnG,KAAKyhC,oBAAsB,MAE/BzhC,KAAKuhC,QAAU,IACnB,EACAO,EAAoBh+B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACjG,IAAI6F,EAAK1P,KAAMd,EAASwQ,EAAGxQ,OAAQqiC,EAAU7xB,EAAG6xB,QAASE,EAAsB/xB,EAAG+xB;AAClFzhC,KAAKd,OAAS,KACdc,KAAKuhC,QAAU,KACfvhC,KAAKyhC,oBAAsB,KAC3BzhC,KAAKqO,yBACLrO,KAAKd,OAASA,EACdc,KAAKuhC,QAAUA,EACfvhC,KAAKyhC,oBAAsBA,EAC3BzhC,KAAKqI,OAAOL,UAAUhI,KAC1B,EACO8hC,CACX,CAvD0B,CAuDxBlf,EAAkBlZ,gB;AClGpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAsClCniB,EAAQ+a,OAHR,SAAgB+Y,GACZ,OAAO,SAAUjsB,GAAU,OAAOA,EAAOH,KAAK,IAAI65B,EAAezN,GAAY,CACjF;AAEA,IAAIyN,EAAkB,WAClB,SAASA,EAAezN,GACpBt0B,KAAKs0B,SAAWA,CACpB,CAOA,OANAyN,EAAej+B,UAAUiB,KAAO,SAAUN,EAAY4D,GAClD,IAAI25B,EAAmB,IAAIC,EAAiBx9B,GACxCe,EAAe6C,EAAOL,UAAUg6B;AAEpC,OADAx8B,EAAaiD,IAAIka,EAAoBQ,kBAAkB6e,EAAkBhiC,KAAKs0B,WACvE9uB,CACX,EACOu8B,CACX,CAXqB,GAiBjBE,EAAoB,SAAU99B,GAE9B,SAAS89B,IACL99B,EAAOC,MAAMpE,KAAMqE,WACnBrE,KAAK0G,UAAW,CACpB,CAiBA,OArBAlD,EAAUy+B,EAAkB99B,GAK5B89B,EAAiBn+B,UAAUiC,MAAQ,SAAU5F,GACzCH,KAAKG,MAAQA,EACbH,KAAK0G,UAAW,CACpB,EACAu7B,EAAiBn+B,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC9F7J,KAAK44B,WACT,EACAqJ,EAAiBn+B,UAAUuC,eAAiB,WACxCrG,KAAK44B,WACT,EACAqJ,EAAiBn+B,UAAU80B,UAAY,WAC/B54B,KAAK0G,WACL1G,KAAK0G,UAAW,EAChB1G,KAAK8J,YAAY9G,KAAKhD,KAAKG,OAEnC,EACO8hC,CACX,CAvBuB,CAuBrBrf,EAAkBlZ,gB;ACrFpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBd,EAAU,EAAQ;AAyCtBjM,EAAQib,WAJR,SAAoB6L,EAAQjd,GAExB,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzC,SAAUqG,GAAU,OAAOA,EAAOH,KAAK,IAAIg6B,EAAmB5a,EAAQjd,GAAa,CAC9F;AAEA,IAAI63B,EAAsB,WACtB,SAASA,EAAmB5a,EAAQjd,GAChCrK,KAAKsnB,OAASA,EACdtnB,KAAKqK,UAAYA,CACrB,CAIA,OAHA63B,EAAmBp+B,UAAUiB,KAAO,SAAUN,EAAY4D,GACtD,OAAOA,EAAOL,UAAU,IAAIm6B,EAAqB19B,EAAYzE,KAAKsnB,OAAQtnB,KAAKqK,WACnF,EACO63B,CACX,CATyB,GAerBC,EAAwB,SAAUh+B,GAElC,SAASg+B,EAAqBr4B,EAAawd,EAAQjd,GAC/ClG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKsnB,OAASA,EACdtnB,KAAKqK,UAAYA,EACjBrK,KAAK0G,UAAW,EAChB1G,KAAKyI,IAAI4B,EAAU6C,SAASk1B,EAAsB9a,EAAQ,CAAE7iB,WAAYzE,KAAMsnB,OAAQA,IAC1F,CAWA,OAlBA9jB,EAAU2+B,EAAsBh+B,GAQhCg+B,EAAqBr+B,UAAUiC,MAAQ,SAAU5F,GAC7CH,KAAKg5B,UAAY74B,EACjBH,KAAK0G,UAAW,CACpB,EACAy7B,EAAqBr+B,UAAUkC,WAAa,WACpChG,KAAK0G,WACL1G,KAAK0G,UAAW,EAChB1G,KAAK8J,YAAY9G,KAAKhD,KAAKg5B,WAEnC,EACOmJ,CACX,CApB2B,CAoBzB50B,EAAajH;AACf,SAAS87B,EAAqB/0B,GAC1B,IAAI5I,EAAa4I,EAAM5I,WAAY6iB,EAASja,EAAMia;AAClD7iB,EAAWuB,aACXhG,KAAKkN,SAASG,EAAOia,EACzB,C;ACxFA,IAAI9jB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAqD3B/M,EAAQmb,KAdR,SAAcmY,EAAaC,GACvB,IAAIsO,GAAU;AASd,OAHIh+B,UAAUjB,QAAU,IACpBi/B,GAAU,GAEP,SAA8Bh6B,GACjC,OAAOA,EAAOH,KAAK,IAAIo6B,EAAaxO,EAAaC,EAAMsO,GAC3D,CACJ;AAEA,IAAIC,EAAgB,WAChB,SAASA,EAAaxO,EAAaC,EAAMsO,QACrB,IAAZA,IAAsBA,GAAU,GACpCriC,KAAK8zB,YAAcA,EACnB9zB,KAAK+zB,KAAOA,EACZ/zB,KAAKqiC,QAAUA,CACnB,CAIA,OAHAC,EAAax+B,UAAUiB,KAAO,SAAUN,EAAY4D,GAChD,OAAOA,EAAOL,UAAU,IAAIu6B,EAAe99B,EAAYzE,KAAK8zB,YAAa9zB,KAAK+zB,KAAM/zB,KAAKqiC,SAC7F,EACOC,CACX,CAXmB,GAiBfC,EAAkB,SAAUp+B,GAE5B,SAASo+B,EAAez4B,EAAagqB,EAAa0O,EAAOH,GACrDl+B,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8zB,YAAcA,EACnB9zB,KAAKwiC,MAAQA,EACbxiC,KAAKqiC,QAAUA,EACfriC,KAAKkD,MAAQ,CACjB,CAiCA,OAxCAM,EAAU++B,EAAgBp+B,GAQ1B1E,OAAOS,eAAeqiC,EAAez+B,UAAW,OAAQ,CACpDsB,IAAK,WACD,OAAOpF,KAAKwiC,KAChB,EACAtE,IAAK,SAAU/9B,GACXH,KAAKqiC,SAAU,EACfriC,KAAKwiC,MAAQriC,CACjB,EACAmF,YAAY,EACZC,cAAc,IAElBg9B,EAAez+B,UAAUiC,MAAQ,SAAU5F,GACvC,GAAKH,KAAKqiC,QAKN,OAAOriC,KAAK24B,SAASx4B;AAJrBH,KAAK+zB,KAAO5zB,EACZH,KAAK8J,YAAY9G,KAAK7C,EAK9B,EACAoiC,EAAez+B,UAAU60B,SAAW,SAAUx4B,GAC1C,IACIwC,EADAO,EAAQlD,KAAKkD;AAEjB,IACIP,EAAS3C,KAAK8zB,YAAY9zB,KAAK+zB,KAAM5zB,EAAO+C,EAIhD,CAFA,MAAOsE,GACHxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,CACAxH,KAAK+zB,KAAOpxB,EACZ3C,KAAK8J,YAAY9G,KAAKL,EAC1B,EACO4/B,CACX,CA1CqB,CA0CnBh1B,EAAajH,W;ACtHf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvB8B,EAAa,EAAQ,OACrBC,EAAgB,EAAQ;AAwD5B9O,EAAQqb,cAHR,SAAuB0Y,EAAWC,GAC9B,OAAO,SAAUnsB,GAAU,OAAOA,EAAOH,KAAK,IAAIu6B,EAAsBlO,EAAWC,GAAY,CACnG;AAEA,IAAIiO,EAAyB,WACzB,SAASA,EAAsBlO,EAAWC,GACtCx0B,KAAKu0B,UAAYA,EACjBv0B,KAAKw0B,SAAWA,CACpB,CAIA,OAHAiO,EAAsB3+B,UAAUiB,KAAO,SAAUN,EAAY4D,GACzD,OAAOA,EAAOL,UAAU,IAAI06B,EAAwBj+B,EAAYzE,KAAKu0B,UAAWv0B,KAAKw0B,UACzF,EACOiO,CACX,CAT4B;AAU5BjiC,EAAQiiC,sBAAwBA;AAMhC,IAAIC,EAA2B,SAAUv+B,GAErC,SAASu+B,EAAwB54B,EAAayqB,EAAWC,GACrDrwB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKu0B,UAAYA,EACjBv0B,KAAKw0B,SAAWA,EAChBx0B,KAAK0P,GAAK,GACV1P,KAAK6sB,GAAK,GACV7sB,KAAK2iC,cAAe,EACpB3iC,KAAKyI,IAAI8rB,EAAUvsB,UAAU,IAAI46B,EAAiC94B,EAAa9J,OACnF,CAoDA,OA7DAwD,EAAUk/B,EAAyBv+B,GAUnCu+B,EAAwB5+B,UAAUiC,MAAQ,SAAU5F,GAC5CH,KAAK2iC,cAAmC,IAAnB3iC,KAAK6sB,GAAGzpB,OAC7BpD,KAAK6iC,MAAK,IAGV7iC,KAAK0P,GAAGpM,KAAKnD,GACbH,KAAK8iC,cAEb,EACAJ,EAAwB5+B,UAAUsC,UAAY,WACtCpG,KAAK2iC,aACL3iC,KAAK6iC,KAAwB,IAAnB7iC,KAAK0P,GAAGtM,QAAmC,IAAnBpD,KAAK6sB,GAAGzpB,QAG1CpD,KAAK2iC,cAAe,CAE5B,EACAD,EAAwB5+B,UAAUg/B,YAAc,WAE5C,IADA,IAAIC,EAAK/iC,KAAM0P,EAAKqzB,EAAGrzB,GAAImd,EAAKkW,EAAGlW,GAAI2H,EAAWuO,EAAGvO,SAC9C9kB,EAAGtM,OAAS,GAAKypB,EAAGzpB,OAAS,GAAG,CACnC,IAAI4/B,EAAItzB,EAAG6R,QACP7d,EAAImpB,EAAGtL,QACP0hB,GAAW;AACXzO,GACAyO,EAAW5zB,EAAWO,SAAS4kB,EAApBnlB,CAA8B2zB,EAAGt/B,MAC3B4L,EAAcO,aAC3B7P,KAAK8J,YAAYtK,MAAM8P,EAAcO,YAAYC,GAIrDmzB,EAAWD,IAAMt/B,EAEhBu/B,GACDjjC,KAAK6iC,MAAK,EAElB,CACJ,EACAH,EAAwB5+B,UAAU++B,KAAO,SAAU1iC,GAC/C,IAAI2J,EAAc9J,KAAK8J;AACvBA,EAAY9G,KAAK7C,GACjB2J,EAAYhF,UAChB,EACA49B,EAAwB5+B,UAAUo/B,MAAQ,SAAU/iC,GAC5CH,KAAK2iC,cAAmC,IAAnB3iC,KAAK0P,GAAGtM,OAC7BpD,KAAK6iC,MAAK,IAGV7iC,KAAK6sB,GAAGvpB,KAAKnD,GACbH,KAAK8iC,cAEb,EACOJ,CACX,CA/D8B,CA+D5Bn1B,EAAajH;AACf9F,EAAQkiC,wBAA0BA;AAClC,IAAIE,EAAoC,SAAUz+B,GAE9C,SAASy+B,EAAiC94B,EAAalE,GACnDzB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK4F,OAASA,CAClB,CAUA,OAdApC,EAAUo/B,EAAkCz+B,GAK5Cy+B,EAAiC9+B,UAAUiC,MAAQ,SAAU5F,GACzDH,KAAK4F,OAAOs9B,MAAM/iC,EACtB,EACAyiC,EAAiC9+B,UAAUmC,OAAS,SAAUuB,GAC1DxH,KAAK4F,OAAOpG,MAAMgI,EACtB,EACAo7B,EAAiC9+B,UAAUsC,UAAY,WACnDpG,KAAK4F,OAAOQ,WAChB,EACOw8B,CACX,CAhBuC,CAgBrCr1B,EAAajH,W;ACjKf,IAAIuT,EAAc,EAAQ,OACtB2H,EAAa,EAAQ,OACrBxd,EAAY,EAAQ;AACxB,SAASm/B,IACL,OAAO,IAAIn/B,EAAUgB,OACzB,CAgBAxE,EAAQub,MAHR,WACI,OAAO,SAAU1T,GAAU,OAAOmZ,EAAWU,UAAXV,CAAsB3H,EAAYC,UAAUqpB,EAAtBtpB,CAA2CxR,GAAU,CACjH,C;ACpBA,IAAIwmB,EAAkB,EAAQ;AAQ9BruB,EAAQyb,YAHR,SAAqB9R,EAAYC,EAAYC,GACzC,OAAO,SAAUhC,GAAU,OAAOA,EAAOH,KAG7C,SAA6BiC,EAAYC,EAAYC,GACjD,IAAIoD,EAEAjI,EADA0c,EAAW,EAEXxd,GAAW,EACX0+B,GAAa;AACjB,OAAO,SAA8B/6B,GACjC6Z,IACKzU,IAAW/I,IACZA,GAAW,EACX+I,EAAU,IAAIohB,EAAgB3kB,cAAcC,EAAYC,EAAYC,GACpE7E,EAAe6C,EAAOL,UAAU,CAC5BhF,KAAM,SAAU7C,GAASsN,EAAQzK,KAAK7C,EAAQ,EAC9CX,MAAO,SAAUgI,GACb9C,GAAW,EACX+I,EAAQjO,MAAMgI,EAClB,EACA1C,SAAU,WACNs+B,GAAa,EACb31B,EAAQ3I,UACZ;AAGR,IAAI+E,EAAW4D,EAAQzF,UAAUhI;AACjC,OAAO,WACHkiB,IACArY,EAAS1D,cACLX,GAA6B,IAAb0c,GAAkBkhB,GAClC59B,EAAaW,aAErB,CACJ,CACJ,CAnCkDk9B,CAAoBl5B,EAAYC,EAAYC,GAAa,CAC3G,C;ACPA,IAAI7G,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvB0vB,EAAe,EAAQ;AAoB3Bz8B,EAAQ2b,OAHR,SAAgBwW,GACZ,OAAO,SAAUtqB,GAAU,OAAOA,EAAOH,KAAK,IAAIo7B,EAAe3Q,EAAWtqB,GAAU,CAC1F;AAEA,IAAIi7B,EAAkB,WAClB,SAASA,EAAe3Q,EAAWtqB,GAC/BrI,KAAK2yB,UAAYA,EACjB3yB,KAAKqI,OAASA,CAClB,CAIA,OAHAi7B,EAAex/B,UAAUiB,KAAO,SAAUN,EAAY4D,GAClD,OAAOA,EAAOL,UAAU,IAAIu7B,EAAiB9+B,EAAYzE,KAAK2yB,UAAW3yB,KAAKqI,QAClF,EACOi7B,CACX,CATqB,GAejBC,EAAoB,SAAUp/B,GAE9B,SAASo/B,EAAiBz5B,EAAa6oB,EAAWtqB,GAC9ClE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKqI,OAASA,EACdrI,KAAKwjC,WAAY,EACjBxjC,KAAKkD,MAAQ,CACjB,CAuCA,OA9CAM,EAAU+/B,EAAkBp/B,GAQ5Bo/B,EAAiBz/B,UAAU2/B,iBAAmB,SAAUtjC,GAChDH,KAAKwjC,UACLxjC,KAAK8J,YAAYtK,MAAM,4CAGvBQ,KAAKwjC,WAAY,EACjBxjC,KAAK0jC,YAAcvjC,EAE3B,EACAojC,EAAiBz/B,UAAUiC,MAAQ,SAAU5F,GACzC,IAAI+C,EAAQlD,KAAKkD;AACblD,KAAK2yB,UACL3yB,KAAKq8B,QAAQl8B,EAAO+C,GAGpBlD,KAAKyjC,iBAAiBtjC,EAE9B,EACAojC,EAAiBz/B,UAAUu4B,QAAU,SAAUl8B,EAAO+C,GAClD,IACQlD,KAAK2yB,UAAUxyB,EAAO+C,EAAOlD,KAAKqI,SAClCrI,KAAKyjC,iBAAiBtjC,EAK9B,CAFA,MAAOqH,GACHxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,CACJ,EACA+7B,EAAiBz/B,UAAUsC,UAAY,WACnC,IAAI0D,EAAc9J,KAAK8J;AACnB9J,KAAKkD,MAAQ,GACb4G,EAAY9G,KAAKhD,KAAKwjC,UAAYxjC,KAAK0jC,iBAAcj8B,GACrDqC,EAAYhF,YAGZgF,EAAYtK,MAAM,IAAIy9B,EAAarxB,WAE3C,EACO23B,CACX,CAhDuB,CAgDrBh2B,EAAajH,W;AC1Ff,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAe3B/M,EAAQ6b,KAHR,SAAc1a,GACV,OAAO,SAAU0G,GAAU,OAAOA,EAAOH,KAAK,IAAIy7B,EAAahiC,GAAS,CAC5E;AAEA,IAAIgiC,EAAgB,WAChB,SAASA,EAAahgB,GAClB3jB,KAAK2jB,MAAQA,CACjB,CAIA,OAHAggB,EAAa7/B,UAAUiB,KAAO,SAAUN,EAAY4D,GAChD,OAAOA,EAAOL,UAAU,IAAI47B,EAAen/B,EAAYzE,KAAK2jB,OAChE,EACOggB,CACX,CARmB,GAcfC,EAAkB,SAAUz/B,GAE5B,SAASy/B,EAAe95B,EAAa6Z,GACjCxf,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2jB,MAAQA,EACb3jB,KAAK2B,MAAQ,CACjB,CAMA,OAXA6B,EAAUogC,EAAgBz/B,GAM1By/B,EAAe9/B,UAAUiC,MAAQ,SAAU0D,KACjCzJ,KAAK2B,MAAQ3B,KAAK2jB,OACpB3jB,KAAK8J,YAAY9G,KAAKyG,EAE9B,EACOm6B,CACX,CAbqB,CAanBr2B,EAAajH,W;AChDf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBmuB,EAA4B,EAAQ;AAoCxCl7B,EAAQ+b,SAHR,SAAkB5a,GACd,OAAO,SAAU0G,GAAU,OAAOA,EAAOH,KAAK,IAAI27B,EAAiBliC,GAAS,CAChF;AAEA,IAAIkiC,EAAoB,WACpB,SAASA,EAAiBC,GAEtB,GADA9jC,KAAK8jC,WAAaA,EACd9jC,KAAK8jC,WAAa,EAClB,MAAM,IAAIpI,EAA0B7vB,uBAE5C,CAWA,OAVAg4B,EAAiB//B,UAAUiB,KAAO,SAAUN,EAAY4D,GACpD,OAAwB,IAApBrI,KAAK8jC,WAGEz7B,EAAOL,UAAU,IAAIuF,EAAajH,WAAW7B,IAG7C4D,EAAOL,UAAU,IAAI+7B,EAAmBt/B,EAAYzE,KAAK8jC,YAExE,EACOD,CACX,CAlBuB,GAwBnBE,EAAsB,SAAU5/B,GAEhC,SAAS4/B,EAAmBj6B,EAAag6B,GACrC3/B,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8jC,WAAaA,EAClB9jC,KAAKqpB,OAAS,EACdrpB,KAAKgkC,MAAQ,IAAI7kC,MAAM2kC,EAC3B,CAeA,OArBAtgC,EAAUugC,EAAoB5/B,GAO9B4/B,EAAmBjgC,UAAUiC,MAAQ,SAAU5F,GAC3C,IAAI8jC,EAAYjkC,KAAK8jC,WACjBniC,EAAQ3B,KAAKqpB;AACjB,GAAI1nB,EAAQsiC,EACRjkC,KAAKgkC,MAAMriC,GAASxB;IAEnB,CACD,IAAI4C,EAAepB,EAAQsiC,EACvBC,EAAOlkC,KAAKgkC,MACZG,EAAWD,EAAKnhC;AACpBmhC,EAAKnhC,GAAgB5C,EACrBH,KAAK8J,YAAY9G,KAAKmhC,EAC1B,CACJ,EACOJ,CACX,CAvByB,CAuBvBx2B,EAAajH,W;AC1Ff,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAgBlCniB,EAAQic,UAHR,SAAmB6X,GACf,OAAO,SAAUjsB,GAAU,OAAOA,EAAOH,KAAK,IAAIk8B,EAAkB9P,GAAY,CACpF;AAEA,IAAI8P,EAAqB,WACrB,SAASA,EAAkB9P,GACvBt0B,KAAKs0B,SAAWA,CACpB,CAIA,OAHA8P,EAAkBtgC,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAIq8B,EAAoB5/B,EAAYzE,KAAKs0B,UACrE,EACO8P,CACX,CARwB,GAcpBC,EAAuB,SAAUlgC,GAEjC,SAASkgC,EAAoBv6B,EAAawqB,GACtCnwB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK0G,UAAW,EAChB1G,KAAKskC,gBAAiB,EACtBtkC,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMs0B,GACzD,CAuBA,OA7BA9wB,EAAU6gC,EAAqBlgC,GAO/BkgC,EAAoBvgC,UAAUiC,MAAQ,SAAU5F,GACxCH,KAAK0G,UACLvC,EAAOL,UAAUiC,MAAMhB,KAAK/E,KAAMG,EAE1C,EACAkkC,EAAoBvgC,UAAUsC,UAAY,WAClCpG,KAAKskC,eACLngC,EAAOL,UAAUsC,UAAUrB,KAAK/E,MAGhCA,KAAKmG,aAEb,EACAk+B,EAAoBvgC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACjG7J,KAAK0G,UAAW,CACpB,EACA29B,EAAoBvgC,UAAUuC,eAAiB,WAC3CrG,KAAKskC,gBAAiB,EAClBtkC,KAAK8K,WACL3G,EAAOL,UAAUsC,UAAUrB,KAAK/E,KAExC,EACOqkC,CACX,CA/B0B,CA+BxBzhB,EAAkBlZ,gB;ACpEpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAgB3B/M,EAAQmc,UAHR,SAAmBgW,GACf,OAAO,SAAUtqB,GAAU,OAAOA,EAAOH,KAAK,IAAIq8B,EAAkB5R,GAAa,CACrF;AAEA,IAAI4R,EAAqB,WACrB,SAASA,EAAkB5R,GACvB3yB,KAAK2yB,UAAYA,CACrB,CAIA,OAHA4R,EAAkBzgC,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAIw8B,EAAoB//B,EAAYzE,KAAK2yB,WACrE,EACO4R,CACX,CARwB,GAcpBC,EAAuB,SAAUrgC,GAEjC,SAASqgC,EAAoB16B,EAAa6oB,GACtCxuB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKykC,UAAW,EAChBzkC,KAAKkD,MAAQ,CACjB,CAmBA,OAzBAM,EAAUghC,EAAqBrgC,GAO/BqgC,EAAoB1gC,UAAUiC,MAAQ,SAAU5F,GAC5C,IAAI2J,EAAc9J,KAAK8J;AACnB9J,KAAKykC,UACLzkC,KAAK0kC,iBAAiBvkC,GAErBH,KAAKykC,UACN36B,EAAY9G,KAAK7C,EAEzB,EACAqkC,EAAoB1gC,UAAU4gC,iBAAmB,SAAUvkC,GACvD,IACI,IAAIwC,EAAS3C,KAAK2yB,UAAUxyB,EAAOH,KAAKkD;AACxClD,KAAKykC,SAAWhJ,QAAQ94B,EAI5B,CAFA,MAAO6E,GACHxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,CACJ,EACOg9B,CACX,CA3B0B,CA2BxBj3B,EAAajH,W;AC/Df,IAAIwf,EAAoB,EAAQ,MAC5BnG,EAAqB,EAAQ,OAC7BC,EAAoB,EAAQ,OAC5B5O,EAAW,EAAQ,OACnBkP,EAAgB,EAAQ;AAyC5B1f,EAAQqc,UAzBR,WAEI,IADA,IAAIuD,EAAQ,GACH9W,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8W,EAAM9W,EAAK,GAAKjF,UAAUiF;AAE9B,OAAO,SAAUjB,GACb,IAAIgC,EAAY+V,EAAMA,EAAMhd,OAAS;AACjC8c,EAAcG,YAAYhW,GAC1B+V,EAAME,MAGNjW,EAAY;AAEhB,IAAIa,EAAMkV,EAAMhd;AAChB,OAAY,IAAR8H,EACO8F,EAASd,OAAO,IAAIyP,EAAmBK,iBAAiBI,EAAM,GAAI/V,GAAYhC,GAEhF6C,EAAM,EACJ8F,EAASd,OAAO,IAAI4V,EAAkB3F,gBAAgBC,EAAO/V,GAAYhC,GAGzE2I,EAASd,OAAO,IAAI0P,EAAkBG,gBAAgB1V,GAAYhC,EAEjF,CACJ,C;AC5CA,IAAIs8B,EAA0B,EAAQ;AAkBtCnkC,EAAQuc,YANR,SAAqB1S,EAAW+C,GAE5B,YADc,IAAVA,IAAoBA,EAAQ,GACzB,SAAqC/E,GACxC,OAAOA,EAAOH,KAAK,IAAI08B,EAAoBv6B,EAAW+C,GAC1D,CACJ;AAEA,IAAIw3B,EAAuB,WACvB,SAASA,EAAoBv6B,EAAW+C,GACpCpN,KAAKqK,UAAYA,EACjBrK,KAAKoN,MAAQA,CACjB,CAIA,OAHAw3B,EAAoB9gC,UAAUiB,KAAO,SAAUN,EAAY4D,GACvD,OAAO,IAAIs8B,EAAwBrb,sBAAsBjhB,EAAQrI,KAAKoN,MAAOpN,KAAKqK,WAAWrC,UAAUvD,EAC3G,EACOmgC,CACX,CAT0B,E;ACnB1B,IAAIznB,EAAc,EAAQ,OACtBkiB,EAAa,EAAQ;AAIzB7+B,EAAQk0B,UAHR,WACI,OAAOvX,EAAYC,UAAUiiB,EAAWC,SAC5C,C;ACJA,IAAI97B,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAsDlCniB,EAAQ4c,UALR,SAAmBiN,EAAS9G,GACxB,OAAO,SAAmClb,GACtC,OAAOA,EAAOH,KAAK,IAAI28B,EAAkBxa,EAAS9G,GACtD,CACJ;AAEA,IAAIshB,EAAqB,WACrB,SAASA,EAAkBxa,EAAS9G,GAChCvjB,KAAKqqB,QAAUA,EACfrqB,KAAKujB,eAAiBA,CAC1B,CAIA,OAHAshB,EAAkB/gC,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAI88B,EAAoBrgC,EAAYzE,KAAKqqB,QAASrqB,KAAKujB,gBACnF,EACOshB,CACX,CATwB,GAepBC,EAAuB,SAAU3gC,GAEjC,SAAS2gC,EAAoBh7B,EAAaugB,EAAS9G,GAC/Cpf,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqqB,QAAUA,EACfrqB,KAAKujB,eAAiBA,EACtBvjB,KAAKkD,MAAQ,CACjB,CAuDA,OA7DAM,EAAUshC,EAAqB3gC,GAO/B2gC,EAAoBhhC,UAAUiC,MAAQ,SAAU5F,GAC5C,IAAIwC,EACAO,EAAQlD,KAAKkD;AACjB,IACIP,EAAS3C,KAAKqqB,QAAQlqB,EAAO+C,EAKjC,CAHA,MAAO1D,GAEH,YADAQ,KAAK8J,YAAYtK,MAAMA,EAE3B,CACAQ,KAAKy/B,UAAU98B,EAAQxC,EAAO+C,EAClC,EACA4hC,EAAoBhhC,UAAU27B,UAAY,SAAU98B,EAAQxC,EAAO+C,GAC/D,IAAI2gB,EAAoB7jB,KAAK6jB;AACzBA,GACAA,EAAkB1d,cAEtBnG,KAAKyI,IAAIzI,KAAK6jB,kBAAoBlB,EAAoBQ,kBAAkBnjB,KAAM2C,EAAQxC,EAAO+C,GACjG,EACA4hC,EAAoBhhC,UAAUsC,UAAY,WACtC,IAAIyd,EAAoB7jB,KAAK6jB;AACxBA,IAAqBA,EAAkBpe,QACxCtB,EAAOL,UAAUsC,UAAUrB,KAAK/E,KAExC,EACqC8kC,EAAoBhhC,UAAUmL,aAAe,WAC9EjP,KAAK6jB,kBAAoB,IAC7B,EACAihB,EAAoBhhC,UAAUuC,eAAiB,SAAUwD,GACrD7J,KAAK2P,OAAO9F,GACZ7J,KAAK6jB,kBAAoB,KACrB7jB,KAAK8K,WACL3G,EAAOL,UAAUsC,UAAUrB,KAAK/E,KAExC,EACA8kC,EAAoBhhC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC7F7J,KAAKujB,eACLvjB,KAAK+kC,eAAel/B,EAAY8D,EAAY7D,EAAY8D,GAGxD5J,KAAK8J,YAAY9G,KAAK2G,EAE9B,EACAm7B,EAAoBhhC,UAAUihC,eAAiB,SAAUl/B,EAAY8D,EAAY7D,EAAY8D,GACzF,IAAIjH;AACJ,IACIA,EAAS3C,KAAKujB,eAAe1d,EAAY8D,EAAY7D,EAAY8D,EAKrE,CAHA,MAAOpC,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAK8J,YAAY9G,KAAKL,EAC1B,EACOmiC,CACX,CA/D0B,CA+DxBliB,EAAkBlZ,gB;AC3IpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AA+ClCniB,EAAQ8c,YAHR,SAAqBoV,EAAiBnP,GAClC,OAAO,SAAUlb,GAAU,OAAOA,EAAOH,KAAK,IAAI88B,EAAoBtS,EAAiBnP,GAAkB,CAC7G;AAEA,IAAIyhB,EAAuB,WACvB,SAASA,EAAoB58B,EAAYmb,GACrCvjB,KAAKoI,WAAaA,EAClBpI,KAAKujB,eAAiBA,CAC1B,CAIA,OAHAyhB,EAAoBlhC,UAAUiB,KAAO,SAAUN,EAAY4D,GACvD,OAAOA,EAAOL,UAAU,IAAIi9B,EAAsBxgC,EAAYzE,KAAKoI,WAAYpI,KAAKujB,gBACxF,EACOyhB,CACX,CAT0B,GAetBC,EAAyB,SAAU9gC,GAEnC,SAAS8gC,EAAsBn7B,EAAao7B,EAAO3hB,GAC/Cpf,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKklC,MAAQA,EACbllC,KAAKujB,eAAiBA,EACtBvjB,KAAKkD,MAAQ,CACjB,CA6CA,OAnDAM,EAAUyhC,EAAuB9gC,GAOjC8gC,EAAsBnhC,UAAUiC,MAAQ,SAAU5F,GAC9C,IAAI0jB,EAAoB7jB,KAAK6jB;AACzBA,GACAA,EAAkB1d,cAEtBnG,KAAKyI,IAAIzI,KAAK6jB,kBAAoBlB,EAAoBQ,kBAAkBnjB,KAAMA,KAAKklC,MAAO/kC,EAAOH,KAAKkD,SAC1G,EACA+hC,EAAsBnhC,UAAUsC,UAAY,WACxC,IAAIyd,EAAoB7jB,KAAK6jB;AACxBA,IAAqBA,EAAkBpe,QACxCtB,EAAOL,UAAUsC,UAAUrB,KAAK/E,KAExC,EACqCilC,EAAsBnhC,UAAUmL,aAAe,WAChFjP,KAAK6jB,kBAAoB,IAC7B,EACAohB,EAAsBnhC,UAAUuC,eAAiB,SAAUwD,GACvD7J,KAAK2P,OAAO9F,GACZ7J,KAAK6jB,kBAAoB,KACrB7jB,KAAK8K,WACL3G,EAAOL,UAAUsC,UAAUrB,KAAK/E,KAExC,EACAilC,EAAsBnhC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACnG,IAAe0Z,EAANvjB,KAA0BujB,eAAgBzZ,EAA1C9J,KAA2D8J;AAChEyZ,EACAvjB,KAAKmlC,kBAAkBt/B,EAAY8D,EAAY7D,EAAY8D,GAG3DE,EAAY9G,KAAK2G,EAEzB,EACAs7B,EAAsBnhC,UAAUqhC,kBAAoB,SAAUt/B,EAAY8D,EAAY7D,EAAY8D,GAC9F,IACIjH,EADW4gB,EAANvjB,KAA0BujB,eAAgBzZ,EAA1C9J,KAA2D8J;AAEpE,IACInH,EAAS4gB,EAAe1d,EAAY8D,EAAY7D,EAAY8D,EAKhE,CAHA,MAAOpC,GAEH,YADAsC,EAAYtK,MAAMgI,EAEtB,CACAsC,EAAY9G,KAAKL,EACrB,EACOsiC,CACX,CArD4B,CAqD1BriB,EAAkBlZ,gB;AC1HpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBmuB,EAA4B,EAAQ,OACpC9b,EAAoB,EAAQ;AA4ChCpf,EAAQgd,KAVR,SAAc7b,GACV,OAAO,SAAU0G,GACb,OAAc,IAAV1G,EACO,IAAIie,EAAkBG,gBAGtB1X,EAAOH,KAAK,IAAIk9B,EAAazjC,GAE5C,CACJ;AAEA,IAAIyjC,EAAgB,WAChB,SAASA,EAAazhB,GAElB,GADA3jB,KAAK2jB,MAAQA,EACT3jB,KAAK2jB,MAAQ,EACb,MAAM,IAAI+X,EAA0B7vB,uBAE5C,CAIA,OAHAu5B,EAAathC,UAAUiB,KAAO,SAAUN,EAAY4D,GAChD,OAAOA,EAAOL,UAAU,IAAIq9B,EAAe5gC,EAAYzE,KAAK2jB,OAChE,EACOyhB,CACX,CAXmB,GAiBfC,EAAkB,SAAUlhC,GAE5B,SAASkhC,EAAev7B,EAAa6Z,GACjCxf,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2jB,MAAQA,EACb3jB,KAAK2B,MAAQ,CACjB,CAYA,OAjBA6B,EAAU6hC,EAAgBlhC,GAM1BkhC,EAAevhC,UAAUiC,MAAQ,SAAU5F,GACvC,IAAIwjB,EAAQ3jB,KAAK2jB,MACbhiB,IAAU3B,KAAK2B;AACfA,GAASgiB,IACT3jB,KAAK8J,YAAY9G,KAAK7C,GAClBwB,IAAUgiB,IACV3jB,KAAK8J,YAAYhF,WACjB9E,KAAKmG,eAGjB,EACOk/B,CACX,CAnBqB,CAmBnB93B,EAAajH,W;ACxFf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBmuB,EAA4B,EAAQ,OACpC9b,EAAoB,EAAQ;AA+ChCpf,EAAQkd,SAVR,SAAkB/b,GACd,OAAO,SAAkC0G,GACrC,OAAc,IAAV1G,EACO,IAAIie,EAAkBG,gBAGtB1X,EAAOH,KAAK,IAAIo9B,EAAiB3jC,GAEhD,CACJ;AAEA,IAAI2jC,EAAoB,WACpB,SAASA,EAAiB3hB,GAEtB,GADA3jB,KAAK2jB,MAAQA,EACT3jB,KAAK2jB,MAAQ,EACb,MAAM,IAAI+X,EAA0B7vB,uBAE5C,CAIA,OAHAy5B,EAAiBxhC,UAAUiB,KAAO,SAAUN,EAAY4D,GACpD,OAAOA,EAAOL,UAAU,IAAIu9B,EAAmB9gC,EAAYzE,KAAK2jB,OACpE,EACO2hB,CACX,CAXuB,GAiBnBC,EAAsB,SAAUphC,GAEhC,SAASohC,EAAmBz7B,EAAa6Z,GACrCxf,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2jB,MAAQA,EACb3jB,KAAKkkC,KAAO,IAAI/kC,MAChBa,KAAK2B,MAAQ,CACjB,CA0BA,OAhCA6B,EAAU+hC,EAAoBphC,GAO9BohC,EAAmBzhC,UAAUiC,MAAQ,SAAU5F,GAC3C,IAAI+jC,EAAOlkC,KAAKkkC,KACZvgB,EAAQ3jB,KAAK2jB,MACbhiB,EAAQ3B,KAAK2B;AACbuiC,EAAK9gC,OAASugB,EACdugB,EAAK5gC,KAAKnD,GAIV+jC,EADYviC,EAAQgiB,GACNxjB,CAEtB,EACAolC,EAAmBzhC,UAAUsC,UAAY,WACrC,IAAI0D,EAAc9J,KAAK8J,YACnBnI,EAAQ3B,KAAK2B;AACjB,GAAIA,EAAQ,EAGR,IAFA,IAAIgiB,EAAQ3jB,KAAK2B,OAAS3B,KAAK2jB,MAAQ3jB,KAAK2jB,MAAQ3jB,KAAK2B,MACrDuiC,EAAOlkC,KAAKkkC,KACP3gC,EAAI,EAAGA,EAAIogB,EAAOpgB,IAAK,CAC5B,IAAIskB,EAAOlmB,IAAWgiB;AACtB7Z,EAAY9G,KAAKkhC,EAAKrc,GAC1B,CAEJ/d,EAAYhF,UAChB,EACOygC,CACX,CAlCyB,CAkCvBh4B,EAAajH,W;AC1Gf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAqClCniB,EAAQod,UAHR,SAAmB0W,GACf,OAAO,SAAUjsB,GAAU,OAAOA,EAAOH,KAAK,IAAIs9B,EAAkBlR,GAAY,CACpF;AAEA,IAAIkR,EAAqB,WACrB,SAASA,EAAkBlR,GACvBt0B,KAAKs0B,SAAWA,CACpB,CAIA,OAHAkR,EAAkB1hC,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAIy9B,EAAoBhhC,EAAYzE,KAAKs0B,UACrE,EACOkR,CACX,CARwB,GAcpBC,EAAuB,SAAUthC,GAEjC,SAASshC,EAAoB37B,EAAawqB,GACtCnwB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKs0B,SAAWA,EAChBt0B,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMs0B,GACzD,CAOA,OAZA9wB,EAAUiiC,EAAqBthC,GAM/BshC,EAAoB3hC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACjG7J,KAAK8E,UACT,EACA2gC,EAAoB3hC,UAAUuC,eAAiB,WAE/C,EACOo/B,CACX,CAd0B,CAcxB7iB,EAAkBlZ,gB;ACxEpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAwC3B/M,EAAQsd,UAHR,SAAmB6U,GACf,OAAO,SAAUtqB,GAAU,OAAOA,EAAOH,KAAK,IAAIw9B,EAAkB/S,GAAa,CACrF;AAEA,IAAI+S,EAAqB,WACrB,SAASA,EAAkB/S,GACvB3yB,KAAK2yB,UAAYA,CACrB,CAIA,OAHA+S,EAAkB5hC,UAAUiB,KAAO,SAAUN,EAAY4D,GACrD,OAAOA,EAAOL,UAAU,IAAI29B,EAAoBlhC,EAAYzE,KAAK2yB,WACrE,EACO+S,CACX,CARwB,GAcpBC,EAAuB,SAAUxhC,GAEjC,SAASwhC,EAAoB77B,EAAa6oB,GACtCxuB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK2yB,UAAYA,EACjB3yB,KAAKkD,MAAQ,CACjB,CAsBA,OA3BAM,EAAUmiC,EAAqBxhC,GAM/BwhC,EAAoB7hC,UAAUiC,MAAQ,SAAU5F,GAC5C,IACIwC,EADAmH,EAAc9J,KAAK8J;AAEvB,IACInH,EAAS3C,KAAK2yB,UAAUxyB,EAAOH,KAAKkD,QAKxC,CAHA,MAAOsE,GAEH,YADAsC,EAAYtK,MAAMgI,EAEtB,CACAxH,KAAK4lC,eAAezlC,EAAOwC,EAC/B,EACAgjC,EAAoB7hC,UAAU8hC,eAAiB,SAAUzlC,EAAO0lC,GAC5D,IAAI/7B,EAAc9J,KAAK8J;AACnB2xB,QAAQoK,GACR/7B,EAAY9G,KAAK7C,GAGjB2J,EAAYhF,UAEpB,EACO6gC,CACX,CA7B0B,CA6BxBp4B,EAAajH,W;ACzFf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ;AAgD3B/M,EAAQ2yB,IALR,SAAapsB,EAAgBvH,EAAOsF,GAChC,OAAO,SAA6BuD,GAChC,OAAOA,EAAOH,KAAK,IAAI49B,EAAW/+B,EAAgBvH,EAAOsF,GAC7D,CACJ;AAEA,IAAIghC,EAAc,WACd,SAASA,EAAW/+B,EAAgBvH,EAAOsF,GACvC9E,KAAK+G,eAAiBA,EACtB/G,KAAKR,MAAQA,EACbQ,KAAK8E,SAAWA,CACpB,CAIA,OAHAghC,EAAWhiC,UAAUiB,KAAO,SAAUN,EAAY4D,GAC9C,OAAOA,EAAOL,UAAU,IAAI+9B,EAAathC,EAAYzE,KAAK+G,eAAgB/G,KAAKR,MAAOQ,KAAK8E,UAC/F,EACOghC,CACX,CAViB,GAgBbC,EAAgB,SAAU5hC,GAE1B,SAAS4hC,EAAaj8B,EAAa/C,EAAgBvH,EAAOsF,GACtDX,EAAOY,KAAK/E,KAAM8J;AAClB,IAAIk8B,EAAiB,IAAIz4B,EAAajH,WAAWS,EAAgBvH,EAAOsF;AACxEkhC,EAAet9B,oBAAqB,EACpC1I,KAAKyI,IAAIu9B,GACThmC,KAAKgmC,eAAiBA,CAC1B,CA+BA,OAtCAxiC,EAAUuiC,EAAc5hC,GAQxB4hC,EAAajiC,UAAUiC,MAAQ,SAAU5F,GACrC,IAAI6lC,EAAiBhmC,KAAKgmC;AAC1BA,EAAehjC,KAAK7C,GAChB6lC,EAAep9B,gBACf5I,KAAK8J,YAAYtK,MAAMwmC,EAAen9B,gBAGtC7I,KAAK8J,YAAY9G,KAAK7C,EAE9B,EACA4lC,EAAajiC,UAAUmC,OAAS,SAAUuB,GACtC,IAAIw+B,EAAiBhmC,KAAKgmC;AAC1BA,EAAexmC,MAAMgI,GACjBw+B,EAAep9B,gBACf5I,KAAK8J,YAAYtK,MAAMwmC,EAAen9B,gBAGtC7I,KAAK8J,YAAYtK,MAAMgI,EAE/B,EACAu+B,EAAajiC,UAAUsC,UAAY,WAC/B,IAAI4/B,EAAiBhmC,KAAKgmC;AAC1BA,EAAelhC,WACXkhC,EAAep9B,gBACf5I,KAAK8J,YAAYtK,MAAMwmC,EAAen9B,gBAGtC7I,KAAK8J,YAAYhF,UAEzB,EACOihC,CACX,CAxCmB,CAwCjBx4B,EAAajH,W;AC9Gf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAClCniB,EAAQm0B,sBAAwB,CAC5BsR,SAAS,EACTC,UAAU,GA8Cd1lC,EAAQwd,SAJR,SAAkB6T,EAAkB1oB,GAEhC,YADe,IAAXA,IAAqBA,EAAS3I,EAAQm0B,uBACnC,SAAUtsB,GAAU,OAAOA,EAAOH,KAAK,IAAIi+B,EAAiBtU,EAAkB1oB,EAAO88B,QAAS98B,EAAO+8B,UAAY,CAC5H;AAEA,IAAIC,EAAoB,WACpB,SAASA,EAAiBtU,EAAkBoU,EAASC,GACjDlmC,KAAK6xB,iBAAmBA,EACxB7xB,KAAKimC,QAAUA,EACfjmC,KAAKkmC,SAAWA,CACpB,CAIA,OAHAC,EAAiBriC,UAAUiB,KAAO,SAAUN,EAAY4D,GACpD,OAAOA,EAAOL,UAAU,IAAIo+B,EAAmB3hC,EAAYzE,KAAK6xB,iBAAkB7xB,KAAKimC,QAASjmC,KAAKkmC,UACzG,EACOC,CACX,CAVuB,GAgBnBC,EAAsB,SAAUjiC,GAEhC,SAASiiC,EAAmBt8B,EAAa+nB,EAAkBwU,EAAUC,GACjEniC,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8J,YAAcA,EACnB9J,KAAK6xB,iBAAmBA,EACxB7xB,KAAKqmC,SAAWA,EAChBrmC,KAAKsmC,UAAYA,EACjBtmC,KAAKumC,mBAAoB,CAC7B,CAyDA,OAjEA/iC,EAAU4iC,EAAoBjiC,GAS9BiiC,EAAmBtiC,UAAUiC,MAAQ,SAAU5F,GAC3C,GAAIH,KAAKu1B,UACDv1B,KAAKsmC,YACLtmC,KAAKumC,mBAAoB,EACzBvmC,KAAKwmC,eAAiBrmC;IAGzB,CACD,IAAI2xB,EAAW9xB,KAAKymC,oBAAoBtmC;AACpC2xB,GACA9xB,KAAKyI,IAAIzI,KAAKu1B,UAAY5S,EAAoBQ,kBAAkBnjB,KAAM8xB,IAEtE9xB,KAAKqmC,WACLrmC,KAAK8J,YAAY9G,KAAK7C,GAClBH,KAAKsmC,YACLtmC,KAAKumC,mBAAoB,EACzBvmC,KAAKwmC,eAAiBrmC,GAGlC,CACJ,EACAimC,EAAmBtiC,UAAU2iC,oBAAsB,SAAUtmC,GACzD,IACI,OAAOH,KAAK6xB,iBAAiB1xB,EAKjC,CAHA,MAAOqH,GAEH,OADAxH,KAAK8J,YAAYtK,MAAMgI,GAChB,IACX,CACJ,EACqC4+B,EAAmBtiC,UAAUmL,aAAe,WAC7E,IAAIS,EAAK1P,KAAMu1B,EAAY7lB,EAAG6lB;AAA4B7lB,EAAG82B,eAAoC92B,EAAG62B,kBAA+B72B,EAAG42B;AACtItmC,KAAKwmC,eAAiB,KACtBxmC,KAAKumC,mBAAoB,EACrBhR,IACAv1B,KAAK2P,OAAO4lB,GACZv1B,KAAKu1B,UAAY,KACjBA,EAAUpvB,cAElB,EACAigC,EAAmBtiC,UAAU4iC,cAAgB,WACzC,IAAIh3B,EAAK1P,KAAM8J,EAAc4F,EAAG5F,YAAayrB,EAAY7lB,EAAG6lB,UAAW+Q,EAAY52B,EAAG42B,UAAWE,EAAiB92B,EAAG82B,eAAgBD,EAAoB72B,EAAG62B;AACxJhR,GAAa+Q,GAAaC,IAC1Bz8B,EAAY9G,KAAKwjC,GACjBxmC,KAAKwmC,eAAiB,KACtBxmC,KAAKumC,mBAAoB,EAEjC,EACAH,EAAmBtiC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAChG7J,KAAK0mC,gBACL1mC,KAAKiP,cACT,EACAm3B,EAAmBtiC,UAAUuC,eAAiB,WAC1CrG,KAAK0mC,gBACL1mC,KAAKiP,cACT,EACOm3B,CACX,CAnEyB,CAmEvBxjB,EAAkBlZ,gB;AC3IpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBd,EAAU,EAAQ,OAClBsR,EAAa,EAAQ;AA6CzBvd,EAAQ0d,aALR,SAAsB4T,EAAUznB,EAAWlB,GAGvC,YAFkB,IAAdkB,IAAwBA,EAAYoC,EAAQzK,YACjC,IAAXmH,IAAqBA,EAAS4U,EAAW4W,uBACtC,SAAUtsB,GAAU,OAAOA,EAAOH,KAAK,IAAIy+B,EAAqB7U,EAAUznB,EAAWlB,EAAO88B,QAAS98B,EAAO+8B,UAAY,CACnI;AAEA,IAAIS,EAAwB,WACxB,SAASA,EAAqB7U,EAAUznB,EAAW47B,EAASC,GACxDlmC,KAAK8xB,SAAWA,EAChB9xB,KAAKqK,UAAYA,EACjBrK,KAAKimC,QAAUA,EACfjmC,KAAKkmC,SAAWA,CACpB,CAIA,OAHAS,EAAqB7iC,UAAUiB,KAAO,SAAUN,EAAY4D,GACxD,OAAOA,EAAOL,UAAU,IAAI4+B,EAAuBniC,EAAYzE,KAAK8xB,SAAU9xB,KAAKqK,UAAWrK,KAAKimC,QAASjmC,KAAKkmC,UACrH,EACOS,CACX,CAX2B,GAiBvBC,EAA0B,SAAUziC,GAEpC,SAASyiC,EAAuB98B,EAAagoB,EAAUznB,EAAW47B,EAASC,GACvE/hC,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8xB,SAAWA,EAChB9xB,KAAKqK,UAAYA,EACjBrK,KAAKimC,QAAUA,EACfjmC,KAAKkmC,SAAWA,EAChBlmC,KAAKumC,mBAAoB,EACzBvmC,KAAKwmC,eAAiB,IAC1B,CA4BA,OArCAhjC,EAAUojC,EAAwBziC,GAUlCyiC,EAAuB9iC,UAAUiC,MAAQ,SAAU5F,GAC3CH,KAAKu1B,UACDv1B,KAAKkmC,WACLlmC,KAAKwmC,eAAiBrmC,EACtBH,KAAKumC,mBAAoB,IAI7BvmC,KAAKyI,IAAIzI,KAAKu1B,UAAYv1B,KAAKqK,UAAU6C,SAASkU,EAAcphB,KAAK8xB,SAAU,CAAErtB,WAAYzE,QACzFA,KAAKimC,SACLjmC,KAAK8J,YAAY9G,KAAK7C,GAGlC,EACAymC,EAAuB9iC,UAAU0xB,cAAgB,WAC7C,IAAID,EAAYv1B,KAAKu1B;AACjBA,IACIv1B,KAAKkmC,UAAYlmC,KAAKumC,oBACtBvmC,KAAK8J,YAAY9G,KAAKhD,KAAKwmC,gBAC3BxmC,KAAKwmC,eAAiB,KACtBxmC,KAAKumC,mBAAoB,GAE7BhR,EAAUpvB,cACVnG,KAAK2P,OAAO4lB,GACZv1B,KAAKu1B,UAAY,KAEzB,EACOqR,CACX,CAvC6B,CAuC3Br5B,EAAajH;AACf,SAAS8a,EAAaC,GACDA,EAAI5c,WACV+wB,eACf,C;ACjHA,IAAIhyB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBd,EAAU,EAAQ;AAKtBjM,EAAQ4d,aAJR,SAAsB/T,GAElB,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzC,SAAUqG,GAAU,OAAOA,EAAOH,KAAK,IAAI2+B,EAAqBx8B,GAAa,CACxF;AAEA,IAAI2B,EACA,SAAsB7L,EAAOqS,GACzBxS,KAAKG,MAAQA,EACbH,KAAKwS,SAAWA,CACpB;AAGJhS,EAAQwL,aAAeA;AAEvB,IAAI66B,EAAwB,WACxB,SAASA,EAAqBx8B,GAC1BrK,KAAKqK,UAAYA,CACrB,CAIA,OAHAw8B,EAAqB/iC,UAAUiB,KAAO,SAAU6B,EAAUyB,GACtD,OAAOA,EAAOL,UAAU,IAAI8+B,EAAuBlgC,EAAU5G,KAAKqK,WACtE,EACOw8B,CACX,CAR2B,GAcvBC,EAA0B,SAAU3iC,GAEpC,SAAS2iC,EAAuBh9B,EAAaO,GACzClG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKqK,UAAYA,EACjBrK,KAAK+mC,SAAW,EAChB/mC,KAAK+mC,SAAW18B,EAAUK,KAC9B,CAOA,OAbAlH,EAAUsjC,EAAwB3iC,GAOlC2iC,EAAuBhjC,UAAUiC,MAAQ,SAAU5F,GAC/C,IAAIuK,EAAM1K,KAAKqK,UAAUK,MACrBs8B,EAAOt8B,EAAM1K,KAAK+mC;AACtB/mC,KAAK+mC,SAAWr8B,EAChB1K,KAAK8J,YAAY9G,KAAK,IAAIgJ,EAAa7L,EAAO6mC,GAClD,EACOF,CACX,CAf6B,CAe3Bv5B,EAAajH,W;AClDf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI4I,EAAU,EAAQ,OAClB+c,EAAW,EAAQ,OACnBjc,EAAe,EAAQ,OACvB05B,EAAiB,EAAQ;AAwE7BzmC,EAAQ8d,QANR,SAAiBsW,EAAKvqB,QACA,IAAdA,IAAwBA,EAAYoC,EAAQzK;AAChD,IAAIklC,EAAkB1d,EAASG,OAAOiL,GAClCuS,EAAUD,GAAoBtS,EAAMvqB,EAAUK,MAASa,KAAK+c,IAAIsM;AACpE,OAAO,SAAUvsB,GAAU,OAAOA,EAAOH,KAAK,IAAIk/B,EAAgBD,EAASD,EAAiB78B,EAAW,IAAI48B,EAAen7B,cAAkB,CAChJ;AAEA,IAAIs7B,EAAmB,WACnB,SAASA,EAAgBD,EAASD,EAAiB78B,EAAWg9B,GAC1DrnC,KAAKmnC,QAAUA,EACfnnC,KAAKknC,gBAAkBA,EACvBlnC,KAAKqK,UAAYA,EACjBrK,KAAKqnC,cAAgBA,CACzB,CAIA,OAHAD,EAAgBtjC,UAAUiB,KAAO,SAAUN,EAAY4D,GACnD,OAAOA,EAAOL,UAAU,IAAIs/B,EAAkB7iC,EAAYzE,KAAKknC,gBAAiBlnC,KAAKmnC,QAASnnC,KAAKqK,UAAWrK,KAAKqnC,eACvH,EACOD,CACX,CAXsB,GAiBlBE,EAAqB,SAAUnjC,GAE/B,SAASmjC,EAAkBx9B,EAAao9B,EAAiBC,EAAS98B,EAAWg9B,GACzEljC,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKknC,gBAAkBA,EACvBlnC,KAAKmnC,QAAUA,EACfnnC,KAAKqK,UAAYA,EACjBrK,KAAKqnC,cAAgBA,EACrBrnC,KAAKunC,OAAS,KACdvnC,KAAKwnC,iBACT,CA6BA,OAtCAhkC,EAAU8jC,EAAmBnjC,GAU7BmjC,EAAkBG,gBAAkB,SAAUhjC,GAC1CA,EAAWjF,MAAMiF,EAAW4iC,cAChC,EACAC,EAAkBxjC,UAAU0jC,gBAAkB,WAC1C,IAAID,EAASvnC,KAAKunC;AACdA,EAMAvnC,KAAKunC,OAASA,EAAOr6B,SAASlN,KAAMA,KAAKmnC,SAGzCnnC,KAAKyI,IAAIzI,KAAKunC,OAASvnC,KAAKqK,UAAU6C,SAASo6B,EAAkBG,gBAAiBznC,KAAKmnC,QAASnnC,MAExG,EACAsnC,EAAkBxjC,UAAUiC,MAAQ,SAAU5F,GACrCH,KAAKknC,iBACNlnC,KAAKwnC,kBAETrjC,EAAOL,UAAUiC,MAAMhB,KAAK/E,KAAMG,EACtC,EACqCmnC,EAAkBxjC,UAAUmL,aAAe,WAC5EjP,KAAKunC,OAAS,KACdvnC,KAAKqK,UAAY,KACjBrK,KAAKqnC,cAAgB,IACzB,EACOC,CACX,CAxCwB,CAwCtB/5B,EAAajH,W;AC1If,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI4I,EAAU,EAAQ,OAClB+c,EAAW,EAAQ,OACnB5G,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAyDlCniB,EAAQge,YARR,SAAqBoW,EAAKC,EAAgBxqB,GAEtC,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzC,SAAUqG,GACb,IAAI6+B,EAAkB1d,EAASG,OAAOiL,GAClCuS,EAAUD,GAAoBtS,EAAMvqB,EAAUK,MAASa,KAAK+c,IAAIsM;AACpE,OAAOvsB,EAAOH,KAAK,IAAIw/B,EAAoBP,EAASD,EAAiBrS,EAAgBxqB,GACzF,CACJ;AAEA,IAAIq9B,EAAuB,WACvB,SAASA,EAAoBP,EAASD,EAAiBrS,EAAgBxqB,GACnErK,KAAKmnC,QAAUA,EACfnnC,KAAKknC,gBAAkBA,EACvBlnC,KAAK60B,eAAiBA,EACtB70B,KAAKqK,UAAYA,CACrB,CAIA,OAHAq9B,EAAoB5jC,UAAUiB,KAAO,SAAUN,EAAY4D,GACvD,OAAOA,EAAOL,UAAU,IAAI2/B,EAAsBljC,EAAYzE,KAAKknC,gBAAiBlnC,KAAKmnC,QAASnnC,KAAK60B,eAAgB70B,KAAKqK,WAChI,EACOq9B,CACX,CAX0B,GAiBtBC,EAAyB,SAAUxjC,GAEnC,SAASwjC,EAAsB79B,EAAao9B,EAAiBC,EAAStS,EAAgBxqB,GAClFlG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKknC,gBAAkBA,EACvBlnC,KAAKmnC,QAAUA,EACfnnC,KAAK60B,eAAiBA,EACtB70B,KAAKqK,UAAYA,EACjBrK,KAAKunC,OAAS,KACdvnC,KAAKwnC,iBACT,CA+BA,OAxCAhkC,EAAUmkC,EAAuBxjC,GAUjCwjC,EAAsBF,gBAAkB,SAAUhjC,GAC9C,IAAIowB,EAAiBpwB,EAAWowB;AAChCpwB,EAAW4J,yBACX5J,EAAWgE,IAAIka,EAAoBQ,kBAAkB1e,EAAYowB,GACrE,EACA8S,EAAsB7jC,UAAU0jC,gBAAkB,WAC9C,IAAID,EAASvnC,KAAKunC;AACdA,EAMAvnC,KAAKunC,OAASA,EAAOr6B,SAASlN,KAAMA,KAAKmnC,SAGzCnnC,KAAKyI,IAAIzI,KAAKunC,OAASvnC,KAAKqK,UAAU6C,SAASy6B,EAAsBF,gBAAiBznC,KAAKmnC,QAASnnC,MAE5G,EACA2nC,EAAsB7jC,UAAUiC,MAAQ,SAAU5F,GACzCH,KAAKknC,iBACNlnC,KAAKwnC,kBAETrjC,EAAOL,UAAUiC,MAAMhB,KAAK/E,KAAMG,EACtC,EACqCwnC,EAAsB7jC,UAAUmL,aAAe,WAChFjP,KAAKunC,OAAS,KACdvnC,KAAKqK,UAAY,KACjBrK,KAAK60B,eAAiB,IAC1B,EACO8S,CACX,CA1C4B,CA0C1B/kB,EAAkBlZ,gB;AC7HpB,IAAI+C,EAAU,EAAQ,OAClBkM,EAAQ,EAAQ;AAYpBnY,EAAQke,UALR,SAAmBrU,GAEf,YADkB,IAAdA,IAAwBA,EAAYoC,EAAQzK,OACzC2W,EAAMpZ,KAAI,SAAUY,GAAS,OAAO,IAAI8L,EAAU9L,EAAOkK,EAAUK,MAAQ,GAEtF;AAEA,IAAIuB,EACA,SAAmB9L,EAAOue,GACtB1e,KAAKG,MAAQA,EACbH,KAAK0e,UAAYA,CACrB;AAGJle,EAAQyL,UAAYA,C;ACrBpB,IAAI6O,EAAW,EAAQ;AACvB,SAAS8sB,EAAe7f,EAAK8f,EAAM3kC,GAC/B,OAAc,IAAVA,EACO,CAAC2kC,IAEZ9f,EAAIzkB,KAAKukC,GACF9f,EACX,CAIAvnB,EAAQoe,QAHR,WACI,OAAO9D,EAAStK,OAAOo3B,EAAgB,GAC3C,C;ACVA,IAAIpkC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpB4e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AA0ClCniB,EAAQse,OALR,SAAgBgW,GACZ,OAAO,SAAgCzsB,GACnC,OAAOA,EAAOH,KAAK,IAAI4/B,EAAehT,GAC1C,CACJ;AAEA,IAAIgT,EAAkB,WAClB,SAASA,EAAehT,GACpB90B,KAAK80B,iBAAmBA,CAC5B,CASA,OARAgT,EAAehkC,UAAUiB,KAAO,SAAUN,EAAY4D,GAClD,IAAI0/B,EAAmB,IAAIC,EAAiBvjC,GACxCwjC,EAAqB5/B,EAAOL,UAAU+/B;AAI1C,OAHKE,EAAmBxiC,QACpBsiC,EAAiBt/B,IAAIka,EAAoBQ,kBAAkB4kB,EAAkB/nC,KAAK80B,mBAE/EmT,CACX,EACOH,CACX,CAbqB,GAmBjBE,EAAoB,SAAU7jC,GAE9B,SAAS6jC,EAAiBl+B,GACtB3F,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8e,OAAS,IAAI9a,EAAUgB,QAC5B8E,EAAY9G,KAAKhD,KAAK8e,OAC1B,CAiCA,OAtCAtb,EAAUwkC,EAAkB7jC,GAM5B6jC,EAAiBlkC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC9F7J,KAAKkoC,YACT,EACAF,EAAiBlkC,UAAUoC,YAAc,SAAU1G,EAAOqK,GACtD7J,KAAKiG,OAAOzG,EAChB,EACAwoC,EAAiBlkC,UAAUuC,eAAiB,SAAUwD,GAClD7J,KAAKoG,WACT,EACA4hC,EAAiBlkC,UAAUiC,MAAQ,SAAU5F,GACzCH,KAAK8e,OAAO9b,KAAK7C,EACrB,EACA6nC,EAAiBlkC,UAAUmC,OAAS,SAAUuB,GAC1CxH,KAAK8e,OAAOtf,MAAMgI,GAClBxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,EACAwgC,EAAiBlkC,UAAUsC,UAAY,WACnCpG,KAAK8e,OAAOha,WACZ9E,KAAK8J,YAAYhF,UACrB,EACqCkjC,EAAiBlkC,UAAUmL,aAAe,WAC3EjP,KAAK8e,OAAS,IAClB,EACAkpB,EAAiBlkC,UAAUokC,WAAa,WACpC,IAAIC,EAAanoC,KAAK8e;AAClBqpB,GACAA,EAAWrjC;AAEf,IAAIgF,EAAc9J,KAAK8J,YACnBs+B,EAAYpoC,KAAK8e,OAAS,IAAI9a,EAAUgB;AAC5C8E,EAAY9G,KAAKolC,EACrB,EACOJ,CACX,CAxCuB,CAwCrBplB,EAAkBlZ,gB;AC7GpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0J,EAAe,EAAQ,OACvBvJ,EAAY,EAAQ;AAuDxBxD,EAAQwe,YANR,SAAqB+V,EAAYC,GAE7B,YADyB,IAArBA,IAA+BA,EAAmB,GAC/C,SAAqC3sB,GACxC,OAAOA,EAAOH,KAAK,IAAImgC,EAAoBtT,EAAYC,GAC3D,CACJ;AAEA,IAAIqT,EAAuB,WACvB,SAASA,EAAoBtT,EAAYC,GACrCh1B,KAAK+0B,WAAaA,EAClB/0B,KAAKg1B,iBAAmBA,CAC5B,CAIA,OAHAqT,EAAoBvkC,UAAUiB,KAAO,SAAUN,EAAY4D,GACvD,OAAOA,EAAOL,UAAU,IAAIsgC,EAAsB7jC,EAAYzE,KAAK+0B,WAAY/0B,KAAKg1B,kBACxF,EACOqT,CACX,CAT0B,GAetBC,EAAyB,SAAUnkC,GAEnC,SAASmkC,EAAsBx+B,EAAairB,EAAYC,GACpD7wB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8J,YAAcA,EACnB9J,KAAK+0B,WAAaA,EAClB/0B,KAAKg1B,iBAAmBA,EACxBh1B,KAAKuoC,QAAU,CAAC,IAAIvkC,EAAUgB,SAC9BhF,KAAK2B,MAAQ,EACbmI,EAAY9G,KAAKhD,KAAKuoC,QAAQ,GAClC,CA0CA,OAnDA/kC,EAAU8kC,EAAuBnkC,GAUjCmkC,EAAsBxkC,UAAUiC,MAAQ,SAAU5F,GAM9C,IALA,IAAI60B,EAAoBh1B,KAAKg1B,iBAAmB,EAAKh1B,KAAKg1B,iBAAmBh1B,KAAK+0B,WAC9EjrB,EAAc9J,KAAK8J,YACnBirB,EAAa/0B,KAAK+0B,WAClBwT,EAAUvoC,KAAKuoC,QACfr9B,EAAMq9B,EAAQnlC,OACTG,EAAI,EAAGA,EAAI2H,IAAQlL,KAAKyF,OAAQlC,IACrCglC,EAAQhlC,GAAGP,KAAK7C;AAEpB,IAAIqoC,EAAIxoC,KAAK2B,MAAQozB,EAAa;AAIlC,GAHIyT,GAAK,GAAKA,EAAIxT,GAAqB,IAAMh1B,KAAKyF,QAC9C8iC,EAAQhnB,QAAQzc,aAEd9E,KAAK2B,MAAQqzB,GAAqB,IAAMh1B,KAAKyF,OAAQ,CACvD,IAAIoZ,EAAW,IAAI7a,EAAUgB;AAC7BujC,EAAQjlC,KAAKub,GACb/U,EAAY9G,KAAK6b,EACrB,CACJ,EACAypB,EAAsBxkC,UAAUmC,OAAS,SAAUuB,GAC/C,IAAI+gC,EAAUvoC,KAAKuoC;AACnB,GAAIA,EACA,KAAOA,EAAQnlC,OAAS,IAAMpD,KAAKyF,QAC/B8iC,EAAQhnB,QAAQ/hB,MAAMgI;AAG9BxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,EACA8gC,EAAsBxkC,UAAUsC,UAAY,WACxC,IAAImiC,EAAUvoC,KAAKuoC;AACnB,GAAIA,EACA,KAAOA,EAAQnlC,OAAS,IAAMpD,KAAKyF,QAC/B8iC,EAAQhnB,QAAQzc;AAGxB9E,KAAK8J,YAAYhF,UACrB,EACqCwjC,EAAsBxkC,UAAUmL,aAAe,WAChFjP,KAAK2B,MAAQ,EACb3B,KAAKuoC,QAAU,IACnB,EACOD,CACX,CArD4B,CAqD1B/6B,EAAajH,W;AClIf,IAAI9C,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpByI,EAAU,EAAQ,OAClBc,EAAe,EAAQ,OACvB6Z,EAAc,EAAQ,OACtBlH,EAAgB,EAAQ;AAwB5B1f,EAAQ4J,WAvBR,SAAoB6qB,GAChB,IAAI5qB,EAAYoC,EAAQzK,MACpBkzB,EAAyB,KACzBC,EAAgB1yB,OAAO6H;AAgB3B,OAfI4V,EAAcG,YAAYhc,UAAU,MACpCgG,EAAYhG,UAAU,IAEtB6b,EAAcG,YAAYhc,UAAU,IACpCgG,EAAYhG,UAAU,GAEjB+iB,EAAYG,UAAUljB,UAAU,MACrC8wB,EAAgB9wB,UAAU,IAE1B6b,EAAcG,YAAYhc,UAAU,IACpCgG,EAAYhG,UAAU,GAEjB+iB,EAAYG,UAAUljB,UAAU,MACrC6wB,EAAyB7wB,UAAU,IAEhC,SAAoCgE,GACvC,OAAOA,EAAOH,KAAK,IAAIugC,EAAmBxT,EAAgBC,EAAwBC,EAAe9qB,GACrG,CACJ;AAEA,IAAIo+B,EAAsB,WACtB,SAASA,EAAmBxT,EAAgBC,EAAwBC,EAAe9qB,GAC/ErK,KAAKi1B,eAAiBA,EACtBj1B,KAAKk1B,uBAAyBA,EAC9Bl1B,KAAKm1B,cAAgBA,EACrBn1B,KAAKqK,UAAYA,CACrB,CAIA,OAHAo+B,EAAmB3kC,UAAUiB,KAAO,SAAUN,EAAY4D,GACtD,OAAOA,EAAOL,UAAU,IAAI0gC,EAAqBjkC,EAAYzE,KAAKi1B,eAAgBj1B,KAAKk1B,uBAAwBl1B,KAAKm1B,cAAen1B,KAAKqK,WAC5I,EACOo+B,CACX,CAXyB,GAYrBE,EAAkB,SAAUxkC,GAE5B,SAASwkC,IACLxkC,EAAOC,MAAMpE,KAAMqE,WACnBrE,KAAK4oC,sBAAwB,CACjC,CAYA,OAhBAplC,EAAUmlC,EAAgBxkC,GAK1BwkC,EAAe7kC,UAAUd,KAAO,SAAU7C,GACtCH,KAAK4oC,wBACLzkC,EAAOL,UAAUd,KAAK+B,KAAK/E,KAAMG,EACrC,EACAV,OAAOS,eAAeyoC,EAAe7kC,UAAW,uBAAwB,CACpEsB,IAAK,WACD,OAAOpF,KAAK4oC,qBAChB,EACAtjC,YAAY,EACZC,cAAc,IAEXojC,CACX,CAlBqB,CAkBnB3kC,EAAUgB,SAMR0jC,EAAwB,SAAUvkC,GAElC,SAASukC,EAAqB5+B,EAAamrB,EAAgBC,EAAwBC,EAAe9qB,GAC9FlG,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8J,YAAcA,EACnB9J,KAAKi1B,eAAiBA,EACtBj1B,KAAKk1B,uBAAyBA,EAC9Bl1B,KAAKm1B,cAAgBA,EACrBn1B,KAAKqK,UAAYA,EACjBrK,KAAKuoC,QAAU;AACf,IAAIzpB,EAAS9e,KAAKkoC;AAClB,GAA+B,OAA3BhT,GAAmCA,GAA0B,EAAG,CAChE,IAAIuB,EAAa,CAAEhyB,WAAYzE,KAAM8e,OAAQA,EAAQrQ,QAAS,MAC1DioB,EAAgB,CAAEzB,eAAgBA,EAAgBC,uBAAwBA,EAAwBzwB,WAAYzE,KAAMqK,UAAWA;AACnIrK,KAAKyI,IAAI4B,EAAU6C,SAAS27B,EAAqB5T,EAAgBwB,IACjEz2B,KAAKyI,IAAI4B,EAAU6C,SAAS47B,EAAwB5T,EAAwBwB,GAChF,KACK,CACD,IAAIJ,EAAoB,CAAE7xB,WAAYzE,KAAM8e,OAAQA,EAAQmW,eAAgBA;AAC5Ej1B,KAAKyI,IAAI4B,EAAU6C,SAAS67B,EAA4B9T,EAAgBqB,GAC5E,CACJ,CA2CA,OA/DA9yB,EAAUklC,EAAsBvkC,GAqBhCukC,EAAqB5kC,UAAUiC,MAAQ,SAAU5F,GAG7C,IAFA,IAAIooC,EAAUvoC,KAAKuoC,QACfr9B,EAAMq9B,EAAQnlC,OACTG,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIsb,EAAW0pB,EAAQhlC;AAClBsb,EAASpZ,SACVoZ,EAAS7b,KAAK7C,GACV0e,EAASmqB,sBAAwBhpC,KAAKm1B,eACtCn1B,KAAKipC,YAAYpqB,GAG7B,CACJ,EACA6pB,EAAqB5kC,UAAUmC,OAAS,SAAUuB,GAE9C,IADA,IAAI+gC,EAAUvoC,KAAKuoC,QACZA,EAAQnlC,OAAS,GACpBmlC,EAAQhnB,QAAQ/hB,MAAMgI;AAE1BxH,KAAK8J,YAAYtK,MAAMgI,EAC3B,EACAkhC,EAAqB5kC,UAAUsC,UAAY,WAEvC,IADA,IAAImiC,EAAUvoC,KAAKuoC,QACZA,EAAQnlC,OAAS,GAAG,CACvB,IAAI8lC,EAAWX,EAAQhnB;AAClB2nB,EAASzjC,QACVyjC,EAASpkC,UAEjB,CACA9E,KAAK8J,YAAYhF,UACrB,EACA4jC,EAAqB5kC,UAAUokC,WAAa,WACxC,IAAIppB,EAAS,IAAI6pB;AAIjB,OAHA3oC,KAAKuoC,QAAQjlC,KAAKwb,GACA9e,KAAK8J,YACX9G,KAAK8b,GACVA,CACX,EACA4pB,EAAqB5kC,UAAUmlC,YAAc,SAAUnqB,GACnDA,EAAOha;AACP,IAAIyjC,EAAUvoC,KAAKuoC;AACnBA,EAAQ98B,OAAO88B,EAAQz6B,QAAQgR,GAAS,EAC5C,EACO4pB,CACX,CAjE2B,CAiEzBn7B,EAAajH;AACf,SAASyiC,EAA2B17B,GAChC,IAAI5I,EAAa4I,EAAM5I,WAAYwwB,EAAiB5nB,EAAM4nB,eAAgBnW,EAASzR,EAAMyR;AACrFA,GACAra,EAAWwkC,YAAYnqB,GAE3BzR,EAAMyR,OAASra,EAAWyjC,aAC1BloC,KAAKkN,SAASG,EAAO4nB,EACzB,CACA,SAAS6T,EAAuBz7B,GAC5B,IAAI4nB,EAAiB5nB,EAAM4nB,eAAgBxwB,EAAa4I,EAAM5I,WAAY4F,EAAYgD,EAAMhD,UAAW6qB,EAAyB7nB,EAAM6nB,uBAClIpW,EAASra,EAAWyjC,aACpBX,EAASvnC,KACTyO,EAAU,CAAE84B,OAAQA,EAAQ/hC,aAAc,MAC1C2jC,EAAgB,CAAE1kC,WAAYA,EAAYqa,OAAQA,EAAQrQ,QAASA;AACvEA,EAAQjJ,aAAe6E,EAAU6C,SAAS27B,EAAqB5T,EAAgBkU,GAC/E5B,EAAO9+B,IAAIgG,EAAQjJ,cACnB+hC,EAAOr6B,SAASG,EAAO6nB,EAC3B,CACA,SAAS2T,EAAoBx7B,GACzB,IAAI5I,EAAa4I,EAAM5I,WAAYqa,EAASzR,EAAMyR,OAAQrQ,EAAUpB,EAAMoB;AACtEA,GAAWA,EAAQ84B,QAAU94B,EAAQjJ,cACrCiJ,EAAQ84B,OAAO53B,OAAOlB,EAAQjJ,cAElCf,EAAWwkC,YAAYnqB,EAC3B,C;AChKA,IAAItb,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBC,EAAiB,EAAQ,OACzBoL,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBsT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AA6ClCniB,EAAQ2e,aAHR,SAAsBiT,EAAUC,GAC5B,OAAO,SAAUhqB,GAAU,OAAOA,EAAOH,KAAK,IAAIkhC,EAAqBhX,EAAUC,GAAmB,CACxG;AAEA,IAAI+W,EAAwB,WACxB,SAASA,EAAqBhX,EAAUC,GACpCryB,KAAKoyB,SAAWA,EAChBpyB,KAAKqyB,gBAAkBA,CAC3B,CAIA,OAHA+W,EAAqBtlC,UAAUiB,KAAO,SAAUN,EAAY4D,GACxD,OAAOA,EAAOL,UAAU,IAAIqhC,EAAuB5kC,EAAYzE,KAAKoyB,SAAUpyB,KAAKqyB,iBACvF,EACO+W,CACX,CAT2B,GAevBC,EAA0B,SAAUllC,GAEpC,SAASklC,EAAuBv/B,EAAasoB,EAAUC,GACnDluB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKoyB,SAAWA,EAChBpyB,KAAKqyB,gBAAkBA,EACvBryB,KAAKm2B,SAAW,GAChBn2B,KAAKyI,IAAIzI,KAAKspC,iBAAmB3mB,EAAoBQ,kBAAkBnjB,KAAMoyB,EAAUA,GAC3F,CAiGA,OAxGA5uB,EAAU6lC,EAAwBllC,GAQlCklC,EAAuBvlC,UAAUiC,MAAQ,SAAU5F,GAC/C,IAAIg2B,EAAWn2B,KAAKm2B;AACpB,GAAIA,EAEA,IADA,IAAIjrB,EAAMirB,EAAS/yB,OACVG,EAAI,EAAGA,EAAI2H,EAAK3H,IACrB4yB,EAAS5yB,GAAGub,OAAO9b,KAAK7C,EAGpC,EACAkpC,EAAuBvlC,UAAUmC,OAAS,SAAUuB,GAChD,IAAI2uB,EAAWn2B,KAAKm2B;AAEpB,GADAn2B,KAAKm2B,SAAW,KACZA,EAGA,IAFA,IAAIjrB,EAAMirB,EAAS/yB,OACfF,GAAS,IACJA,EAAQgI,GAAK,CAClB,IAAIuD,EAAU0nB,EAASjzB;AACvBuL,EAAQqQ,OAAOtf,MAAMgI,GACrBiH,EAAQjJ,aAAaW,aACzB,CAEJhC,EAAOL,UAAUmC,OAAOlB,KAAK/E,KAAMwH,EACvC,EACA6hC,EAAuBvlC,UAAUsC,UAAY,WACzC,IAAI+vB,EAAWn2B,KAAKm2B;AAEpB,GADAn2B,KAAKm2B,SAAW,KACZA,EAGA,IAFA,IAAIjrB,EAAMirB,EAAS/yB,OACfF,GAAS,IACJA,EAAQgI,GAAK,CAClB,IAAIuD,EAAU0nB,EAASjzB;AACvBuL,EAAQqQ,OAAOha,WACf2J,EAAQjJ,aAAaW,aACzB,CAEJhC,EAAOL,UAAUsC,UAAUrB,KAAK/E,KACpC,EACqCqpC,EAAuBvlC,UAAUmL,aAAe,WACjF,IAAIknB,EAAWn2B,KAAKm2B;AAEpB,GADAn2B,KAAKm2B,SAAW,KACZA,EAGA,IAFA,IAAIjrB,EAAMirB,EAAS/yB,OACfF,GAAS,IACJA,EAAQgI,GAAK,CAClB,IAAIuD,EAAU0nB,EAASjzB;AACvBuL,EAAQqQ,OAAO3Y,cACfsI,EAAQjJ,aAAaW,aACzB,CAER,EACAkjC,EAAuBvlC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACpG,GAAIhE,IAAe7F,KAAKoyB,SAAU,CAC9B,IAAIC,EAAkBryB,KAAKqyB,gBACvBN,EAAkB1iB,EAAWO,SAASyiB,EAApBhjB,CAAqC1F;AAC3D,GAAIooB,IAAoBziB,EAAcO,YAClC,OAAO7P,KAAKR,MAAM8P,EAAcO,YAAYC;AAG5C,IAAI+O,EAAW,IAAI7a,EAAUgB,QACzBQ,EAAe,IAAIvB,EAAeW,aAClC6J,EAAU,CAAEqQ,OAAQD,EAAUrZ,aAAcA;AAChDxF,KAAKm2B,SAAS7yB,KAAKmL;AACnB,IAAIoV,EAAoBlB,EAAoBQ,kBAAkBnjB,KAAM+xB,EAAiBtjB;AACjFoV,EAAkBpe,OAClBzF,KAAKipC,YAAYjpC,KAAKm2B,SAAS/yB,OAAS,IAGxCygB,EAAkBpV,QAAUA,EAC5BjJ,EAAaiD,IAAIob,IAErB7jB,KAAK8J,YAAY9G,KAAK6b,EAE9B,MAEI7e,KAAKipC,YAAYjpC,KAAKm2B,SAASroB,QAAQjI,GAE/C,EACAwjC,EAAuBvlC,UAAUoC,YAAc,SAAUsB,GACrDxH,KAAKR,MAAMgI,EACf,EACA6hC,EAAuBvlC,UAAUuC,eAAiB,SAAU6+B,GACpDA,IAAUllC,KAAKspC,kBACftpC,KAAKipC,YAAYjpC,KAAKm2B,SAASroB,QAAQo3B,EAAMz2B,SAErD,EACA46B,EAAuBvlC,UAAUmlC,YAAc,SAAU/lC,GACrD,IAAe,IAAXA,EAAJ,CAGA,IAAIizB,EAAWn2B,KAAKm2B,SAChB1nB,EAAU0nB,EAASjzB,GACnB4b,EAASrQ,EAAQqQ,OAAQtZ,EAAeiJ,EAAQjJ;AACpD2wB,EAAS1qB,OAAOvI,EAAO,GACvB4b,EAAOha,WACPU,EAAaW,aANb,CAOJ,EACOkjC,CACX,CA1G6B,CA0G3BzmB,EAAkBlZ,gB;ACjLpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBqL,EAAa,EAAQ,OACrBC,EAAgB,EAAQ,OACxBsT,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AA4ClCniB,EAAQ6e,WALR,SAAoBgT,GAChB,OAAO,SAAoChqB,GACvC,OAAOA,EAAOH,KAAK,IAAI4/B,EAAezV,GAC1C,CACJ;AAEA,IAAIyV,EAAkB,WAClB,SAASA,EAAezV,GACpBryB,KAAKqyB,gBAAkBA,CAC3B,CAIA,OAHAyV,EAAehkC,UAAUiB,KAAO,SAAUN,EAAY4D,GAClD,OAAOA,EAAOL,UAAU,IAAIggC,EAAiBvjC,EAAYzE,KAAKqyB,iBAClE,EACOyV,CACX,CARqB,GAcjBE,EAAoB,SAAU7jC,GAE9B,SAAS6jC,EAAiBl+B,EAAauoB,GACnCluB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8J,YAAcA,EACnB9J,KAAKqyB,gBAAkBA,EACvBryB,KAAKkoC,YACT,CAkDA,OAxDA1kC,EAAUwkC,EAAkB7jC,GAO5B6jC,EAAiBlkC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC9F7J,KAAKkoC,WAAWr+B,EACpB,EACAm+B,EAAiBlkC,UAAUoC,YAAc,SAAU1G,EAAOqK,GACtD7J,KAAKiG,OAAOzG,EAChB,EACAwoC,EAAiBlkC,UAAUuC,eAAiB,SAAUwD,GAClD7J,KAAKkoC,WAAWr+B,EACpB,EACAm+B,EAAiBlkC,UAAUiC,MAAQ,SAAU5F,GACzCH,KAAK8e,OAAO9b,KAAK7C,EACrB,EACA6nC,EAAiBlkC,UAAUmC,OAAS,SAAUuB,GAC1CxH,KAAK8e,OAAOtf,MAAMgI,GAClBxH,KAAK8J,YAAYtK,MAAMgI,GACvBxH,KAAKupC,gCACT,EACAvB,EAAiBlkC,UAAUsC,UAAY,WACnCpG,KAAK8e,OAAOha,WACZ9E,KAAK8J,YAAYhF,WACjB9E,KAAKupC,gCACT,EACAvB,EAAiBlkC,UAAUylC,+BAAiC,WACpDvpC,KAAKwpC,qBACLxpC,KAAKwpC,oBAAoBrjC,aAEjC,EACA6hC,EAAiBlkC,UAAUokC,WAAa,SAAUr+B,QAC7B,IAAbA,IAAuBA,EAAW,MAClCA,IACA7J,KAAK2P,OAAO9F,GACZA,EAAS1D;AAEb,IAAIgiC,EAAanoC,KAAK8e;AAClBqpB,GACAA,EAAWrjC;AAEf,IAAIga,EAAS9e,KAAK8e,OAAS,IAAI9a,EAAUgB;AACzChF,KAAK8J,YAAY9G,KAAK8b;AACtB,IAAIiT,EAAkB1iB,EAAWO,SAAS5P,KAAKqyB,gBAAzBhjB;AACtB,GAAI0iB,IAAoBziB,EAAcO,YAAa,CAC/C,IAAIrI,EAAM8H,EAAcO,YAAYC;AACpC9P,KAAK8J,YAAYtK,MAAMgI,GACvBxH,KAAK8e,OAAOtf,MAAMgI,EACtB,MAEIxH,KAAKyI,IAAIzI,KAAKwpC,oBAAsB7mB,EAAoBQ,kBAAkBnjB,KAAM+xB,GAExF,EACOiW,CACX,CA1DuB,CA0DrBplB,EAAkBlZ,gB;AC9HpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+e,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ;AAsDlCniB,EAAQ+e,eAdR,WAEI,IADA,IAAIoB,EAAO,GACFrX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCqX,EAAKrX,EAAK,GAAKjF,UAAUiF;AAE7B,OAAO,SAAUjB,GACb,IAAIgiB;AACiC,mBAA1B1J,EAAKA,EAAKvd,OAAS,KAC1BinB,EAAU1J,EAAKL;AAEnB,IAAI8J,EAAczJ;AAClB,OAAOtY,EAAOH,KAAK,IAAIuhC,EAAuBrf,EAAaC,GAC/D,CACJ;AAEA,IAAIof,EAA0B,WAC1B,SAASA,EAAuBrf,EAAaC,GACzCrqB,KAAKoqB,YAAcA,EACnBpqB,KAAKqqB,QAAUA,CACnB,CAIA,OAHAof,EAAuB3lC,UAAUiB,KAAO,SAAUN,EAAY4D,GAC1D,OAAOA,EAAOL,UAAU,IAAI0hC,EAAyBjlC,EAAYzE,KAAKoqB,YAAapqB,KAAKqqB,SAC5F,EACOof,CACX,CAT6B,GAezBC,EAA4B,SAAUvlC,GAEtC,SAASulC,EAAyB5/B,EAAasgB,EAAaC,GACxDlmB,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAKoqB,YAAcA,EACnBpqB,KAAKqqB,QAAUA,EACfrqB,KAAKi4B,UAAY;AACjB,IAAI/sB,EAAMkf,EAAYhnB;AACtBpD,KAAK4jB,OAAS,IAAIzkB,MAAM+L;AACxB,IAAK,IAAI3H,EAAI,EAAGA,EAAI2H,EAAK3H,IACrBvD,KAAKi4B,UAAU30B,KAAKC;AAExB,IAASA,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAI6E,EAAagiB,EAAY7mB;AAC7BvD,KAAKyI,IAAIka,EAAoBQ,kBAAkBnjB,KAAMoI,EAAYA,EAAY7E,GACjF,CACJ,CAoCA,OAnDAC,EAAUkmC,EAA0BvlC,GAgBpCulC,EAAyB5lC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GACtG7J,KAAK4jB,OAAO9d,GAAc6D;AAC1B,IAAIsuB,EAAYj4B,KAAKi4B;AACrB,GAAIA,EAAU70B,OAAS,EAAG,CACtB,IAAIumC,EAAQ1R,EAAUnqB,QAAQhI,IACf,IAAX6jC,GACA1R,EAAUxsB,OAAOk+B,EAAO,EAEhC,CACJ,EACAD,EAAyB5lC,UAAUuC,eAAiB,WAEpD,EACAqjC,EAAyB5lC,UAAUiC,MAAQ,SAAU5F,GACjD,GAA8B,IAA1BH,KAAKi4B,UAAU70B,OAAc,CAC7B,IAAIud,EAAO,CAACxgB,GAAO+P,OAAOlQ,KAAK4jB;AAC3B5jB,KAAKqqB,QACLrqB,KAAKo4B,YAAYzX,GAGjB3gB,KAAK8J,YAAY9G,KAAK2d,EAE9B,CACJ,EACA+oB,EAAyB5lC,UAAUs0B,YAAc,SAAUzX,GACvD,IAAIhe;AACJ,IACIA,EAAS3C,KAAKqqB,QAAQjmB,MAAMpE,KAAM2gB,EAKtC,CAHA,MAAOnZ,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAK8J,YAAY9G,KAAKL,EAC1B,EACO+mC,CACX,CArD+B,CAqD7B9mB,EAAkBlZ,gB;ACjIpB,IAAIlG,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIiiB,EAAoB,EAAQ,MAC5B3W,EAAY,EAAQ,OACpB5B,EAAe,EAAQ,OACvBqV,EAAoB,EAAQ,OAC5BD,EAAsB,EAAQ,OAC9B/V,EAAa,EAAQ;AAkDzB,SAASglB,IAEL,IADA,IAAIxH,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,IAAI+gB,EAAUD,EAAYA,EAAYhnB,OAAS;AAI/C,MAHuB,mBAAZinB,GACPD,EAAY9J,MAET,IAAIwF,EAAkB3F,gBAAgBiK,GAAaliB,KAAK,IAAI0hC,EAAYvf,GACnF,CA3CA7pB,EAAQqT,IATR,WAEI,IADA,IAAIuW,EAAc,GACT9gB,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpC8gB,EAAY9gB,EAAK,GAAKjF,UAAUiF;AAEpC,OAAO,SAA6BjB,GAChC,OAAOA,EAAOH,KAAKnD,KAAK6sB,EAAUxtB,WAAM,EAAQ,CAACiE,GAAQ6H,OAAOka,IACpE,CACJ,EA6CA5pB,EAAQoxB,UAAYA;AACpB,IAAIgY,EAAe,WACf,SAASA,EAAYvf,GACjBrqB,KAAKqqB,QAAUA,CACnB,CAIA,OAHAuf,EAAY9lC,UAAUiB,KAAO,SAAUN,EAAY4D,GAC/C,OAAOA,EAAOL,UAAU,IAAI6hC,EAAcplC,EAAYzE,KAAKqqB,SAC/D,EACOuf,CACX,CARkB;AASlBppC,EAAQopC,YAAcA;AAMtB,IAAIC,EAAiB,SAAU1lC,GAE3B,SAAS0lC,EAAc//B,EAAaugB,EAASzG,QAC1B,IAAXA,IAAqBA,EAASnkB,OAAOsE,OAAO,OAChDI,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK8pC,UAAY,GACjB9pC,KAAKg4B,OAAS,EACdh4B,KAAKqqB,QAA8B,mBAAZA,EAA0BA,EAAU,KAC3DrqB,KAAK4jB,OAASA,CAClB,CAqFA,OA7FApgB,EAAUqmC,EAAe1lC,GASzB0lC,EAAc/lC,UAAUiC,MAAQ,SAAU5F,GACtC,IAAI2pC,EAAY9pC,KAAK8pC;AACjB36B,EAAU/P,QAAQe,GAClB2pC,EAAUxmC,KAAK,IAAIymC,EAAoB5pC,IAEI,mBAA/BA,EAAMyM,EAAWvM,UAC7BypC,EAAUxmC,KAAK,IAAI0mC,EAAe7pC,EAAMyM,EAAWvM,cAGnDypC,EAAUxmC,KAAK,IAAI2mC,EAAkBjqC,KAAK8J,YAAa9J,KAAMG,GAErE,EACA0pC,EAAc/lC,UAAUsC,UAAY,WAChC,IAAI0jC,EAAY9pC,KAAK8pC,UACjB5+B,EAAM4+B,EAAU1mC;AACpB,GAAY,IAAR8H,EAAJ,CAIAlL,KAAKg4B,OAAS9sB;AACd,IAAK,IAAI3H,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIlD,EAAWypC,EAAUvmC;AACrBlD,EAAS6pC,kBACTlqC,KAAKyI,IAAIpI,EAAS2H,UAAU3H,EAAUkD,IAGtCvD,KAAKg4B,QAEb,CAVA,MAFIh4B,KAAK8J,YAAYhF,UAazB,EACA+kC,EAAc/lC,UAAUqmC,eAAiB,WACrCnqC,KAAKg4B,SACe,IAAhBh4B,KAAKg4B,QACLh4B,KAAK8J,YAAYhF,UAEzB,EACA+kC,EAAc/lC,UAAUsmC,eAAiB,WAKrC,IAJA,IAAIN,EAAY9pC,KAAK8pC,UACjB5+B,EAAM4+B,EAAU1mC,OAChB0G,EAAc9J,KAAK8J,YAEdvG,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAE1B,GAAiC,mBAD7BlD,EAAWypC,EAAUvmC,IACLmD,WAA4BrG,EAASqG,WACrD,MAER,CACA,IAAI2jC,GAAiB,EACjB1pB,EAAO;AACX,IAASpd,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIlD,EACAsC,GADAtC,EAAWypC,EAAUvmC,IACHP;AAMtB,GAHI3C,EAASkE,iBACT8lC,GAAiB,GAEjB1nC,EAAOQ,KAEP,YADA2G,EAAYhF;AAGhB6b,EAAKrd,KAAKX,EAAOxC,MACrB,CACIH,KAAKqqB,QACLrqB,KAAKo4B,YAAYzX,GAGjB7W,EAAY9G,KAAK2d,GAEjB0pB,GACAvgC,EAAYhF,UAEpB,EACA+kC,EAAc/lC,UAAUs0B,YAAc,SAAUzX,GAC5C,IAAIhe;AACJ,IACIA,EAAS3C,KAAKqqB,QAAQjmB,MAAMpE,KAAM2gB,EAKtC,CAHA,MAAOnZ,GAEH,YADAxH,KAAK8J,YAAYtK,MAAMgI,EAE3B,CACAxH,KAAK8J,YAAY9G,KAAKL,EAC1B,EACOknC,CACX,CA/FoB,CA+FlBt8B,EAAajH;AACf9F,EAAQqpC,cAAgBA;AACxB,IAAIG,EAAkB,WAClB,SAASA,EAAe3pC,GACpBL,KAAKK,SAAWA,EAChBL,KAAKsqC,WAAajqC,EAAS2C,MAC/B,CAaA,OAZAgnC,EAAelmC,UAAU4C,SAAW,WAChC,OAAO,CACX,EACAsjC,EAAelmC,UAAUd,KAAO,WAC5B,IAAIL,EAAS3C,KAAKsqC;AAElB,OADAtqC,KAAKsqC,WAAatqC,KAAKK,SAAS2C,OACzBL,CACX,EACAqnC,EAAelmC,UAAUS,aAAe,WACpC,IAAI+lC,EAAatqC,KAAKsqC;AACtB,OAAOA,GAAcA,EAAWnnC,IACpC,EACO6mC,CACX,CAlBqB,GAmBjBD,EAAuB,WACvB,SAASA,EAAoB3pB,GACzBpgB,KAAKogB,MAAQA,EACbpgB,KAAKkD,MAAQ,EACblD,KAAKoD,OAAS,EACdpD,KAAKoD,OAASgd,EAAMhd,MACxB,CAeA,OAdA2mC,EAAoBjmC,UAAU8I,EAAWvM,UAAY,WACjD,OAAOL,IACX,EACA+pC,EAAoBjmC,UAAUd,KAAO,SAAU7C,GAC3C,IAAIoD,EAAIvD,KAAKkD,QACTkd,EAAQpgB,KAAKogB;AACjB,OAAO7c,EAAIvD,KAAKoD,OAAS,CAAEjD,MAAOigB,EAAM7c,GAAIJ,MAAM,GAAU,CAAEhD,MAAO,KAAMgD,MAAM,EACrF,EACA4mC,EAAoBjmC,UAAU4C,SAAW,WACrC,OAAO1G,KAAKogB,MAAMhd,OAASpD,KAAKkD,KACpC,EACA6mC,EAAoBjmC,UAAUS,aAAe,WACzC,OAAOvE,KAAKogB,MAAMhd,SAAWpD,KAAKkD,KACtC,EACO6mC,CACX,CAtB0B,GA4BtBE,EAAqB,SAAU9lC,GAE/B,SAAS8lC,EAAkBngC,EAAalE,EAAQwC,GAC5CjE,EAAOY,KAAK/E,KAAM8J,GAClB9J,KAAK4F,OAASA,EACd5F,KAAKoI,WAAaA,EAClBpI,KAAKkqC,mBAAoB,EACzBlqC,KAAKmU,OAAS,GACdnU,KAAKojC,YAAa,CACtB,CAqCA,OA7CA5/B,EAAUymC,EAAmB9lC,GAS7B8lC,EAAkBnmC,UAAU8I,EAAWvM,UAAY,WAC/C,OAAOL,IACX,EAGAiqC,EAAkBnmC,UAAUd,KAAO,WAC/B,IAAImR,EAASnU,KAAKmU;AAClB,OAAsB,IAAlBA,EAAO/Q,QAAgBpD,KAAKojC,WACrB,CAAEjjC,MAAO,KAAMgD,MAAM,GAGrB,CAAEhD,MAAOgU,EAAOoN,QAASpe,MAAM,EAE9C,EACA8mC,EAAkBnmC,UAAU4C,SAAW,WACnC,OAAO1G,KAAKmU,OAAO/Q,OAAS,CAChC,EACA6mC,EAAkBnmC,UAAUS,aAAe,WACvC,OAA8B,IAAvBvE,KAAKmU,OAAO/Q,QAAgBpD,KAAKojC,UAC5C,EACA6G,EAAkBnmC,UAAUuC,eAAiB,WACrCrG,KAAKmU,OAAO/Q,OAAS,GACrBpD,KAAKojC,YAAa,EAClBpjC,KAAK4F,OAAOukC,kBAGZnqC,KAAK8J,YAAYhF,UAEzB,EACAmlC,EAAkBnmC,UAAUkC,WAAa,SAAUH,EAAY8D,EAAY7D,EAAY8D,EAAYC,GAC/F7J,KAAKmU,OAAO7Q,KAAKqG,GACjB3J,KAAK4F,OAAOwkC,gBAChB,EACAH,EAAkBnmC,UAAUkE,UAAY,SAAU7H,EAAO+C,GACrD,OAAOyf,EAAoBQ,kBAAkBnjB,KAAMA,KAAKoI,WAAYpI,KAAMkD,EAC9E,EACO+mC,CACX,CA/CwB,CA+CtBrnB,EAAkBlZ,gB;ACtRpB,IAAIkK,EAAQ,EAAQ;AAIpBpT,EAAQkf,OAHR,SAAgB2K,GACZ,OAAO,SAAUhiB,GAAU,OAAOA,EAAOH,KAAK,IAAI0L,EAAMg2B,YAAYvf,GAAW,CACnF,C;ACHA,IAAI7mB,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAgBI0mC,EAAU,SAAUpmC,GAEpB,SAASomC,EAAOlgC,EAAW8C,GACvBhJ,EAAOY,KAAK/E,KAChB,CAeA,OAlBAwD,EAAU+mC,EAAQpmC,GAclBomC,EAAOzmC,UAAUoJ,SAAW,SAAUG,EAAOD,GAEzC,YADc,IAAVA,IAAoBA,EAAQ,GACzBpN,IACX,EACOuqC,CACX,CApBa,CAfQ,EAAQ,OAmCZ3lC;AACjBpE,EAAQ+pC,OAASA,C;ACzCjB,IAAI/mC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI2mC,EAAgB,EAAQ,OACxBC,EAAmB,EAAQ,OAM3BC,EAAwB,SAAUvmC,GAElC,SAASumC,EAAqBrgC,EAAW8C,GACrChJ,EAAOY,KAAK/E,KAAMqK,EAAW8C,GAC7BnN,KAAKqK,UAAYA,EACjBrK,KAAKmN,KAAOA,CAChB,CAgCA,OArCA3J,EAAUknC,EAAsBvmC,GAMhCumC,EAAqB5mC,UAAU6mC,eAAiB,SAAUtgC,EAAWugC,EAAIx9B,GAGrE,YAFc,IAAVA,IAAoBA,EAAQ,GAElB,OAAVA,GAAkBA,EAAQ,EACnBjJ,EAAOL,UAAU6mC,eAAe5lC,KAAK/E,KAAMqK,EAAWugC,EAAIx9B,IAGrE/C,EAAUwgC,QAAQvnC,KAAKtD,MAIhBqK,EAAUygC,YAAczgC,EAAUygC,UAAYL,EAAiBM,eAAeC,sBAAsB3gC,EAAU4gC,MAAMt8B,KAAKtE,EAAW,QAC/I,EACAqgC,EAAqB5mC,UAAUonC,eAAiB,SAAU7gC,EAAWugC,EAAIx9B,GAKrE,QAJc,IAAVA,IAAoBA,EAAQ,GAIjB,OAAVA,GAAkBA,EAAQ,GAAiB,OAAVA,GAAkBpN,KAAKoN,MAAQ,EACjE,OAAOjJ,EAAOL,UAAUonC,eAAenmC,KAAK/E,KAAMqK,EAAWugC,EAAIx9B;AAKpC,IAA7B/C,EAAUwgC,QAAQznC,SAClBqnC,EAAiBM,eAAeI,qBAAqBP,GACrDvgC,EAAUygC,eAAYrjC,EAI9B,EACOijC,CACX,CAvC2B,CAuCzBF,EAAcY;AAChB5qC,EAAQkqC,qBAAuBA,C;ACpD/B,IAAIlnC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAEIwnC,EAA2B,SAAUlnC,GAErC,SAASknC,IACLlnC,EAAOC,MAAMpE,KAAMqE,UACvB,CAsBA,OAzBAb,EAAU6nC,EAAyBlnC,GAInCknC,EAAwBvnC,UAAUmnC,MAAQ,SAAU1D,GAChDvnC,KAAKg4B,QAAS,EACdh4B,KAAK8qC,eAAYrjC;AACjB,IACIjI,EADAqrC,EAAU7qC,KAAK6qC,QAEf3nC,GAAS,EACTvB,EAAQkpC,EAAQznC;AACpBmkC,EAASA,GAAUsD,EAAQtpB;AAC3B,GACI,GAAI/hB,EAAQ+nC,EAAO+D,QAAQ/D,EAAOl6B,MAAOk6B,EAAOn6B,OAC5C,cAEGlK,EAAQvB,IAAU4lC,EAASsD,EAAQtpB;AAE9C,GADAvhB,KAAKg4B,QAAS,EACVx4B,EAAO,CACP,OAAS0D,EAAQvB,IAAU4lC,EAASsD,EAAQtpB,UACxCgmB,EAAOphC;AAEX,MAAM3G,CACV,CACJ,EACO6rC,CACX,CA3B8B,CADP,EAAQ,OA4BZE;AACnB/qC,EAAQ6qC,wBAA0BA,C;AClClC,IAAI7nC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI2nC,EAAc,EAAQ,OAOtBC,EAAc,SAAUtnC,GAExB,SAASsnC,EAAWphC,EAAW8C,GAC3BhJ,EAAOY,KAAK/E,KAAMqK,EAAW8C,GAC7BnN,KAAKqK,UAAYA,EACjBrK,KAAKmN,KAAOA,CAChB,CAgCA,OArCA3J,EAAUioC,EAAYtnC,GAMtBsnC,EAAW3nC,UAAU6mC,eAAiB,SAAUtgC,EAAWugC,EAAIx9B,GAG3D,YAFc,IAAVA,IAAoBA,EAAQ,GAElB,OAAVA,GAAkBA,EAAQ,EACnBjJ,EAAOL,UAAU6mC,eAAe5lC,KAAK/E,KAAMqK,EAAWugC,EAAIx9B,IAGrE/C,EAAUwgC,QAAQvnC,KAAKtD,MAIhBqK,EAAUygC,YAAczgC,EAAUygC,UAAYU,EAAYE,UAAUC,aAAathC,EAAU4gC,MAAMt8B,KAAKtE,EAAW,QAC5H,EACAohC,EAAW3nC,UAAUonC,eAAiB,SAAU7gC,EAAWugC,EAAIx9B,GAK3D,QAJc,IAAVA,IAAoBA,EAAQ,GAIjB,OAAVA,GAAkBA,EAAQ,GAAiB,OAAVA,GAAkBpN,KAAKoN,MAAQ,EACjE,OAAOjJ,EAAOL,UAAUonC,eAAenmC,KAAK/E,KAAMqK,EAAWugC,EAAIx9B;AAKpC,IAA7B/C,EAAUwgC,QAAQznC,SAClBooC,EAAYE,UAAUE,eAAehB,GACrCvgC,EAAUygC,eAAYrjC,EAI9B,EACOgkC,CACX,CAvCiB,CANG,EAAQ,OA6CZL;AAChB5qC,EAAQirC,WAAaA,C;ACpDrB,IAAIjoC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAEIgoC,EAAiB,SAAU1nC,GAE3B,SAAS0nC,IACL1nC,EAAOC,MAAMpE,KAAMqE,UACvB,CAsBA,OAzBAb,EAAUqoC,EAAe1nC,GAIzB0nC,EAAc/nC,UAAUmnC,MAAQ,SAAU1D,GACtCvnC,KAAKg4B,QAAS,EACdh4B,KAAK8qC,eAAYrjC;AACjB,IACIjI,EADAqrC,EAAU7qC,KAAK6qC,QAEf3nC,GAAS,EACTvB,EAAQkpC,EAAQznC;AACpBmkC,EAASA,GAAUsD,EAAQtpB;AAC3B,GACI,GAAI/hB,EAAQ+nC,EAAO+D,QAAQ/D,EAAOl6B,MAAOk6B,EAAOn6B,OAC5C,cAEGlK,EAAQvB,IAAU4lC,EAASsD,EAAQtpB;AAE9C,GADAvhB,KAAKg4B,QAAS,EACVx4B,EAAO,CACP,OAAS0D,EAAQvB,IAAU4lC,EAASsD,EAAQtpB,UACxCgmB,EAAOphC;AAEX,MAAM3G,CACV,CACJ,EACOqsC,CACX,CA3BoB,CADG,EAAQ,OA4BZN;AACnB/qC,EAAQqrC,cAAgBA,C;AClCxB,IAAIroC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI+D,EAAS,EAAQ,OAOjBwjC,EAAe,SAAUjnC,GAEzB,SAASinC,EAAY/gC,EAAW8C,GAC5BhJ,EAAOY,KAAK/E,KAAMqK,EAAW8C,GAC7BnN,KAAKqK,UAAYA,EACjBrK,KAAK8rC,SAAU,EACf9rC,KAAKmN,KAAOA,CAChB,CAsHA,OA5HA3J,EAAU4nC,EAAajnC,GAOvBinC,EAAYtnC,UAAUoJ,SAAW,SAAUG,EAAOD,GAE9C,QADc,IAAVA,IAAoBA,EAAQ,GAC5BpN,KAAKyF,OACL,OAAOzF;AAGXA,KAAKqN,MAAQA,EAGbrN,KAAK8rC,SAAU;AACf,IAAIlB,EAAK5qC,KAAK4qC,GACVvgC,EAAYrK,KAAKqK;AA4BrB,OANU,MAANugC,IACA5qC,KAAK4qC,GAAK5qC,KAAKkrC,eAAe7gC,EAAWugC,EAAIx9B,IAEjDpN,KAAKoN,MAAQA,EAEbpN,KAAK4qC,GAAK5qC,KAAK4qC,IAAM5qC,KAAK2qC,eAAetgC,EAAWrK,KAAK4qC,GAAIx9B,GACtDpN,IACX,EACAorC,EAAYtnC,UAAU6mC,eAAiB,SAAUtgC,EAAWugC,EAAIx9B,GAE5D,YADc,IAAVA,IAAoBA,EAAQ,GACzBxF,EAAOqB,KAAK8iC,YAAY1hC,EAAU4gC,MAAMt8B,KAAKtE,EAAWrK,MAAOoN,EAC1E,EACAg+B,EAAYtnC,UAAUonC,eAAiB,SAAU7gC,EAAWugC,EAAIx9B,GAG5D,QAFc,IAAVA,IAAoBA,EAAQ,GAElB,OAAVA,GAAkBpN,KAAKoN,QAAUA,IAA0B,IAAjBpN,KAAK8rC,QAC/C,OAAOlB;AAIJhjC,EAAOqB,KAAK+iC,cAAcpB,EACrC,EAKAQ,EAAYtnC,UAAUwnC,QAAU,SAAUj+B,EAAOD,GAC7C,GAAIpN,KAAKyF,OACL,OAAO,IAAIzG,MAAM;AAErBgB,KAAK8rC,SAAU;AACf,IAAItsC,EAAQQ,KAAKisC,SAAS5+B,EAAOD;AACjC,GAAI5N,EACA,OAAOA;CAEe,IAAjBQ,KAAK8rC,SAAgC,MAAX9rC,KAAK4qC,KAcpC5qC,KAAK4qC,GAAK5qC,KAAKkrC,eAAelrC,KAAKqK,UAAWrK,KAAK4qC,GAAI,MAE/D,EACAQ,EAAYtnC,UAAUmoC,SAAW,SAAU5+B,EAAOD,GAC9C,IAAIqsB,GAAU,EACVyS,OAAazkC;AACjB,IACIzH,KAAKmN,KAAKE,EAKd,CAHA,MAAOyC,GACH2pB,GAAU,EACVyS,IAAep8B,GAAKA,GAAK,IAAI9Q,MAAM8Q,EACvC,CACA,GAAI2pB,EAEA,OADAz5B,KAAKmG,cACE+lC,CAEf,EACqCd,EAAYtnC,UAAUmL,aAAe,WACtE,IAAI27B,EAAK5qC,KAAK4qC,GACVvgC,EAAYrK,KAAKqK,UACjBwgC,EAAUxgC,EAAUwgC,QACpB3nC,EAAQ2nC,EAAQ/8B,QAAQ9N;AAC5BA,KAAKmN,KAAO,KACZnN,KAAKqN,MAAQ,KACbrN,KAAK8rC,SAAU,EACf9rC,KAAKqK,UAAY,MACF,IAAXnH,GACA2nC,EAAQp/B,OAAOvI,EAAO,GAEhB,MAAN0nC,IACA5qC,KAAK4qC,GAAK5qC,KAAKkrC,eAAe7gC,EAAWugC,EAAI,OAEjD5qC,KAAKoN,MAAQ,IACjB,EACOg+B,CACX,CA9HkB,CANH,EAAQ,OAoIZb;AACX/pC,EAAQ4qC,YAAcA,C;AC3ItB,IAAI5nC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAEI0nC,EAAkB,SAAUpnC,GAE5B,SAASonC,IACLpnC,EAAOC,MAAMpE,KAAMqE,WACnBrE,KAAK6qC,QAAU,GAMf7qC,KAAKg4B,QAAS,EAOdh4B,KAAK8qC,eAAYrjC,CACrB,CAsBA,OAvCAjE,EAAU+nC,EAAgBpnC,GAkB1BonC,EAAeznC,UAAUmnC,MAAQ,SAAU1D,GACvC,IAAIsD,EAAU7qC,KAAK6qC;AACnB,GAAI7qC,KAAKg4B,OACL6S,EAAQvnC,KAAKikC;IADjB,CAIA,IAAI/nC;AACJQ,KAAKg4B,QAAS;AACd,GACI,GAAIx4B,EAAQ+nC,EAAO+D,QAAQ/D,EAAOl6B,MAAOk6B,EAAOn6B,OAC5C,YAECm6B,EAASsD,EAAQtpB;AAE1B,GADAvhB,KAAKg4B,QAAS,EACVx4B,EAAO,CACP,KAAO+nC,EAASsD,EAAQtpB,SACpBgmB,EAAOphC;AAEX,MAAM3G,CACV,CAdA,CAeJ,EACO+rC,CACX,CAzCqB,CADH,EAAQ,OA0CZv+B;AACdxM,EAAQ+qC,eAAiBA,C;AChDzB,IAAI/nC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAOIsoC,EAAe,SAAUhoC,GAEzB,SAASgoC,EAAY9hC,EAAW8C,GAC5BhJ,EAAOY,KAAK/E,KAAMqK,EAAW8C,GAC7BnN,KAAKqK,UAAYA,EACjBrK,KAAKmN,KAAOA,CAChB,CA2BA,OAhCA3J,EAAU2oC,EAAahoC,GAMvBgoC,EAAYroC,UAAUoJ,SAAW,SAAUG,EAAOD,GAE9C,YADc,IAAVA,IAAoBA,EAAQ,GAC5BA,EAAQ,EACDjJ,EAAOL,UAAUoJ,SAASnI,KAAK/E,KAAMqN,EAAOD,IAEvDpN,KAAKoN,MAAQA,EACbpN,KAAKqN,MAAQA,EACbrN,KAAKqK,UAAU4gC,MAAMjrC,MACdA,KACX,EACAmsC,EAAYroC,UAAUwnC,QAAU,SAAUj+B,EAAOD,GAC7C,OAAQA,EAAQ,GAAKpN,KAAKyF,OACtBtB,EAAOL,UAAUwnC,QAAQvmC,KAAK/E,KAAMqN,EAAOD,GAC3CpN,KAAKisC,SAAS5+B,EAAOD,EAC7B,EACA++B,EAAYroC,UAAU6mC,eAAiB,SAAUtgC,EAAWugC,EAAIx9B,GAK5D,YAJc,IAAVA,IAAoBA,EAAQ,GAIjB,OAAVA,GAAkBA,EAAQ,GAAiB,OAAVA,GAAkBpN,KAAKoN,MAAQ,EAC1DjJ,EAAOL,UAAU6mC,eAAe5lC,KAAK/E,KAAMqK,EAAWugC,EAAIx9B,GAG9D/C,EAAU4gC,MAAMjrC,KAC3B,EACOmsC,CACX,CAlCkB,CANE,EAAQ,OAwCZf;AAChB5qC,EAAQ2rC,YAAcA,C;AC9CtB,IAAI3oC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAEIuoC,EAAkB,SAAUjoC,GAE5B,SAASioC,IACLjoC,EAAOC,MAAMpE,KAAMqE,UACvB,CACA,OAJAb,EAAU4oC,EAAgBjoC,GAInBioC,CACX,CANqB,CADE,EAAQ,OAOZb;AACnB/qC,EAAQ4rC,eAAiBA,C;ACbzB,IAAI5oC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI2mC,EAAgB,EAAQ,OAExBr+B,EAAwB,SAAUhI,GAElC,SAASgI,EAAqBc,EAAiBo/B,GAC3C,IAAIrjC,EAAQhJ;KACY,IAApBiN,IAA8BA,EAAkBq/B,QAClC,IAAdD,IAAwBA,EAAY5pC,OAAO6H,mBAC/CnG,EAAOY,KAAK/E,KAAMiN,GAAiB,WAAc,OAAOjE,EAAMujC,KAAO,IACrEvsC,KAAKqsC,UAAYA,EACjBrsC,KAAKusC,MAAQ,EACbvsC,KAAKkD,OAAS,CAClB,CAsBA,OA/BAM,EAAU2I,EAAsBhI,GAehCgI,EAAqBrI,UAAUmnC,MAAQ,WAGnC,IAFA,IACIzrC,EAAO+nC,EADIsD,EAAN7qC,KAAmB6qC,QAASwB,EAA5BrsC,KAA2CqsC,WAE5C9E,EAASsD,EAAQtpB,WAAavhB,KAAKusC,MAAQhF,EAAOn6B,QAAUi/B,KAC5D7sC,EAAQ+nC,EAAO+D,QAAQ/D,EAAOl6B,MAAOk6B,EAAOn6B,UAIpD,GAAI5N,EAAO,CACP,KAAO+nC,EAASsD,EAAQtpB,SACpBgmB,EAAOphC;AAEX,MAAM3G,CACV,CACJ,EACA2M,EAAqBqgC,gBAAkB,GAChCrgC,CACX,CAjC2B,CADJ,EAAQ,OAkCZo/B;AACnB/qC,EAAQ2L,qBAAuBA;AAM/B,IAAImgC,EAAiB,SAAUnoC,GAE3B,SAASmoC,EAAcjiC,EAAW8C,EAAMjK,QACtB,IAAVA,IAAoBA,EAAQmH,EAAUnH,OAAS,GACnDiB,EAAOY,KAAK/E,KAAMqK,EAAW8C,GAC7BnN,KAAKqK,UAAYA,EACjBrK,KAAKmN,KAAOA,EACZnN,KAAKkD,MAAQA,EACblD,KAAKg4B,QAAS,EACdh4B,KAAKkD,MAAQmH,EAAUnH,MAAQA,CACnC,CAmDA,OA5DAM,EAAU8oC,EAAenoC,GAUzBmoC,EAAcxoC,UAAUoJ,SAAW,SAAUG,EAAOD,GAEhD,QADc,IAAVA,IAAoBA,EAAQ,IAC3BpN,KAAK4qC,GACN,OAAOzmC,EAAOL,UAAUoJ,SAASnI,KAAK/E,KAAMqN,EAAOD;AAEvDpN,KAAKg4B,QAAS;AAKd,IAAIuP,EAAS,IAAI+E,EAActsC,KAAKqK,UAAWrK,KAAKmN;AAEpD,OADAnN,KAAKyI,IAAI8+B,GACFA,EAAOr6B,SAASG,EAAOD,EAClC,EACAk/B,EAAcxoC,UAAU6mC,eAAiB,SAAUtgC,EAAWugC,EAAIx9B,QAChD,IAAVA,IAAoBA,EAAQ,GAChCpN,KAAKoN,MAAQ/C,EAAUkiC,MAAQn/B;AAC/B,IAAIy9B,EAAUxgC,EAAUwgC;AAGxB,OAFAA,EAAQvnC,KAAKtD,MACb6qC,EAAQ4B,KAAKH,EAAcI,cACpB,CACX,EACAJ,EAAcxoC,UAAUonC,eAAiB,SAAU7gC,EAAWugC,EAAIx9B,QAChD,IAAVA,IAAoBA,EAAQ,EAEpC,EACAk/B,EAAcxoC,UAAUmoC,SAAW,SAAU5+B,EAAOD,GAChD,IAAoB,IAAhBpN,KAAKg4B,OACL,OAAO7zB,EAAOL,UAAUmoC,SAASlnC,KAAK/E,KAAMqN,EAAOD,EAE3D,EACAk/B,EAAcI,YAAc,SAAU1J,EAAGt/B,GACrC,OAAIs/B,EAAE51B,QAAU1J,EAAE0J,MACV41B,EAAE9/B,QAAUQ,EAAER,MACP,EAEF8/B,EAAE9/B,MAAQQ,EAAER,MACV,GAGC,EAGP8/B,EAAE51B,MAAQ1J,EAAE0J,MACV,GAGC,CAEhB,EACOk/B,CACX,CA9DoB,CA8DlB9B,EAAcY;AAChB5qC,EAAQ8rC,cAAgBA,C;AC9GxB,IAAIK,EAAyB,EAAQ,MACjCC,EAA4B,EAAQ;AA+BxCpsC,EAAQsM,eAAiB,IAAI8/B,EAA0BvB,wBAAwBsB,EAAuBjC,qB;AChCtG,IAAImC,EAAe,EAAQ,OACvBC,EAAkB,EAAQ;AAmC9BtsC,EAAQqM,KAAO,IAAIigC,EAAgBjB,cAAcgB,EAAapB,W;ACpC9D,IAAIjB,EAAgB,EAAQ,OACxBuC,EAAmB,EAAQ;AA2C/BvsC,EAAQwB,MAAQ,IAAI+qC,EAAiBxB,eAAef,EAAcY,Y;AC5ClE,IAAI4B,EAAgB,EAAQ,MACxBC,EAAmB,EAAQ;AA8D/BzsC,EAAQ2K,MAAQ,IAAI8hC,EAAiBb,eAAeY,EAAcb,Y;AC/DlE,IAAIvkC,EAAS,EAAQ;AACrB,SAASslC,EAAuBjkC,GAC5B,IAAI7I,EAAS6I,EAAK7I;AAClB,GAAsB,mBAAXA,EAIP,OAHKA,EAAOC,WACRD,EAAOC,SAAWD,EAAO,sBAEtBA,EAAOC;AAId,IAAIw6B,EAAQ5xB,EAAK+xB;AACjB,GAAIH,GAA8C,mBAA9B,IAAIA,GAAQ,cAC5B,MAAO;AAEX,IAAI2C,EAAQv0B,EAAK+0B;AAEjB,GAAIR,EAEA,IADA,IAAI3U,EAAOppB,OAAO0tC,oBAAoB3P,EAAM15B,WACnCP,EAAI,EAAGA,EAAIslB,EAAKzlB,SAAUG,EAAG,CAClC,IAAIulB,EAAMD,EAAKtlB;AAEf,GAAY,YAARulB,GAA6B,SAARA,GAAkB0U,EAAM15B,UAAUglB,KAAS0U,EAAM15B,UAAmB,QACzF,OAAOglB,CAEf,CAEJ,MAAO,YAEf,CACAtoB,EAAQ0sC,uBAAyBA,EACjC1sC,EAAQH,SAAW6sC,EAAuBtlC,EAAOqB,MAIjDzI,EAAQ4sC,WAAa5sC,EAAQH,Q;ACnC7B,IAAIuH,EAAS,EAAQ;AACrB,SAASylC,EAAoB5+B,GACzB,IAAI6+B,EACAltC,EAASqO,EAAQrO;AAarB,MAZsB,mBAAXA,EACHA,EAAOgI,WACPklC,EAAeltC,EAAOgI,YAGtBklC,EAAeltC,EAAO,cACtBA,EAAOgI,WAAaklC,GAIxBA,EAAe,eAEZA,CACX,CACA9sC,EAAQ6sC,oBAAsBA,EAC9B7sC,EAAQ4H,WAAailC,EAAoBzlC,EAAOqB,MAIhDzI,EAAQ8sC,aAAe9sC,EAAQ4H,U;ACvB/B,IACIhI,EADS,EAAQ,OACD6I,KAAK7I;AACzBI,EAAQuM,aAAkC,mBAAX3M,GAA+C,mBAAfA,EAAOmtC,IAClEntC,EAAOmtC,IAAI,gBAAkB,iBAIjC/sC,EAAQgtC,eAAiBhtC,EAAQuM,Y;ACPjC,IAAIvJ,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvBtC,EAAiB,EAAQ,OACzBwpC,EAAyB,EAAQ,MACjCC,EAAgB,EAAQ,OAMxBC,EAAkB,SAAUxpC,GAE5B,SAASwpC,EAAeC,EAAUvjC,GAC9BlG,EAAOY,KAAK/E,MAAM,SAAUyE,GACxB,IAAI2D,EAAapI,KACbkD,EAAQkF,EAAWylC;AAKvB,OAJAppC,EAAWgE,IAAI,IAAIxE,EAAeW,cAAa,WAC3CwD,EAAW0lC,qBAAqB5qC,EACpC,KACAkF,EAAW2lC,iBAAiBtpC,GACrBA,CACX,IACAzE,KAAK4tC,SAAWA,EAChB5tC,KAAKsQ,cAAgB,GACrBtQ,KAAKqK,UAAYA,CACrB,CAWA,OAzBA7G,EAAUmqC,EAAgBxpC,GAe1BwpC,EAAe7pC,UAAUiqC,iBAAmB,SAAUtpC,GAElD,IADA,IAAIupC,EAAiBhuC,KAAK4tC,SAASxqC,OAC1BG,EAAI,EAAGA,EAAIyqC,EAAgBzqC,IAAK,CACrC,IAAIjE,EAAUU,KAAK4tC,SAASrqC;AAC5BkB,EAAWgE,IAAIzI,KAAKqK,UAAU6C,UAAS,SAAUwC,GAC7C,IAAIpQ,EAAUoQ,EAAGpQ,QAASmF,EAAaiL,EAAGjL;AAC1CnF,EAAQo6B,aAAa/yB,QAAQlC,EACjC,GAAGnF,EAAQitC,MAAO,CAAEjtC,QAASA,EAASmF,WAAYA,IACtD,CACJ,EACOkpC,CACX,CA3BqB,CA2BnBpnC,EAAaU;AACfzG,EAAQmtC,eAAiBA,EACzBD,EAAcO,YAAYN,EAAgB,CAACF,EAAuBS,sB;AC3ClE,IAAI1qC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACIG,EAAY,EAAQ,OACpBC,EAAiB,EAAQ,OACzBwpC,EAAyB,EAAQ,MACjCC,EAAgB,EAAQ,OAMxBS,EAAiB,SAAUhqC,GAE3B,SAASgqC,EAAcP,EAAUvjC,GAC7BlG,EAAOY,KAAK/E,MACZA,KAAK4tC,SAAWA,EAChB5tC,KAAKsQ,cAAgB,GACrBtQ,KAAKqK,UAAYA,CACrB,CAqBA,OA3BA7G,EAAU2qC,EAAehqC,GAOYgqC,EAAcrqC,UAAUU,WAAa,SAAUC,GAChF,IAAIgJ,EAAUzN,KACVkD,EAAQuK,EAAQogC;AAIpB,OAHAppC,EAAWgE,IAAI,IAAIxE,EAAeW,cAAa,WAC3C6I,EAAQqgC,qBAAqB5qC,EACjC,KACOiB,EAAOL,UAAUU,WAAWO,KAAK/E,KAAMyE,EAClD,EACA0pC,EAAcrqC,UAAUsqC,MAAQ,WAI5B,IAHA,IAAI3gC,EAAUzN,KACVguC,EAAiBvgC,EAAQmgC,SAASxqC,OAE7BG,EAAI,EAAGA,EAAIyqC,EAAgBzqC,KAChC,WACI,IAAIjE,EAAUmO,EAAQmgC,SAASrqC;AAE/BkK,EAAQpD,UAAU6C,UAAS,WAAc5N,EAAQo6B,aAAa/yB,QAAQ8G,EAAU,GAAGnO,EAAQitC,MAC9F,CAJD,EAMR,EACO4B,CACX,CA7BoB,CA6BlBnqC,EAAUgB;AACZxE,EAAQ2tC,cAAgBA,EACxBT,EAAcO,YAAYE,EAAe,CAACV,EAAuBS,sB;AC7CjE,IAAIG,EACA,SAAyBC,EAAiBC,QACZ,IAAtBA,IAAgCA,EAAoB9rC,OAAO6H,mBAC/DtK,KAAKsuC,gBAAkBA,EACvBtuC,KAAKuuC,kBAAoBA,CAC7B;AAGJ/tC,EAAQ6tC,gBAAkBA,C;ACR1B,IAAIG,EAAoB,EAAQ,MAC5BN,EAAwB,WACxB,SAASA,IACLluC,KAAKsQ,cAAgB,EACzB,CAUA,OATA49B,EAAqBpqC,UAAU+pC,mBAAqB,WAEhD,OADA7tC,KAAKsQ,cAAchN,KAAK,IAAIkrC,EAAkBH,gBAAgBruC,KAAKqK,UAAUK,QACtE1K,KAAKsQ,cAAclN,OAAS,CACvC,EACA8qC,EAAqBpqC,UAAUgqC,qBAAuB,SAAU5qC,GAC5D,IAAIurC,EAAmBzuC,KAAKsQ,cACxBo+B,EAAqBD,EAAiBvrC;AAC1CurC,EAAiBvrC,GAAS,IAAIsrC,EAAkBH,gBAAgBK,EAAmBJ,gBAAiBtuC,KAAKqK,UAAUK,MACvH,EACOwjC,CACX,CAd2B;AAe3B1tC,EAAQ0tC,qBAAuBA,C;AChB/B,IAAI1qC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EACI0C,EAAe,EAAQ,OACvB8yB,EAAiB,EAAQ,OACzBsV,EAAmB,EAAQ,OAC3BC,EAAkB,EAAQ,OAC1BJ,EAAoB,EAAQ,MAC5BK,EAAyB,EAAQ,OAEjC3iC,EAAiB,SAAU/H,GAE3B,SAAS+H,EAAc4iC,GACnB3qC,EAAOY,KAAK/E,KAAM6uC,EAAuBvC,cAJ3B,KAKdtsC,KAAK8uC,gBAAkBA,EACvB9uC,KAAK+uC,eAAiB,GACtB/uC,KAAKgvC,gBAAkB,GACvBhvC,KAAKivC,WAAa,EACtB,CAsMA,OA7MAzrC,EAAU0I,EAAe/H,GAQzB+H,EAAcpI,UAAUorC,WAAa,SAAUC,GAC3C,IAAIrhC,EAAUqhC,EAAQrhC,QAAQ;AAC9B,IAAiB,IAAbA,EACA,MAAM,IAAI9O,MAAM;AAEpB,OAAO8O,EAAU5B,EAAcsgC,eACnC,EACAtgC,EAAcpI,UAAUsrC,qBAAuB,SAAUD,EAASvrB,EAAQpkB,GACtE,IAA8B,IAA1B2vC,EAAQrhC,QAAQ,KAChB,MAAM,IAAI9O,MAAM;AAEpB,IAA8B,IAA1BmwC,EAAQrhC,QAAQ,KAChB,MAAM,IAAI9O,MAAM;AAEpB,IAAI4uC,EAAW1hC,EAAcmjC,aAAaF,EAASvrB,EAAQpkB,GACvD8vC,EAAO,IAAIX,EAAiBhB,eAAeC,EAAU5tC;AAEzD,OADAA,KAAKgvC,gBAAgB1rC,KAAKgsC,GACnBA,CACX,EACApjC,EAAcpI,UAAUyrC,oBAAsB,SAAUJ,EAASvrB,EAAQpkB,GACrE,IAA8B,IAA1B2vC,EAAQrhC,QAAQ,KAChB,MAAM,IAAI9O,MAAM;AAEpB,IAAI4uC,EAAW1hC,EAAcmjC,aAAaF,EAASvrB,EAAQpkB,GACvDiO,EAAU,IAAImhC,EAAgBT,cAAcP,EAAU5tC;AAE1D,OADAA,KAAK+uC,eAAezrC,KAAKmK,GAClBA,CACX,EACAvB,EAAcpI,UAAU0rC,2BAA6B,SAAUpnC,EAAYqnC,GACvE,IAAIzmC,EAAQhJ,KACR4tC,EAAW;AAQf,OAPAxlC,EAAWJ,WAAU,SAAU7H,GAC3BytC,EAAStqC,KAAK,CAAEipC,MAAOvjC,EAAMujC,MAAQkD,EAAY/V,aAAcL,EAAe7yB,aAAaa,WAAWlH,IAC1G,IAAG,SAAUqH,GACTomC,EAAStqC,KAAK,CAAEipC,MAAOvjC,EAAMujC,MAAQkD,EAAY/V,aAAcL,EAAe7yB,aAAae,YAAYC,IAC3G,IAAG,WACComC,EAAStqC,KAAK,CAAEipC,MAAOvjC,EAAMujC,MAAQkD,EAAY/V,aAAcL,EAAe7yB,aAAakB,kBAC/F,IACOkmC,CACX,EACA1hC,EAAcpI,UAAU4rC,iBAAmB,SAAUtnC,EAAYunC,GAC7D,IAAI3mC,EAAQhJ;KACkB,IAA1B2vC,IAAoCA,EAAwB;AAChE,IAIInqC,EAJAoqC,EAAS,GACTC,EAAY,CAAED,OAAQA,EAAQE,OAAO,GACrCC,EAAsB7jC,EACrB8jC,4BAA4BL,GAAuBpB;AAoBxD,OAlBAvuC,KAAKkN,UAAS,WACV1H,EAAe4C,EAAWJ,WAAU,SAAUyB,GAC1C,IAAItJ,EAAQsJ;AAERA,aAAalD,EAAaU,aAC1B9G,EAAQ6I,EAAMwmC,2BAA2BrvC,EAAO6I,EAAMujC,QAE1DqD,EAAOtsC,KAAK,CAAEipC,MAAOvjC,EAAMujC,MAAO7S,aAAcL,EAAe7yB,aAAaa,WAAWlH,IAC3F,IAAG,SAAUqH,GACTooC,EAAOtsC,KAAK,CAAEipC,MAAOvjC,EAAMujC,MAAO7S,aAAcL,EAAe7yB,aAAae,YAAYC,IAC5F,IAAG,WACCooC,EAAOtsC,KAAK,CAAEipC,MAAOvjC,EAAMujC,MAAO7S,aAAcL,EAAe7yB,aAAakB,kBAChF,GACJ,GAAG,GACCqoC,IAAwBttC,OAAO6H,mBAC/BtK,KAAKkN,UAAS,WAAc,OAAO1H,EAAaW,aAAe,GAAG4pC,GAEtE/vC,KAAKivC,WAAW3rC,KAAKusC,GACd,CACHI,KAAM,SAAUd,EAASvrB,EAAQsoB,GAC7B2D,EAAUC,OAAQ,EAClBD,EAAUK,SAAWhkC,EAAcmjC,aAAaF,EAASvrB,EAAQsoB,GAAY,EACjF,EAER,EACAhgC,EAAcpI,UAAUqsC,oBAAsB,SAAUC,GACpD,IAAIP,EAAY,CAAED,OAAQQ,EAAwBN,OAAO;AAEzD,OADA9vC,KAAKivC,WAAW3rC,KAAKusC,GACd,CACHI,KAAM,SAAUd,GACZ,IAAIkB,EAAmC,iBAAZlB,EAAwB,CAACA,GAAWA;AAC/DU,EAAUC,OAAQ,EAClBD,EAAUK,SAAWG,EAAa9wC,KAAI,SAAU4vC,GAC5C,OAAOjjC,EAAc8jC,4BAA4Bb,EACrD,GACJ,EAER,EACAjjC,EAAcpI,UAAUmnC,MAAQ,WAE5B,IADA,IAAI8D,EAAiB/uC,KAAK+uC,eACnBA,EAAe3rC,OAAS,GAC3B2rC,EAAextB,QAAQ6sB;AAE3BjqC,EAAOL,UAAUmnC,MAAMlmC,KAAK/E;AAE5B,IADA,IAAIswC,EAAkBtwC,KAAKivC,WAAWhuC,QAAO,SAAUK,GAAQ,OAAOA,EAAKwuC,KAAO,IAC3EQ,EAAgBltC,OAAS,GAAG,CAC/B,IAAI9B,EAAOgvC,EAAgB/uB;AAC3BvhB,KAAK8uC,gBAAgBxtC,EAAKsuC,OAAQtuC,EAAK4uC,SAC3C,CACJ,EACAhkC,EAAc8jC,4BAA8B,SAAUb,GAClD,GAAuB,iBAAZA,EACP,OAAO,IAAIX,EAAkBH,gBAAgB5rC,OAAO6H;AAMxD,IAJA,IAAIY,EAAMikC,EAAQ/rC,OACdmtC,GAAc,EACdC,EAAoB/tC,OAAO6H,kBAC3BylC,EAAsBttC,OAAO6H,kBACxB/G,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIgpC,EAAQhpC,EAAIvD,KAAKwsC,gBACjBhE,EAAI2G,EAAQ5rC;AAChB,OAAQilC,GACJ,IAAK,IACL,IAAK,IACD;AACJ,IAAK,IACD+H,EAAahE;AACb;AACJ,IAAK,IACDgE,GAAc;AACd;AACJ,IAAK,IACD,GAAIC,IAAsB/tC,OAAO6H,kBAC7B,MAAM,IAAItL,MAAM;AAGpBwxC,EAAoBD,GAAc,EAAIA,EAAahE;AACnD;AACJ,IAAK,IACD,GAAIwD,IAAwBttC,OAAO6H,kBAC/B,MAAM,IAAItL,MAAM;AAGpB+wC,EAAsBQ,GAAc,EAAIA,EAAahE;AACrD;AACJ,QACI,MAAM,IAAIvtC,MAAM,0FACsCwpC,EAAI,MAEtE,CACA,OAAIuH,EAAsB,EACf,IAAIvB,EAAkBH,gBAAgBmC,GAGtC,IAAIhC,EAAkBH,gBAAgBmC,EAAmBT,EAExE,EACA7jC,EAAcmjC,aAAe,SAAUF,EAASvrB,EAAQsoB,EAAYuE,GAEhE,QADoC,IAAhCA,IAA0CA,GAA8B,IAC9C,IAA1BtB,EAAQrhC,QAAQ,KAChB,MAAM,IAAI9O,MAAM;AAiBpB,IAdA,IAAIkM,EAAMikC,EAAQ/rC,OACdstC,EAAe,GACfC,EAAWxB,EAAQrhC,QAAQ,KAC3B8iC,GAA4B,IAAdD,EAAkB,EAAKA,GAAY3wC,KAAKwsC,gBACtDnnC,EAA6B,iBAAXue,EAClB,SAAUna,GAAK,OAAOA,CAAG,EACzB,SAAUA,GAEN,OAAIgnC,GAA+B7sB,EAAOna,aAAcklC,EAAiBhB,eAC9D/pB,EAAOna,GAAGmkC,SAEdhqB,EAAOna,EAClB,EACA8mC,GAAc,EACThtC,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIgpC,EAAQhpC,EAAIvD,KAAKwsC,gBAAkBoE,EACnClX,OAAe,EACf8O,EAAI2G,EAAQ5rC;AAChB,OAAQilC,GACJ,IAAK,IACL,IAAK,IAWL,IAAK,IACD;AAVJ,IAAK,IACD+H,EAAahE;AACb;AACJ,IAAK,IACDgE,GAAc;AACd;AACJ,IAAK,IACD7W,EAAeL,EAAe7yB,aAAakB;AAC3C;AAGJ,IAAK,IACDgyB,EAAeL,EAAe7yB,aAAae,YAAY2kC,GAAc;AACrE;AACJ,QACIxS,EAAeL,EAAe7yB,aAAaa,WAAWhC,EAASmjC,IAGnE9O,GACAgX,EAAaptC,KAAK,CAAEipC,MAAOgE,GAAc,EAAIA,EAAahE,EAAO7S,aAAcA,GAEvF,CACA,OAAOgX,CACX,EACOxkC,CACX,CA/MoB,CA+MlB2iC,EAAuB1iC;AACzB3L,EAAQ0L,cAAgBA,C;AC5NxB,IAAItE,EAAS,EAAQ,OACjBipC,EACA,SAAyC5nC,GACjCA,EAAK+hC,uBACLhrC,KAAKmrC,qBAAuBliC,EAAKkiC,qBAAqBx8B,KAAK1F,GAC3DjJ,KAAKgrC,sBAAwB/hC,EAAK+hC,sBAAsBr8B,KAAK1F,IAExDA,EAAK6nC,0BACV9wC,KAAKmrC,qBAAuBliC,EAAK8nC,wBAAwBpiC,KAAK1F,GAC9DjJ,KAAKgrC,sBAAwB/hC,EAAK6nC,yBAAyBniC,KAAK1F,IAE3DA,EAAK+nC,6BACVhxC,KAAKmrC,qBAAuBliC,EAAKgoC,2BAA2BtiC,KAAK1F,GACjEjJ,KAAKgrC,sBAAwB/hC,EAAK+nC,4BAA4BriC,KAAK1F,IAE9DA,EAAKioC,yBACVlxC,KAAKmrC,qBAAuBliC,EAAKkoC,uBAAuBxiC,KAAK1F,GAC7DjJ,KAAKgrC,sBAAwB/hC,EAAKioC,wBAAwBviC,KAAK1F,IAE1DA,EAAKmoC,wBACVpxC,KAAKmrC,qBAAuBliC,EAAKooC,sBAAsB1iC,KAAK1F,GAC5DjJ,KAAKgrC,sBAAwB/hC,EAAKmoC,uBAAuBziC,KAAK1F,KAG9DjJ,KAAKmrC,qBAAuBliC,EAAKqoC,aAAa3iC,KAAK1F,GACnDjJ,KAAKgrC,sBAAwB,SAAUuG,GAAM,OAAOtoC,EAAKigB,WAAWqoB,EAAI,IAAO,GAAK,EAE5F;AAGJ/wC,EAAQqwC,gCAAkCA,EAC1CrwC,EAAQuqC,eAAiB,IAAI8F,EAAgCjpC,EAAOqB,K;AC/BpE,IAAIzF,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAWIgI,EAA2B,SAAU1H,GAErC,SAAS0H,IACL,IAAIrE,EAAMrD,EAAOY,KAAK/E,KAAM;AAC5BA,KAAKC,KAAOuH,EAAIvH,KAAO,0BACvBD,KAAKL,MAAQ6H,EAAI7H,MACjBK,KAAKV,QAAUkI,EAAIlI,OACvB,CACA,OAPAkE,EAAUqI,EAAyB1H,GAO5B0H,CACX,CAT8B,CAS5B7M;AACFwB,EAAQqL,wBAA0BA,C;ACzBlC,IAAIrI,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAWI+H,EAAc,SAAUzH,GAExB,SAASyH,IACL,IAAIpE,EAAMrD,EAAOY,KAAK/E,KAAM;AAC5BA,KAAKC,KAAOuH,EAAIvH,KAAO,aACvBD,KAAKL,MAAQ6H,EAAI7H,MACjBK,KAAKV,QAAUkI,EAAIlI,OACvB,CACA,OAPAkE,EAAUoI,EAAYzH,GAOfyH,CACX,CATiB,CASf5M;AACFwB,EAAQoL,WAAaA,C;ACzBrB,IAAImyB,EAAW,WACX,SAASA,IACL/9B,KAAK4jB,OAAS,CAAC,CACnB,CAuBA,OAtBAma,EAAQj6B,UAAUuoB,OAAS,SAAUvD,GAEjC,OADA9oB,KAAK4jB,OAAOkF,GAAO,MACZ,CACX,EACAiV,EAAQj6B,UAAUo6B,IAAM,SAAUpV,EAAK3oB,GAEnC,OADAH,KAAK4jB,OAAOkF,GAAO3oB,EACZH,IACX,EACA+9B,EAAQj6B,UAAUsB,IAAM,SAAU0jB,GAC9B,OAAO9oB,KAAK4jB,OAAOkF,EACvB,EACAiV,EAAQj6B,UAAUgF,QAAU,SAAUyoC,EAAIne,GACtC,IAAIxP,EAAS5jB,KAAK4jB;AAClB,IAAK,IAAIkF,KAAOlF,EACRA,EAAOhgB,eAAeklB,IAAwB,OAAhBlF,EAAOkF,IACrCyoB,EAAGxsC,KAAKquB,EAASxP,EAAOkF,GAAMA,EAG1C,EACAiV,EAAQj6B,UAAUm3B,MAAQ,WACtBj7B,KAAK4jB,OAAS,CAAC,CACnB,EACOma,CACX,CA3Bc;AA4Bdv9B,EAAQu9B,QAAUA,C;ACzBlB,IAAIn2B,EAAS,EAAQ,OACjB4pC,EAAuB,WACvB,SAASA,EAAoBvoC,GAEzB,GADAjJ,KAAKiJ,KAAOA,EACRA,EAAK0iC,cAA6C,mBAAtB1iC,EAAK0iC,aACjC3rC,KAAK2rC,aAAe1iC,EAAK0iC,aAAah9B,KAAK1F,GAC3CjJ,KAAK4rC,eAAiB3iC,EAAK2iC,eAAej9B,KAAK1F;IAE9C,CACDjJ,KAAKyxC,WAAa,EAClBzxC,KAAK0xC,cAAgB,CAAC,EACtB1xC,KAAK2xC,uBAAwB,EAEzB3xC,KAAK4xC,wBAEL5xC,KAAK2rC,aAAe3rC,KAAK6xC,oCAEpB7xC,KAAK8xC,oBAEV9xC,KAAK2rC,aAAe3rC,KAAK+xC,gCAEpB/xC,KAAKgyC,uBAEVhyC,KAAK2rC,aAAe3rC,KAAKiyC,mCAEpBjyC,KAAKkyC,yBAEVlyC,KAAK2rC,aAAe3rC,KAAKmyC,qCAIzBnyC,KAAK2rC,aAAe3rC,KAAKoyC;AAE7B,IAAIC,EAAK,SAASzG,EAAe0G,UACtB1G,EAAe2G,SAASb,cAAcY,EACjD;AACAD,EAAGE,SAAWvyC,KACdA,KAAK4rC,eAAiByG,CAC1B,CACJ,CAiKA,OAhKAb,EAAoB1tC,UAAU0uC,SAAW,SAAUxqB,GAC/C,OAAOhoB,KAAKiJ,KAAKxJ,OAAOqE,UAAUigB,SAAShf,KAAKijB,EACpD,EACAwpB,EAAoB1tC,UAAU8tC,sBAAwB,WAClD,MAA4C,qBAArC5xC,KAAKwyC,SAASxyC,KAAKiJ,KAAKwpC,QACnC,EACAjB,EAAoB1tC,UAAUkuC,qBAAuB,WACjD,OAAOvW,QAAQz7B,KAAKiJ,KAAKypC,eAC7B,EACAlB,EAAoB1tC,UAAUouC,uBAAyB,WACnD,IAAIS,EAAW3yC,KAAKiJ,KAAK0pC;AACzB,OAAOlX,QAAQkX,GAAY,uBAAwBA,EAASC,cAAc,UAC9E,EACApB,EAAoB1tC,UAAUguC,kBAAoB,WAC9C,IAAI7oC,EAAOjJ,KAAKiJ;AAGhB,GAAIA,EAAK4pC,cAAgB5pC,EAAK6pC,cAAe,CACzC,IAAIC,GAA8B,EAC9BC,EAAe/pC,EAAKunB;AAMxB,OALAvnB,EAAKunB,UAAY,WACbuiB,GAA8B,CAClC,EACA9pC,EAAK4pC,YAAY,GAAI,KACrB5pC,EAAKunB,UAAYwiB,EACVD,CACX,CACA,OAAO,CACX,EAGAvB,EAAoB1tC,UAAUmvC,iBAAmB,SAAUpyB,GAEvD,IADA,IAAIF,EAAO,GACFrX,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCqX,EAAKrX,EAAK,GAAKjF,UAAUiF;AAE7B,IAAI0F,EAAK,SAASrM,IACd,IAAiBke,EAARle,EAAqBke,QAASF,EAA9Bhe,EAAwCge;AAC1B,mBAAZE,EACPA,EAAQzc,WAAMqD,EAAWkZ,GAGzB,IAAKuyB,SAAS,GAAKryB,EAAnB,EAER;AAGA,OAFA7R,EAAG6R,QAAUA,EACb7R,EAAG2R,KAAOA,EACH3R,CACX,EACAwiC,EAAoB1tC,UAAUqvC,6BAA+B,SAAUxyB,GAEnE,OADA3gB,KAAK0xC,cAAc1xC,KAAKyxC,YAAczxC,KAAKizC,iBAAiB7uC,WAAMqD,EAAWkZ,GACtE3gB,KAAKyxC,YAChB,EACAD,EAAoB1tC,UAAU+tC,kCAAoC,WAC9D,IAAI7iC,EAAK,SAAS28B,IACd,IAAI4G,EAAW5G,EAAa4G,SACxBD,EAASC,EAASY,6BAA6B9uC;AAEnD,OADAkuC,EAAStpC,KAAKwpC,QAAQW,SAASb,EAASU,iBAAiBV,EAASc,aAAcf,IACzEA,CACX;AAEA,OADAtjC,EAAGujC,SAAWvyC,KACPgP,CACX,EACAwiC,EAAoB1tC,UAAUiuC,8BAAgC,WAI1D,IAAI9oC,EAAOjJ,KAAKiJ,KACZqqC,EAAgB,gBAAkBrqC,EAAKsC,KAAKgoC,SAAW,IACvDC,EAAkB,SAASC,EAAqBC,GAChD,IAAInB,EAAWkB,EAAqBlB;AAChCmB,EAAMrrC,SAAWY,GACK,iBAAfyqC,EAAMtkB,MACyB,IAAtCskB,EAAMtkB,KAAKthB,QAAQwlC,IACnBf,EAASc,cAAcK,EAAMtkB,KAAKzhB,MAAM2lC,EAAclwC,QAE9D;AACAowC,EAAgBjB,SAAWvyC,KAC3BiJ,EAAKsb,iBAAiB,UAAWivB,GAAiB;AAClD,IAAIxkC,EAAK,SAAS28B,IACd,IAAIj8B,EAAKi8B,EAAc2H,EAAgB5jC,EAAG4jC,cAAef,EAAW7iC,EAAG6iC,SACnED,EAASC,EAASY,6BAA6B9uC;AAEnD,OADAkuC,EAAStpC,KAAK4pC,YAAYS,EAAgBhB,EAAQ,KAC3CA,CACX;AAGA,OAFAtjC,EAAGujC,SAAWvyC,KACdgP,EAAGskC,cAAgBA,EACZtkC,CACX,EACAwiC,EAAoB1tC,UAAUuvC,aAAe,SAAUf,GAGnD,GAAItyC,KAAK2xC,sBAGL3xC,KAAKiJ,KAAKigB,WAAWlpB,KAAKizC,iBAAiBjzC,KAAKqzC,aAAcf,GAAS;IAEtE,CACD,IAAIqB,EAAO3zC,KAAK0xC,cAAcY;AAC9B,GAAIqB,EAAM,CACN3zC,KAAK2xC,uBAAwB;AAC7B,IACIgC,GAKJ,CAHA,QACI3zC,KAAK4rC,eAAe0G,GACpBtyC,KAAK2xC,uBAAwB,CACjC,CACJ,CACJ,CACJ,EACAH,EAAoB1tC,UAAUmuC,iCAAmC,WAC7D,IAAIjpC,EAAQhJ,KACR4zC,EAAU,IAAI5zC,KAAKiJ,KAAKypC;AAC5BkB,EAAQC,MAAMrjB,UAAY,SAAUkjB,GAChC,IAAIpB,EAASoB,EAAMtkB;AACnBpmB,EAAMqqC,aAAaf,EACvB;AACA,IAAItjC,EAAK,SAAS28B,IACd,IAAIj8B,EAAKi8B,EAAciI,EAAUlkC,EAAGkkC,QAASrB,EAAW7iC,EAAG6iC,SACvDD,EAASC,EAASY,6BAA6B9uC;AAEnD,OADAuvC,EAAQE,MAAMjB,YAAYP,GACnBA,CACX;AAGA,OAFAtjC,EAAG4kC,QAAUA,EACb5kC,EAAGujC,SAAWvyC,KACPgP,CACX,EACAwiC,EAAoB1tC,UAAUquC,mCAAqC,WAC/D,IAAInjC,EAAK,SAAS28B,IACd,IAAI4G,EAAW5G,EAAa4G,SACxBtpC,EAAOspC,EAAStpC,KAChB8qC,EAAM9qC,EAAK0pC,SACXqB,EAAOD,EAAIE,gBACX3B,EAASC,EAASY,6BAA6B9uC,WAG/C6vC,EAASH,EAAInB,cAAc;AAQ/B,OAPAsB,EAAO3lB,mBAAqB,WACxBgkB,EAASc,aAAaf,GACtB4B,EAAO3lB,mBAAqB,KAC5BylB,EAAKG,YAAYD,GACjBA,EAAS,IACb,EACAF,EAAKI,YAAYF,GACV5B,CACX;AAEA,OADAtjC,EAAGujC,SAAWvyC,KACPgP,CACX,EACAwiC,EAAoB1tC,UAAUsuC,6BAA+B,WACzD,IAAIpjC,EAAK,SAAS28B,IACd,IAAI4G,EAAW5G,EAAa4G,SACxBD,EAASC,EAASY,6BAA6B9uC;AAEnD,OADAkuC,EAAStpC,KAAKigB,WAAWqpB,EAASU,iBAAiBV,EAASc,aAAcf,GAAS,GAC5EA,CACX;AAEA,OADAtjC,EAAGujC,SAAWvyC,KACPgP,CACX,EACOwiC,CACX,CAxM0B;AAyM1BhxC,EAAQgxC,oBAAsBA,EAC9BhxC,EAAQkrC,UAAY,IAAI8F,EAAoB5pC,EAAOqB,K;AC9MnD,IAAIrB,EAAS,EAAQ,OACjBysC,EAAgB,EAAQ;AAC5B7zC,EAAQw9B,IAAMp2B,EAAOqB,KAAK+0B,KAA6BqW,EAAcC,W;ACFrE,IAAIA,EAAe,WACf,SAASA,IACLt0C,KAAKu0C,KAAO,EACZv0C,KAAKw0C,QAAU,GACfx0C,KAAKy0C,MAAQ,EACjB,CAqCA,OApCAH,EAAYxwC,UAAUsB,IAAM,SAAU0jB,GAClC,IAAIvlB,EAAIvD,KAAKy0C,MAAM3mC,QAAQgb;AAC3B,OAAc,IAAPvlB,OAAWkE,EAAYzH,KAAKw0C,QAAQjxC,EAC/C,EACA+wC,EAAYxwC,UAAUo6B,IAAM,SAAUpV,EAAK3oB,GACvC,IAAIoD,EAAIvD,KAAKy0C,MAAM3mC,QAAQgb;AAS3B,OARW,IAAPvlB,GACAvD,KAAKy0C,MAAMnxC,KAAKwlB,GAChB9oB,KAAKw0C,QAAQlxC,KAAKnD,GAClBH,KAAKu0C,QAGLv0C,KAAKw0C,QAAQjxC,GAAKpD,EAEfH,IACX,EACAs0C,EAAYxwC,UAAUuoB,OAAS,SAAUvD,GACrC,IAAIvlB,EAAIvD,KAAKy0C,MAAM3mC,QAAQgb;AAC3B,OAAW,IAAPvlB,IAGJvD,KAAKw0C,QAAQ/oC,OAAOlI,EAAG,GACvBvD,KAAKy0C,MAAMhpC,OAAOlI,EAAG,GACrBvD,KAAKu0C,QACE,EACX,EACAD,EAAYxwC,UAAUm3B,MAAQ,WAC1Bj7B,KAAKy0C,MAAMrxC,OAAS,EACpBpD,KAAKw0C,QAAQpxC,OAAS,EACtBpD,KAAKu0C,KAAO,CAChB,EACAD,EAAYxwC,UAAUgF,QAAU,SAAUyoC,EAAIne,GAC1C,IAAK,IAAI7vB,EAAI,EAAGA,EAAIvD,KAAKu0C,KAAMhxC,IAC3BguC,EAAGxsC,KAAKquB,EAASpzB,KAAKw0C,QAAQjxC,GAAIvD,KAAKy0C,MAAMlxC,GAErD,EACO+wC,CACX,CA3CkB;AA4ClB9zC,EAAQ8zC,YAAcA,C;AC5CtB,IAAI9wC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAUI6B,EAA2B,SAAUvB,GAErC,SAASuB,IACL,IAAI8B,EAAMrD,EAAOY,KAAK/E,KAAM;AAC5BA,KAAKC,KAAOuH,EAAIvH,KAAO,0BACvBD,KAAKL,MAAQ6H,EAAI7H,MACjBK,KAAKV,QAAUkI,EAAIlI,OACvB,CACA,OAPAkE,EAAUkC,EAAyBvB,GAO5BuB,CACX,CAT8B,CAS5B1G;AACFwB,EAAQkF,wBAA0BA,C;ACxBlC,IAAIkC,EAAS,EAAQ;AACrB,SAAS8sC,IAGL,OAAQ,WACJ,SAASC,IACL30C,KAAKw0C,QAAU,EACnB,CAmBA,OAlBAG,EAAW7wC,UAAU2E,IAAM,SAAUtI,GAC5BH,KAAKo7B,IAAIj7B,IACVH,KAAKw0C,QAAQlxC,KAAKnD,EAE1B,EACAw0C,EAAW7wC,UAAUs3B,IAAM,SAAUj7B,GACjC,OAAwC,IAAjCH,KAAKw0C,QAAQ1mC,QAAQ3N,EAChC,EACAV,OAAOS,eAAey0C,EAAW7wC,UAAW,OAAQ,CAChDsB,IAAK,WACD,OAAOpF,KAAKw0C,QAAQpxC,MACxB,EACAkC,YAAY,EACZC,cAAc,IAElBovC,EAAW7wC,UAAUm3B,MAAQ,WACzBj7B,KAAKw0C,QAAQpxC,OAAS,CAC1B,EACOuxC,CACX,CAvBO,EAwBX,CACAn0C,EAAQk0C,eAAiBA,EACzBl0C,EAAQw6B,IAAMpzB,EAAOqB,KAAK+xB,KAAO0Z,G;AC9BjC,IAAIlxC,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAQIiI,EAAgB,SAAU3H,GAE1B,SAAS2H,IACL,IAAItE,EAAMrD,EAAOY,KAAK/E,KAAM;AAC5BA,KAAKC,KAAOuH,EAAIvH,KAAO,eACvBD,KAAKL,MAAQ6H,EAAI7H,MACjBK,KAAKV,QAAUkI,EAAIlI,OACvB,CACA,OAPAkE,EAAUsI,EAAc3H,GAOjB2H,CACX,CATmB,CASjB9M;AACFwB,EAAQsL,aAAeA,C;ACtBvB,IAAItI,EAAaxD,MAAQA,KAAKwD,WAAc,SAAUC,EAAGC,GACrD,IAAK,IAAIC,KAAKD,EAAOA,EAAEE,eAAeD,KAAIF,EAAEE,GAAKD,EAAEC;AACnD,SAASE,IAAO7D,KAAKf,YAAcwE,CAAG,CACtCA,EAAEK,UAAkB,OAANJ,EAAajE,OAAOsE,OAAOL,IAAMG,EAAGC,UAAYJ,EAAEI,UAAW,IAAID,EACnF,EAKIkI,EAAuB,SAAU5H,GAEjC,SAAS4H,EAAoB7M,GACzBiF,EAAOY,KAAK/E,MACZA,KAAKd,OAASA;AACd,IAAIsI,EAAMxI,MAAM+F,KAAK/E,KAAMd,EACvBA,EAAOkE,OAAS,8CAAgDlE,EAAOK,KAAI,SAAUiI,EAAKjE,GAAK,OAASA,EAAI,EAAK,KAAOiE,EAAIuc,UAAa,IAAGjkB,KAAK,QAAU;AAC/JE,KAAKC,KAAOuH,EAAIvH,KAAO,sBACvBD,KAAKL,MAAQ6H,EAAI7H,MACjBK,KAAKV,QAAUkI,EAAIlI,OACvB,CACA,OAVAkE,EAAUuI,EAAqB5H,GAUxB4H,CACX,CAZ0B,CAYxB/M;AACFwB,EAAQuL,oBAAsBA,C;ACZ9BvL,EAAQytC,YAVR,SAAqB2G,EAAaC,GAC9B,IAAK,IAAItxC,EAAI,EAAG2H,EAAM2pC,EAAUzxC,OAAQG,EAAI2H,EAAK3H,IAG7C,IAFA,IAAIuxC,EAAWD,EAAUtxC,GACrBwxC,EAAet1C,OAAO0tC,oBAAoB2H,EAAShxC,WAC9CkxC,EAAI,EAAGC,EAAOF,EAAa3xC,OAAQ4xC,EAAIC,EAAMD,IAAK,CACvD,IAAIE,EAASH,EAAaC;AAC1BJ,EAAY9wC,UAAUoxC,GAAUJ,EAAShxC,UAAUoxC,EACvD,CAER,C;ACTA,IAAIttC,EAAS,EAAQ;AACrB,SAASutC,EAAWhxB,GAEhB,IADA,IAAIb,EAAU,GACLha,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCga,EAAQha,EAAK,GAAKjF,UAAUiF;AAGhC,IADA,IAAI4B,EAAMoY,EAAQlgB,OACTG,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAI8E,EAASib,EAAQ/f;AACrB,IAAK,IAAI6xC,KAAK/sC,EACNA,EAAOzE,eAAewxC,KACtBjxB,EAAOixB,GAAK/sC,EAAO+sC,GAG/B,CACA,OAAOjxB,CACX,CAGA,SAASkxB,EAAUpsC,GACf,OAAOA,EAAKxJ,OAAOC,QAAUy1C,CACjC,CAJA30C,EAAQ20C,WAAaA,EAKrB30C,EAAQ60C,UAAYA,EACpB70C,EAAQd,OAAS21C,EAAUztC,EAAOqB,K;ACtBlCzI,EAAQqP,YAAc,CAAEC,EAAG,CAAC,E;ACE5BtP,EAAQ8+B,SAHR,SAAkB71B,GACd,OAAOA,CACX,C;ACFAjJ,EAAQpB,QAAUD,MAAMC,SAAW,SAAWqK,GAAK,OAAOA,GAAyB,iBAAbA,EAAErG,MAAsB,C;ACA9F5C,EAAQ6lB,YAAc,SAAW5c,GAAK,OAAOA,GAAyB,iBAAbA,EAAErG,MAAsB,C;ACGjF5C,EAAQmpB,OAHR,SAAgBxpB,GACZ,OAAOA,aAAiBmN,OAAS2a,OAAO9nB,EAC5C,C;ACCAK,EAAQkO,WAHR,SAAoBjF,GAChB,MAAoB,mBAANA,CAClB,C;ACFA,IAAI0F,EAAY,EAAQ;AAQxB3O,EAAQ+mB,UAPR,SAAmB+tB,GAKf,OAAQnmC,EAAU/P,QAAQk2C,IAASA,EAAMC,WAAWD,GAAO,GAAM,CACrE,C;ACJA90C,EAAQyP,SAHR,SAAkBxG,GACd,OAAY,MAALA,GAA0B,iBAANA,CAC/B,C;ACCAjJ,EAAQ0lB,UAHR,SAAmB/lB,GACf,OAAOA,GAAoC,mBAApBA,EAAM6H,WAAkD,mBAAf7H,EAAM8oB,IAC1E,C;ACCAzoB,EAAQ6f,YAHR,SAAqBlgB,GACjB,OAAOA,GAAmC,mBAAnBA,EAAM+M,QACjC,C;ACAA1M,EAAQooB,KADR,WAAkB,C;ACOlBpoB,EAAQqgC,IARR,SAAa2U,EAAMpiB,GACf,SAASqiB,IACL,OAASA,EAAQD,KAAKpxC,MAAMqxC,EAAQriB,QAAS/uB,UACjD,CAGA,OAFAoxC,EAAQD,KAAOA,EACfC,EAAQriB,QAAUA,EACXqiB,CACX,C;ACPA,IAAI/sB,EAAS,EAAQ;AAWrB,SAASnf,EAAcmsC,GACnB,OAAKA,EAGc,IAAfA,EAAItyC,OACGsyC,EAAI,GAER,SAAeC,GAClB,OAAOD,EAAIllC,QAAO,SAAUmwB,EAAM3xB,GAAM,OAAOA,EAAG2xB,EAAO,GAAGgV,EAChE,EAPWjtB,EAAOE,IAQtB,CAZApoB,EAAQ4I,KAPR,WAEI,IADA,IAAIssC,EAAM,GACDpsC,EAAK,EAAGA,EAAKjF,UAAUjB,OAAQkG,IACpCosC,EAAIpsC,EAAK,GAAKjF,UAAUiF;AAE5B,OAAOC,EAAcmsC,EACzB,EAcAl1C,EAAQ+I,cAAgBA,C;ACnBxB,IAAIqsC,EAA6B,oBAAX92B,QAA0BA,OAC5C+2B,EAAyB,oBAAT50B,MAAqD,oBAAtB60B,mBAC/C70B,gBAAgB60B,mBAAqB70B,KACrC80B,OAA6B,IAAX,EAAAC,GAA0B,EAAAA,EAC5CC,EAAQL,GAAYG,GAAYF;AACpCr1C,EAAQyI,KAAOgtC,EAIf,WACI,IAAKA,EACD,MAAM,IAAIj3C,MAAM,gEAEvB,CAJD,E;ACZA,IAAI4I,EAAS,EAAQ,OACjB8d,EAAgB,EAAQ,OACxBC,EAAc,EAAQ,MACtBvW,EAAa,EAAQ,OACrB7I,EAAe,EAAQ,OACvBqG,EAAa,EAAQ,MACrBspC,EAAoB,EAAQ,OAC5BpuC,EAAe,EAAQ;AAqE3BtH,EAAQ2iB,kBApER,SAA2BgzB,EAAiBxzC,EAAQkD,EAAYC,GAC5D,IAAIgE,EAAc,IAAIosC,EAAkBvwC,gBAAgBwwC,EAAiBtwC,EAAYC;AACrF,GAAIgE,EAAYrE,OACZ,OAAO;AAEX,GAAI9C,aAAkB4D,EAAaU,WAC/B,OAAItE,EAAOsF,WACP6B,EAAY9G,KAAKL,EAAOxC,OACxB2J,EAAYhF,WACL,OAGPgF,EAAYpB,oBAAqB,EAC1B/F,EAAOqF,UAAU8B;AAG3B,GAAI4b,EAAcW,YAAY1jB,GAAS,CACxC,IAAK,IAAIY,EAAI,EAAG2H,EAAMvI,EAAOS,OAAQG,EAAI2H,IAAQpB,EAAYrE,OAAQlC,IACjEuG,EAAY9G,KAAKL,EAAOY;AAEvBuG,EAAYrE,QACbqE,EAAYhF,UAEpB,KACK,IAAI6gB,EAAYO,UAAUvjB,GAW3B,OAVAA,EAAOsmB,MAAK,SAAU9oB,GACb2J,EAAYrE,SACbqE,EAAY9G,KAAK7C,GACjB2J,EAAYhF,WAEpB,IAAG,SAAU0C,GAAO,OAAOsC,EAAYtK,MAAMgI,EAAM,IAC9CyhB,KAAK,MAAM,SAAUzhB,GAEtBI,EAAOqB,KAAKigB,YAAW,WAAc,MAAM1hB,CAAK,GACpD,IACOsC;AAEN,GAAInH,GAAiD,mBAAhCA,EAAOiK,EAAWvM,UAExC,IADA,IAAIA,EAAWsC,EAAOiK,EAAWvM,cAC9B,CACC,IAAIwnC,EAAOxnC,EAAS2C;AACpB,GAAI6kC,EAAK1kC,KAAM,CACX2G,EAAYhF;AACZ,KACJ,CAEA,GADAgF,EAAY9G,KAAK6kC,EAAK1nC,OAClB2J,EAAYrE,OACZ,KAER,MAEC,GAAI9C,GAAqD,mBAApCA,EAAOmF,EAAaM,YAA4B,CACtE,IAAIguC,EAAMzzC,EAAOmF,EAAaM;AAC9B,GAA6B,mBAAlBguC,EAAIpuC,UAIX,OAAOouC,EAAIpuC,UAAU,IAAIkuC,EAAkBvwC,gBAAgBwwC,EAAiBtwC,EAAYC;AAHxFgE,EAAYtK,MAAM,IAAIH,UAAU,kEAKxC,KACK,CACD,IACIg3C,EAAO,iBADCjnC,EAAWa,SAAStN,GAAU,oBAAsB,IAAMA,EAAS,KACrE;AAEVmH,EAAYtK,MAAM,IAAIH,UAAUg3C,GACpC,EACA,OAAO,IACX,C;AC3EA,IAAI9oC,EAAe,EAAQ,OACvBZ,EAAiB,EAAQ,OACzBqB,EAAa,EAAQ;AAezBxN,EAAQgI,aAdR,SAAsBzB,EAAgBvH,EAAOsF,GACzC,GAAIiC,EAAgB,CAChB,GAAIA,aAA0BwG,EAAajH,WACvC,OAAOS;AAEX,GAAIA,EAAe4F,EAAeI,cAC9B,OAAOhG,EAAe4F,EAAeI,eAE7C,CACA,OAAKhG,GAAmBvH,GAAUsF,EAG3B,IAAIyI,EAAajH,WAAWS,EAAgBvH,EAAOsF,GAF/C,IAAIyI,EAAajH,WAAW0H,EAAW5G,MAGtD,C;AChBA,IACIkvC,EADAhnC,EAAgB,EAAQ;AAE5B,SAASinC,IACL,IACI,OAAOD,EAAelyC,MAAMpE,KAAMqE,UAKtC,CAHA,MAAOyL,GAEH,OADAR,EAAcO,YAAYC,EAAIA,EACvBR,EAAcO,WACzB,CACJ,CAKArP,EAAQoP,SAJR,SAAkBZ,GAEd,OADAsnC,EAAiBtnC,EACVunC,CACX,C","sources":["file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/aggregate-error@3.1.0/node_modules/aggregate-error/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/clean-stack@2.2.0/node_modules/clean-stack/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/p-map@4.0.0/node_modules/p-map/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/AsyncSubject.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/BehaviorSubject.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/InnerSubscriber.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/Notification.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/Observable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/Observer.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/OuterSubscriber.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/ReplaySubject.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/Rx.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/Scheduler.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/Subject.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/SubjectSubscription.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/Subscriber.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/Subscription.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/bindCallback.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/bindNodeCallback.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/combineLatest.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/concat.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/defer.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/dom/ajax.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/dom/webSocket.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/empty.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/forkJoin.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/from.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/fromEvent.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/fromEventPattern.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/fromPromise.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/generate.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/if.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/interval.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/merge.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/never.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/of.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/onErrorResumeNext.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/pairs.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/race.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/range.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/throw.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/timer.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/using.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/observable/zip.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/audit.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/auditTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/buffer.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/bufferCount.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/bufferTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/bufferToggle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/bufferWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/catch.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/combineAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/combineLatest.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/concat.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/concatAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/concatMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/concatMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/count.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/debounce.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/debounceTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/defaultIfEmpty.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/delay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/delayWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/dematerialize.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/distinct.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/distinctUntilChanged.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/distinctUntilKeyChanged.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/do.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/elementAt.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/every.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/exhaust.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/exhaustMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/expand.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/filter.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/finally.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/find.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/findIndex.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/first.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/groupBy.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/ignoreElements.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/isEmpty.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/last.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/let.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/map.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/mapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/materialize.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/max.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/merge.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/mergeAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/mergeMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/mergeMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/mergeScan.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/min.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/multicast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/observeOn.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/onErrorResumeNext.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/pairwise.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/partition.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/pluck.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/publish.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/publishBehavior.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/publishLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/publishReplay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/race.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/reduce.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/repeat.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/repeatWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/retry.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/retryWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/sample.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/sampleTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/scan.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/sequenceEqual.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/share.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/shareReplay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/single.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/skip.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/skipLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/skipUntil.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/skipWhile.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/startWith.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/subscribeOn.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/switch.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/switchMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/switchMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/take.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/takeLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/takeUntil.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/takeWhile.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/throttle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/throttleTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/timeInterval.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/timeout.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/timeoutWith.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/timestamp.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/toArray.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/window.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/windowCount.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/windowTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/windowToggle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/windowWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/withLatestFrom.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/zip.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/add/operator/zipAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/ArrayLikeObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/ArrayObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/BoundCallbackObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/BoundNodeCallbackObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/ConnectableObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/DeferObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/EmptyObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/ErrorObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/ForkJoinObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/FromEventObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/FromEventPatternObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/FromObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/GenerateObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/IfObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/IntervalObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/IteratorObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/NeverObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/PairsObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/PromiseObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/RangeObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/ScalarObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/SubscribeOnObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/TimerObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/UsingObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/bindCallback.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/bindNodeCallback.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/combineLatest.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/concat.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/defer.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/dom/AjaxObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/dom/WebSocketSubject.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/dom/ajax.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/dom/webSocket.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/empty.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/forkJoin.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/from.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/fromEvent.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/fromEventPattern.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/fromPromise.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/generate.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/if.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/interval.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/merge.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/never.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/of.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/onErrorResumeNext.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/pairs.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/race.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/range.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/throw.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/timer.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/using.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/observable/zip.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/audit.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/auditTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/buffer.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/bufferCount.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/bufferTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/bufferToggle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/bufferWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/catch.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/combineAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/combineLatest.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/concat.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/concatAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/concatMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/concatMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/count.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/debounce.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/debounceTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/defaultIfEmpty.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/delay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/delayWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/dematerialize.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/distinct.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/distinctUntilChanged.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/distinctUntilKeyChanged.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/do.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/elementAt.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/every.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/exhaust.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/exhaustMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/expand.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/filter.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/finally.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/find.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/findIndex.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/first.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/groupBy.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/ignoreElements.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/isEmpty.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/last.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/let.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/map.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/mapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/materialize.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/max.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/merge.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/mergeAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/mergeMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/mergeMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/mergeScan.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/min.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/multicast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/observeOn.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/onErrorResumeNext.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/pairwise.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/partition.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/pluck.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/publish.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/publishBehavior.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/publishLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/publishReplay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/race.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/reduce.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/repeat.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/repeatWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/retry.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/retryWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/sample.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/sampleTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/scan.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/sequenceEqual.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/share.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/shareReplay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/single.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/skip.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/skipLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/skipUntil.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/skipWhile.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/startWith.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/subscribeOn.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/switch.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/switchMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/switchMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/take.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/takeLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/takeUntil.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/takeWhile.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/throttle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/throttleTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/timeInterval.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/timeout.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/timeoutWith.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/timestamp.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/toArray.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/window.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/windowCount.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/windowTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/windowToggle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/windowWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/withLatestFrom.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/zip.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operator/zipAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/audit.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/auditTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/buffer.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/bufferCount.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/bufferTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/bufferToggle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/bufferWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/catchError.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/combineAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/combineLatest.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/concat.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/concatAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/concatMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/concatMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/count.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/debounce.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/debounceTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/defaultIfEmpty.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/delay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/delayWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/dematerialize.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/distinct.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/distinctUntilChanged.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/distinctUntilKeyChanged.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/elementAt.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/every.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/exhaust.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/exhaustMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/expand.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/filter.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/finalize.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/find.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/findIndex.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/first.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/groupBy.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/ignoreElements.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/isEmpty.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/last.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/map.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/mapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/materialize.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/max.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/merge.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/mergeAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/mergeMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/mergeMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/mergeScan.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/min.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/multicast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/observeOn.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/onErrorResumeNext.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/pairwise.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/partition.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/pluck.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/publish.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/publishBehavior.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/publishLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/publishReplay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/race.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/reduce.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/refCount.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/repeat.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/repeatWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/retry.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/retryWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/sample.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/sampleTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/scan.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/sequenceEqual.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/share.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/shareReplay.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/single.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/skip.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/skipLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/skipUntil.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/skipWhile.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/startWith.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/subscribeOn.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/switchAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/switchMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/switchMapTo.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/take.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/takeLast.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/takeUntil.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/takeWhile.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/tap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/throttle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/throttleTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/timeInterval.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/timeout.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/timeoutWith.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/timestamp.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/toArray.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/window.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/windowCount.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/windowTime.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/windowToggle.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/windowWhen.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/withLatestFrom.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/zip.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/operators/zipAll.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/Action.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/AnimationFrameAction.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/AnimationFrameScheduler.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/AsapAction.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/AsapScheduler.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/AsyncAction.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/AsyncScheduler.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/QueueAction.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/QueueScheduler.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/VirtualTimeScheduler.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/animationFrame.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/asap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/async.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/scheduler/queue.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/symbol/iterator.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/symbol/observable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/symbol/rxSubscriber.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/testing/ColdObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/testing/HotObservable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/testing/SubscriptionLog.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/testing/SubscriptionLoggable.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/testing/TestScheduler.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/AnimationFrame.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/ArgumentOutOfRangeError.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/EmptyError.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/FastMap.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/Immediate.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/Map.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/MapPolyfill.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/ObjectUnsubscribedError.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/Set.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/TimeoutError.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/UnsubscriptionError.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/applyMixins.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/assign.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/errorObject.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/identity.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/isArray.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/isArrayLike.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/isDate.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/isFunction.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/isNumeric.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/isObject.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/isPromise.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/isScheduler.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/noop.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/not.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/pipe.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/root.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/subscribeToResult.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/toSubscriber.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/rxjs@5.5.12/node_modules/rxjs/util/tryCatch.js"],"sourcesContent":["'use strict';\nconst indentString = require('indent-string');\nconst cleanStack = require('clean-stack');\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nclass AggregateError extends Error {\n\tconstructor(errors) {\n\t\tif (!Array.isArray(errors)) {\n\t\t\tthrow new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n\t\t}\n\n\t\terrors = [...errors].map(error => {\n\t\t\tif (error instanceof Error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (error !== null && typeof error === 'object') {\n\t\t\t\t// Handle plain error objects with message property and/or possibly other metadata\n\t\t\t\treturn Object.assign(new Error(error.message), error);\n\t\t\t}\n\n\t\t\treturn new Error(error);\n\t\t});\n\n\t\tlet message = errors\n\t\t\t.map(error => {\n\t\t\t\t// The `stack` property is not standardized, so we can't assume it exists\n\t\t\t\treturn typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n\t\t\t})\n\t\t\t.join('\\n');\n\t\tmessage = '\\n' + indentString(message, 4);\n\t\tsuper(message);\n\n\t\tthis.name = 'AggregateError';\n\n\t\tObject.defineProperty(this, '_errors', {value: errors});\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const error of this._errors) {\n\t\t\tyield error;\n\t\t}\n\t}\n}\n\nmodule.exports = AggregateError;\n","'use strict';\nconst os = require('os');\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/;\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/;\nconst homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir();\n\nmodule.exports = (stack, options) => {\n\toptions = Object.assign({pretty: false}, options);\n\n\treturn stack.replace(/\\\\/g, '/')\n\t\t.split('\\n')\n\t\t.filter(line => {\n\t\t\tconst pathMatches = line.match(extractPathRegex);\n\t\t\tif (pathMatches === null || !pathMatches[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst match = pathMatches[1];\n\n\t\t\t// Electron\n\t\t\tif (\n\t\t\t\tmatch.includes('.app/Contents/Resources/electron.asar') ||\n\t\t\t\tmatch.includes('.app/Contents/Resources/default_app.asar')\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn !pathRegex.test(match);\n\t\t})\n\t\t.filter(line => line.trim() !== '')\n\t\t.map(line => {\n\t\t\tif (options.pretty) {\n\t\t\t\treturn line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));\n\t\t\t}\n\n\t\t\treturn line;\n\t\t})\n\t\t.join('\\n');\n};\n","'use strict';\n\nmodule.exports = (string, count = 1, options) => {\n\toptions = {\n\t\tindent: ' ',\n\t\tincludeEmptyLines: false,\n\t\t...options\n\t};\n\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``\n\t\t);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``\n\t\t);\n\t}\n\n\tif (typeof options.indent !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``\n\t\t);\n\t}\n\n\tif (count === 0) {\n\t\treturn string;\n\t}\n\n\tconst regex = options.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n\n\treturn string.replace(regex, options.indent.repeat(count));\n};\n","'use strict';\nconst AggregateError = require('aggregate-error');\n\nmodule.exports = async (\n\titerable,\n\tmapper,\n\t{\n\t\tconcurrency = Infinity,\n\t\tstopOnError = true\n\t} = {}\n) => {\n\treturn new Promise((resolve, reject) => {\n\t\tif (typeof mapper !== 'function') {\n\t\t\tthrow new TypeError('Mapper function is required');\n\t\t}\n\n\t\tif (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {\n\t\t\tthrow new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t\t}\n\n\t\tconst result = [];\n\t\tconst errors = [];\n\t\tconst iterator = iterable[Symbol.iterator]();\n\t\tlet isRejected = false;\n\t\tlet isIterableDone = false;\n\t\tlet resolvingCount = 0;\n\t\tlet currentIndex = 0;\n\n\t\tconst next = () => {\n\t\t\tif (isRejected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextItem = iterator.next();\n\t\t\tconst index = currentIndex;\n\t\t\tcurrentIndex++;\n\n\t\t\tif (nextItem.done) {\n\t\t\t\tisIterableDone = true;\n\n\t\t\t\tif (resolvingCount === 0) {\n\t\t\t\t\tif (!stopOnError && errors.length !== 0) {\n\t\t\t\t\t\treject(new AggregateError(errors));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolvingCount++;\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst element = await nextItem.value;\n\t\t\t\t\tresult[index] = await mapper(element, index);\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (stopOnError) {\n\t\t\t\t\t\tisRejected = true;\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors.push(error);\n\t\t\t\t\t\tresolvingCount--;\n\t\t\t\t\t\tnext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t};\n\n\t\tfor (let i = 0; i < concurrency; i++) {\n\t\t\tnext();\n\n\t\t\tif (isIterableDone) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n};\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar Subscription_1 = require('./Subscription');\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    /** @deprecated internal use only */ AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject_1.Subject));\nexports.AsyncSubject = AsyncSubject;\n//# sourceMappingURL=AsyncSubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @deprecated internal use only */ BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n//# sourceMappingURL=BehaviorSubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map","\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n//# sourceMappingURL=Notification.js.map","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar queue_1 = require('./scheduler/queue');\nvar Subscription_1 = require('./Subscription');\nvar observeOn_1 = require('./operators/observeOn');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated internal use only */ ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map","\"use strict\";\n/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nvar Subject_1 = require('./Subject');\nexports.Subject = Subject_1.Subject;\nexports.AnonymousSubject = Subject_1.AnonymousSubject;\n/* tslint:enable:no-unused-variable */\nvar Observable_1 = require('./Observable');\nexports.Observable = Observable_1.Observable;\n// statics\n/* tslint:disable:no-use-before-declare */\nrequire('./add/observable/bindCallback');\nrequire('./add/observable/bindNodeCallback');\nrequire('./add/observable/combineLatest');\nrequire('./add/observable/concat');\nrequire('./add/observable/defer');\nrequire('./add/observable/empty');\nrequire('./add/observable/forkJoin');\nrequire('./add/observable/from');\nrequire('./add/observable/fromEvent');\nrequire('./add/observable/fromEventPattern');\nrequire('./add/observable/fromPromise');\nrequire('./add/observable/generate');\nrequire('./add/observable/if');\nrequire('./add/observable/interval');\nrequire('./add/observable/merge');\nrequire('./add/observable/race');\nrequire('./add/observable/never');\nrequire('./add/observable/of');\nrequire('./add/observable/onErrorResumeNext');\nrequire('./add/observable/pairs');\nrequire('./add/observable/range');\nrequire('./add/observable/using');\nrequire('./add/observable/throw');\nrequire('./add/observable/timer');\nrequire('./add/observable/zip');\n//dom\nrequire('./add/observable/dom/ajax');\nrequire('./add/observable/dom/webSocket');\n//operators\nrequire('./add/operator/buffer');\nrequire('./add/operator/bufferCount');\nrequire('./add/operator/bufferTime');\nrequire('./add/operator/bufferToggle');\nrequire('./add/operator/bufferWhen');\nrequire('./add/operator/catch');\nrequire('./add/operator/combineAll');\nrequire('./add/operator/combineLatest');\nrequire('./add/operator/concat');\nrequire('./add/operator/concatAll');\nrequire('./add/operator/concatMap');\nrequire('./add/operator/concatMapTo');\nrequire('./add/operator/count');\nrequire('./add/operator/dematerialize');\nrequire('./add/operator/debounce');\nrequire('./add/operator/debounceTime');\nrequire('./add/operator/defaultIfEmpty');\nrequire('./add/operator/delay');\nrequire('./add/operator/delayWhen');\nrequire('./add/operator/distinct');\nrequire('./add/operator/distinctUntilChanged');\nrequire('./add/operator/distinctUntilKeyChanged');\nrequire('./add/operator/do');\nrequire('./add/operator/exhaust');\nrequire('./add/operator/exhaustMap');\nrequire('./add/operator/expand');\nrequire('./add/operator/elementAt');\nrequire('./add/operator/filter');\nrequire('./add/operator/finally');\nrequire('./add/operator/find');\nrequire('./add/operator/findIndex');\nrequire('./add/operator/first');\nrequire('./add/operator/groupBy');\nrequire('./add/operator/ignoreElements');\nrequire('./add/operator/isEmpty');\nrequire('./add/operator/audit');\nrequire('./add/operator/auditTime');\nrequire('./add/operator/last');\nrequire('./add/operator/let');\nrequire('./add/operator/every');\nrequire('./add/operator/map');\nrequire('./add/operator/mapTo');\nrequire('./add/operator/materialize');\nrequire('./add/operator/max');\nrequire('./add/operator/merge');\nrequire('./add/operator/mergeAll');\nrequire('./add/operator/mergeMap');\nrequire('./add/operator/mergeMapTo');\nrequire('./add/operator/mergeScan');\nrequire('./add/operator/min');\nrequire('./add/operator/multicast');\nrequire('./add/operator/observeOn');\nrequire('./add/operator/onErrorResumeNext');\nrequire('./add/operator/pairwise');\nrequire('./add/operator/partition');\nrequire('./add/operator/pluck');\nrequire('./add/operator/publish');\nrequire('./add/operator/publishBehavior');\nrequire('./add/operator/publishReplay');\nrequire('./add/operator/publishLast');\nrequire('./add/operator/race');\nrequire('./add/operator/reduce');\nrequire('./add/operator/repeat');\nrequire('./add/operator/repeatWhen');\nrequire('./add/operator/retry');\nrequire('./add/operator/retryWhen');\nrequire('./add/operator/sample');\nrequire('./add/operator/sampleTime');\nrequire('./add/operator/scan');\nrequire('./add/operator/sequenceEqual');\nrequire('./add/operator/share');\nrequire('./add/operator/shareReplay');\nrequire('./add/operator/single');\nrequire('./add/operator/skip');\nrequire('./add/operator/skipLast');\nrequire('./add/operator/skipUntil');\nrequire('./add/operator/skipWhile');\nrequire('./add/operator/startWith');\nrequire('./add/operator/subscribeOn');\nrequire('./add/operator/switch');\nrequire('./add/operator/switchMap');\nrequire('./add/operator/switchMapTo');\nrequire('./add/operator/take');\nrequire('./add/operator/takeLast');\nrequire('./add/operator/takeUntil');\nrequire('./add/operator/takeWhile');\nrequire('./add/operator/throttle');\nrequire('./add/operator/throttleTime');\nrequire('./add/operator/timeInterval');\nrequire('./add/operator/timeout');\nrequire('./add/operator/timeoutWith');\nrequire('./add/operator/timestamp');\nrequire('./add/operator/toArray');\nrequire('./add/operator/toPromise');\nrequire('./add/operator/window');\nrequire('./add/operator/windowCount');\nrequire('./add/operator/windowTime');\nrequire('./add/operator/windowToggle');\nrequire('./add/operator/windowWhen');\nrequire('./add/operator/withLatestFrom');\nrequire('./add/operator/zip');\nrequire('./add/operator/zipAll');\n/* tslint:disable:no-unused-variable */\nvar Subscription_1 = require('./Subscription');\nexports.Subscription = Subscription_1.Subscription;\nvar Subscriber_1 = require('./Subscriber');\nexports.Subscriber = Subscriber_1.Subscriber;\nvar AsyncSubject_1 = require('./AsyncSubject');\nexports.AsyncSubject = AsyncSubject_1.AsyncSubject;\nvar ReplaySubject_1 = require('./ReplaySubject');\nexports.ReplaySubject = ReplaySubject_1.ReplaySubject;\nvar BehaviorSubject_1 = require('./BehaviorSubject');\nexports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\nvar ConnectableObservable_1 = require('./observable/ConnectableObservable');\nexports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\nvar Notification_1 = require('./Notification');\nexports.Notification = Notification_1.Notification;\nvar EmptyError_1 = require('./util/EmptyError');\nexports.EmptyError = EmptyError_1.EmptyError;\nvar ArgumentOutOfRangeError_1 = require('./util/ArgumentOutOfRangeError');\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\nvar TimeoutError_1 = require('./util/TimeoutError');\nexports.TimeoutError = TimeoutError_1.TimeoutError;\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\nexports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\nvar timeInterval_1 = require('./operator/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\nvar timestamp_1 = require('./operators/timestamp');\nexports.Timestamp = timestamp_1.Timestamp;\nvar TestScheduler_1 = require('./testing/TestScheduler');\nexports.TestScheduler = TestScheduler_1.TestScheduler;\nvar VirtualTimeScheduler_1 = require('./scheduler/VirtualTimeScheduler');\nexports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\nvar AjaxObservable_1 = require('./observable/dom/AjaxObservable');\nexports.AjaxResponse = AjaxObservable_1.AjaxResponse;\nexports.AjaxError = AjaxObservable_1.AjaxError;\nexports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\nvar pipe_1 = require('./util/pipe');\nexports.pipe = pipe_1.pipe;\nvar asap_1 = require('./scheduler/asap');\nvar async_1 = require('./scheduler/async');\nvar queue_1 = require('./scheduler/queue');\nvar animationFrame_1 = require('./scheduler/animationFrame');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\nvar iterator_1 = require('./symbol/iterator');\nvar observable_1 = require('./symbol/observable');\nvar _operators = require('./operators');\nexports.operators = _operators;\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap_1.asap,\n    queue: queue_1.queue,\n    animationFrame: animationFrame_1.animationFrame,\n    async: async_1.async\n};\nexports.Scheduler = Scheduler;\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber_1.rxSubscriber,\n    observable: observable_1.observable,\n    iterator: iterator_1.iterator\n};\nexports.Symbol = Symbol;\n//# sourceMappingURL=Rx.js.map","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindCallback_1 = require('../../observable/bindCallback');\nObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindNodeCallback_1 = require('../../observable/bindNodeCallback');\nObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../observable/combineLatest');\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../observable/concat');\nObservable_1.Observable.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defer_1 = require('../../observable/defer');\nObservable_1.Observable.defer = defer_1.defer;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar ajax_1 = require('../../../observable/dom/ajax');\nObservable_1.Observable.ajax = ajax_1.ajax;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar webSocket_1 = require('../../../observable/dom/webSocket');\nObservable_1.Observable.webSocket = webSocket_1.webSocket;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar empty_1 = require('../../observable/empty');\nObservable_1.Observable.empty = empty_1.empty;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar from_1 = require('../../observable/from');\nObservable_1.Observable.from = from_1.from;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEventPattern_1 = require('../../observable/fromEventPattern');\nObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromPromise_1 = require('../../observable/fromPromise');\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar generate_1 = require('../../observable/generate');\nObservable_1.Observable.generate = generate_1.generate;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar if_1 = require('../../observable/if');\nObservable_1.Observable.if = if_1._if;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../observable/merge');\nObservable_1.Observable.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar never_1 = require('../../observable/never');\nObservable_1.Observable.never = never_1.never;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../observable/onErrorResumeNext');\nObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairs_1 = require('../../observable/pairs');\nObservable_1.Observable.pairs = pairs_1.pairs;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../observable/race');\nObservable_1.Observable.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar range_1 = require('../../observable/range');\nObservable_1.Observable.range = range_1.range;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throw_1 = require('../../observable/throw');\nObservable_1.Observable.throw = throw_1._throw;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timer_1 = require('../../observable/timer');\nObservable_1.Observable.timer = timer_1.timer;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar using_1 = require('../../observable/using');\nObservable_1.Observable.using = using_1.using;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../observable/zip');\nObservable_1.Observable.zip = zip_1.zip;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar audit_1 = require('../../operator/audit');\nObservable_1.Observable.prototype.audit = audit_1.audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar auditTime_1 = require('../../operator/auditTime');\nObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar buffer_1 = require('../../operator/buffer');\nObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferCount_1 = require('../../operator/bufferCount');\nObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferTime_1 = require('../../operator/bufferTime');\nObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferToggle_1 = require('../../operator/bufferToggle');\nObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferWhen_1 = require('../../operator/bufferWhen');\nObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineAll_1 = require('../../operator/combineAll');\nObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../operator/combineLatest');\nObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../operator/concat');\nObservable_1.Observable.prototype.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatAll_1 = require('../../operator/concatAll');\nObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMap_1 = require('../../operator/concatMap');\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMapTo_1 = require('../../operator/concatMapTo');\nObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar count_1 = require('../../operator/count');\nObservable_1.Observable.prototype.count = count_1.count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounce_1 = require('../../operator/debounce');\nObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounceTime_1 = require('../../operator/debounceTime');\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defaultIfEmpty_1 = require('../../operator/defaultIfEmpty');\nObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delay_1 = require('../../operator/delay');\nObservable_1.Observable.prototype.delay = delay_1.delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delayWhen_1 = require('../../operator/delayWhen');\nObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar dematerialize_1 = require('../../operator/dematerialize');\nObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinct_1 = require('../../operator/distinct');\nObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilChanged_1 = require('../../operator/distinctUntilChanged');\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilKeyChanged_1 = require('../../operator/distinctUntilKeyChanged');\nObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar elementAt_1 = require('../../operator/elementAt');\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar every_1 = require('../../operator/every');\nObservable_1.Observable.prototype.every = every_1.every;\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaust_1 = require('../../operator/exhaust');\nObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaustMap_1 = require('../../operator/exhaustMap');\nObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar expand_1 = require('../../operator/expand');\nObservable_1.Observable.prototype.expand = expand_1.expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar finally_1 = require('../../operator/finally');\nObservable_1.Observable.prototype.finally = finally_1._finally;\nObservable_1.Observable.prototype._finally = finally_1._finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar find_1 = require('../../operator/find');\nObservable_1.Observable.prototype.find = find_1.find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar findIndex_1 = require('../../operator/findIndex');\nObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar groupBy_1 = require('../../operator/groupBy');\nObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar ignoreElements_1 = require('../../operator/ignoreElements');\nObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar isEmpty_1 = require('../../operator/isEmpty');\nObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar last_1 = require('../../operator/last');\nObservable_1.Observable.prototype.last = last_1.last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar let_1 = require('../../operator/let');\nObservable_1.Observable.prototype.let = let_1.letProto;\nObservable_1.Observable.prototype.letBind = let_1.letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mapTo_1 = require('../../operator/mapTo');\nObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar materialize_1 = require('../../operator/materialize');\nObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar max_1 = require('../../operator/max');\nObservable_1.Observable.prototype.max = max_1.max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../operator/merge');\nObservable_1.Observable.prototype.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeAll_1 = require('../../operator/mergeAll');\nObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMap_1 = require('../../operator/mergeMap');\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMapTo_1 = require('../../operator/mergeMapTo');\nObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\nObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeScan_1 = require('../../operator/mergeScan');\nObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar min_1 = require('../../operator/min');\nObservable_1.Observable.prototype.min = min_1.min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar multicast_1 = require('../../operator/multicast');\nObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar observeOn_1 = require('../../operator/observeOn');\nObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../operator/onErrorResumeNext');\nObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairwise_1 = require('../../operator/pairwise');\nObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar partition_1 = require('../../operator/partition');\nObservable_1.Observable.prototype.partition = partition_1.partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pluck_1 = require('../../operator/pluck');\nObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publish_1 = require('../../operator/publish');\nObservable_1.Observable.prototype.publish = publish_1.publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishBehavior_1 = require('../../operator/publishBehavior');\nObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishLast_1 = require('../../operator/publishLast');\nObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishReplay_1 = require('../../operator/publishReplay');\nObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../operator/race');\nObservable_1.Observable.prototype.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar reduce_1 = require('../../operator/reduce');\nObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeat_1 = require('../../operator/repeat');\nObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeatWhen_1 = require('../../operator/repeatWhen');\nObservable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retry_1 = require('../../operator/retry');\nObservable_1.Observable.prototype.retry = retry_1.retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retryWhen_1 = require('../../operator/retryWhen');\nObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sample_1 = require('../../operator/sample');\nObservable_1.Observable.prototype.sample = sample_1.sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sampleTime_1 = require('../../operator/sampleTime');\nObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sequenceEqual_1 = require('../../operator/sequenceEqual');\nObservable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar shareReplay_1 = require('../../operator/shareReplay');\nObservable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar single_1 = require('../../operator/single');\nObservable_1.Observable.prototype.single = single_1.single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skip_1 = require('../../operator/skip');\nObservable_1.Observable.prototype.skip = skip_1.skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipLast_1 = require('../../operator/skipLast');\nObservable_1.Observable.prototype.skipLast = skipLast_1.skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipUntil_1 = require('../../operator/skipUntil');\nObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipWhile_1 = require('../../operator/skipWhile');\nObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar startWith_1 = require('../../operator/startWith');\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar subscribeOn_1 = require('../../operator/subscribeOn');\nObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switch_1 = require('../../operator/switch');\nObservable_1.Observable.prototype.switch = switch_1._switch;\nObservable_1.Observable.prototype._switch = switch_1._switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMapTo_1 = require('../../operator/switchMapTo');\nObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar take_1 = require('../../operator/take');\nObservable_1.Observable.prototype.take = take_1.take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeLast_1 = require('../../operator/takeLast');\nObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeUntil_1 = require('../../operator/takeUntil');\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeWhile_1 = require('../../operator/takeWhile');\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttle_1 = require('../../operator/throttle');\nObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttleTime_1 = require('../../operator/throttleTime');\nObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeInterval_1 = require('../../operator/timeInterval');\nObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeout_1 = require('../../operator/timeout');\nObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeoutWith_1 = require('../../operator/timeoutWith');\nObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timestamp_1 = require('../../operator/timestamp');\nObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toArray_1 = require('../../operator/toArray');\nObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar window_1 = require('../../operator/window');\nObservable_1.Observable.prototype.window = window_1.window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowCount_1 = require('../../operator/windowCount');\nObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowTime_1 = require('../../operator/windowTime');\nObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowToggle_1 = require('../../operator/windowToggle');\nObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowWhen_1 = require('../../operator/windowWhen');\nObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../operator/zip');\nObservable_1.Observable.prototype.zip = zip_1.zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zipAll_1 = require('../../operator/zipAll');\nObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n//# sourceMappingURL=ArrayLikeObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    /** @deprecated internal use only */ BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    /** @deprecated internal use only */ BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundNodeCallbackObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(/** @deprecated internal use only */ source, \n        /** @deprecated internal use only */ subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */ this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = (function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    /** @deprecated internal use only */ DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_1.Observable));\nexports.DeferObservable = DeferObservable;\nvar DeferSubscriber = (function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=DeferObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n//# sourceMappingURL=EmptyObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = (function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    /** @deprecated internal use only */ ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        subscriber.syncErrorThrowable = true;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n//# sourceMappingURL=ErrorObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    /** @deprecated internal use only */ ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */ FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n//# sourceMappingURL=FromEventObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('../util/isFunction');\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = (function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    /** @deprecated internal use only */ FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction_1.isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n//# sourceMappingURL=FromEventPatternObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n//# sourceMappingURL=FromObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar GenerateObservable = (function (_super) {\n    __extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        _super.call(this);\n        this.initialState = initialState;\n        this.condition = condition;\n        this.iterate = iterate;\n        this.resultSelector = resultSelector;\n        this.scheduler = scheduler;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    /** @deprecated internal use only */ GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable_1.Observable));\nexports.GenerateObservable = GenerateObservable;\n//# sourceMappingURL=GenerateObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IfObservable = (function (_super) {\n    __extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        _super.call(this);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    /** @deprecated internal use only */ IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable_1.Observable));\nexports.IfObservable = IfObservable;\nvar IfSubscriber = (function (_super) {\n    __extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        _super.call(this, destination);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n        this.tryIf();\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=IfObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    /** @deprecated internal use only */ IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n//# sourceMappingURL=IntervalObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar noop_1 = require('../util/noop');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable = (function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    /** @deprecated internal use only */ NeverObservable.prototype._subscribe = function (subscriber) {\n        noop_1.noop();\n    };\n    return NeverObservable;\n}(Observable_1.Observable));\nexports.NeverObservable = NeverObservable;\n//# sourceMappingURL=NeverObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PairsObservable = (function (_super) {\n    __extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        _super.call(this);\n        this.obj = obj;\n        this.scheduler = scheduler;\n        this.keys = Object.keys(obj);\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional IScheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional IScheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    /** @deprecated internal use only */ PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable_1.Observable));\nexports.PairsObservable = PairsObservable;\n//# sourceMappingURL=PairsObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = (function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n//# sourceMappingURL=RangeObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n//# sourceMappingURL=ScalarObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar asap_1 = require('../scheduler/asap');\nvar isNumeric_1 = require('../util/isNumeric');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = (function (_super) {\n    __extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        _super.call(this);\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap_1.asap;\n        }\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    /** @deprecated internal use only */ SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable_1.Observable));\nexports.SubscribeOnObservable = SubscribeOnObservable;\n//# sourceMappingURL=SubscribeOnObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    /** @deprecated internal use only */ TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n//# sourceMappingURL=TimerObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar UsingObservable = (function (_super) {\n    __extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        _super.call(this);\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    /** @deprecated internal use only */ UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable_1.Observable));\nexports.UsingObservable = UsingObservable;\nvar UsingSubscriber = (function (_super) {\n    __extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        _super.call(this, destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=UsingObservable.js.map","\"use strict\";\nvar BoundCallbackObservable_1 = require('./BoundCallbackObservable');\nexports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar BoundNodeCallbackObservable_1 = require('./BoundNodeCallbackObservable');\nexports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar of_1 = require('./of');\nvar from_1 = require('./from');\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from_1.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar DeferObservable_1 = require('./DeferObservable');\nexports.defer = DeferObservable_1.DeferObservable.create;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../../util/root');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar Observable_1 = require('../../Observable');\nvar Subscriber_1 = require('../../Subscriber');\nvar map_1 = require('../../operators/map');\nfunction getCORSRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else if (!!root_1.root.XDomainRequest) {\n        return new root_1.root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root_1.root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root_1.root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) { headers = null; }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\nexports.ajaxGet = ajaxGet;\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\nexports.ajaxPost = ajaxPost;\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\nexports.ajaxDelete = ajaxDelete;\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\nexports.ajaxPut = ajaxPut;\n;\nfunction ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\nexports.ajaxPatch = ajaxPatch;\n;\nvar mapResponse = map_1.map(function (x, index) { return x.response; });\nfunction ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\nexports.ajaxGetJSON = ajaxGetJSON;\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = (function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    /** @deprecated internal use only */ AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable_1.Observable));\nexports.AjaxObservable = AjaxObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxSubscriber = (function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n        if (xhr === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURIComponent(key) + \"=\" + encodeURIComponent(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root_1.root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_1.Subscriber));\nexports.AjaxSubscriber = AjaxSubscriber;\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = (function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\nexports.AjaxResponse = AjaxResponse;\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = (function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error));\nexports.AjaxError = AjaxError;\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                // HACK(benlesh): TypeScript shennanigans\n                // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            // HACK(benlesh): TypeScript shennanigans\n            // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = (function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\nexports.AjaxTimeoutError = AjaxTimeoutError;\n//# sourceMappingURL=AjaxObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../../Subject');\nvar Subscriber_1 = require('../../Subscriber');\nvar Observable_1 = require('../../Observable');\nvar Subscription_1 = require('../../Subscription');\nvar root_1 = require('../../util/root');\nvar ReplaySubject_1 = require('../../ReplaySubject');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar assign_1 = require('../../util/assign');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        if (urlConfigOrSource instanceof Observable_1.Observable) {\n            _super.call(this, destination, urlConfigOrSource);\n        }\n        else {\n            _super.call(this);\n            this.WebSocketCtor = root_1.root.WebSocket;\n            this._output = new Subject_1.Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign_1.assign(this, urlConfigOrSource);\n            }\n            if (!this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n     *\n     * @example <caption>Wraps browser WebSocket</caption>\n     *\n     * let socket$ = Observable.webSocket('ws://localhost:8081');\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n     *\n     * import { w3cwebsocket } from 'websocket';\n     *\n     * let socket$ = Observable.webSocket({\n     *   url: 'ws://localhost:8081',\n     *   WebSocketCtor: w3cwebsocket\n     * });\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this.socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n        this._output = new Subject_1.Subject();\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable_1.Observable(function (observer) {\n            var result = tryCatch_1.tryCatch(subMsg)();\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch_1.tryCatch(messageFilter)(x);\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch_1.tryCatch(unsubMsg)();\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n            if (this.binaryType) {\n                this.socket.binaryType = this.binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription_1.Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    /** @deprecated internal use only */ WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription_1.Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0) {\n                if (socket && socket.readyState === 1) {\n                    socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this._resetState();\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(Subject_1.AnonymousSubject));\nexports.WebSocketSubject = WebSocketSubject;\n//# sourceMappingURL=WebSocketSubject.js.map","\"use strict\";\nvar AjaxObservable_1 = require('./AjaxObservable');\nexports.ajax = AjaxObservable_1.AjaxObservable.create;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar WebSocketSubject_1 = require('./WebSocketSubject');\nexports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar EmptyObservable_1 = require('./EmptyObservable');\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar FromObservable_1 = require('./FromObservable');\nexports.from = FromObservable_1.FromObservable.create;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar FromEventPatternObservable_1 = require('./FromEventPatternObservable');\nexports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar PromiseObservable_1 = require('./PromiseObservable');\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar GenerateObservable_1 = require('./GenerateObservable');\nexports.generate = GenerateObservable_1.GenerateObservable.create;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar IfObservable_1 = require('./IfObservable');\nexports._if = IfObservable_1.IfObservable.create;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar Observable_1 = require('../Observable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar mergeAll_1 = require('../operators/mergeAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar NeverObservable_1 = require('./NeverObservable');\nexports.never = NeverObservable_1.NeverObservable.create;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar ArrayObservable_1 = require('./ArrayObservable');\nexports.of = ArrayObservable_1.ArrayObservable.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar PairsObservable_1 = require('./PairsObservable');\nexports.pairs = PairsObservable_1.PairsObservable.create;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\nexports.race = race;\nvar RaceOperator = (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = (function (_super) {\n    __extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.RaceSubscriber = RaceSubscriber;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar RangeObservable_1 = require('./RangeObservable');\nexports.range = RangeObservable_1.RangeObservable.create;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar ErrorObservable_1 = require('./ErrorObservable');\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar TimerObservable_1 = require('./TimerObservable');\nexports.timer = TimerObservable_1.TimerObservable.create;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nvar UsingObservable_1 = require('./UsingObservable');\nexports.using = UsingObservable_1.UsingObservable.create;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\nexports.zip = zip_1.zipStatic;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar audit_1 = require('../operators/audit');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return audit_1.audit(durationSelector)(this);\n}\nexports.audit = audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar auditTime_1 = require('../operators/auditTime');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return auditTime_1.auditTime(duration, scheduler)(this);\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar buffer_1 = require('../operators/buffer');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return buffer_1.buffer(closingNotifier)(this);\n}\nexports.buffer = buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar bufferCount_1 = require('../operators/bufferCount');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return bufferCount_1.bufferCount(bufferSize, startBufferEvery)(this);\n}\nexports.bufferCount = bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar bufferTime_1 = require('../operators/bufferTime');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return bufferTime_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\nexports.bufferTime = bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar bufferToggle_1 = require('../operators/bufferToggle');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return bufferToggle_1.bufferToggle(openings, closingSelector)(this);\n}\nexports.bufferToggle = bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar bufferWhen_1 = require('../operators/bufferWhen');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return bufferWhen_1.bufferWhen(closingSelector)(this);\n}\nexports.bufferWhen = bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar catchError_1 = require('../operators/catchError');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return catchError_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar combineAll_1 = require('../operators/combineAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nfunction combineAll(project) {\n    return combineAll_1.combineAll(project)(this);\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return combineLatest_1.combineLatest.apply(void 0, observables)(this);\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar concat_1 = require('../operators/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return concat_1.concat.apply(void 0, observables)(this);\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return concatAll_1.concatAll()(this);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar concatMap_1 = require('../operators/concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return concatMap_1.concatMap(project, resultSelector)(this);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar concatMapTo_1 = require('../operators/concatMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMapTo_1.concatMapTo(innerObservable, resultSelector)(this);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar count_1 = require('../operators/count');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar debounce_1 = require('../operators/debounce');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return debounce_1.debounce(durationSelector)(this);\n}\nexports.debounce = debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar debounceTime_1 = require('../operators/debounceTime');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return debounceTime_1.debounceTime(dueTime, scheduler)(this);\n}\nexports.debounceTime = debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar defaultIfEmpty_1 = require('../operators/defaultIfEmpty');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return defaultIfEmpty_1.defaultIfEmpty(defaultValue)(this);\n}\nexports.defaultIfEmpty = defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar delay_1 = require('../operators/delay');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return delay_1.delay(delay, scheduler)(this);\n}\nexports.delay = delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar delayWhen_1 = require('../operators/delayWhen');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    return delayWhen_1.delayWhen(delayDurationSelector, subscriptionDelay)(this);\n}\nexports.delayWhen = delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar dematerialize_1 = require('../operators/dematerialize');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return dematerialize_1.dematerialize()(this);\n}\nexports.dematerialize = dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar distinct_1 = require('../operators/distinct');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return distinct_1.distinct(keySelector, flushes)(this);\n}\nexports.distinct = distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('../operators/distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);\n}\nexports.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar distinctUntilKeyChanged_1 = require('../operators/distinctUntilKeyChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar tap_1 = require('../operators/tap');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar elementAt_1 = require('../operators/elementAt');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar every_1 = require('../operators/every');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return every_1.every(predicate, thisArg)(this);\n}\nexports.every = every;\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar exhaust_1 = require('../operators/exhaust');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return exhaust_1.exhaust()(this);\n}\nexports.exhaust = exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar exhaustMap_1 = require('../operators/exhaustMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return exhaustMap_1.exhaustMap(project, resultSelector)(this);\n}\nexports.exhaustMap = exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar expand_1 = require('../operators/expand');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return expand_1.expand(project, concurrent, scheduler)(this);\n}\nexports.expand = expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar finalize_1 = require('../operators/finalize');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return finalize_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/* tslint:enable:max-line-length */\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    return find_1.find(predicate, thisArg)(this);\n}\nexports.find = find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar findIndex_1 = require('../operators/findIndex');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return findIndex_1.findIndex(predicate, thisArg)(this);\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar first_1 = require('../operators/first');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar groupBy_1 = require('../operators/groupBy');\nexports.GroupedObservable = groupBy_1.GroupedObservable;\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return groupBy_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\nexports.groupBy = groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar ignoreElements_1 = require('../operators/ignoreElements');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return ignoreElements_1.ignoreElements()(this);\n}\nexports.ignoreElements = ignoreElements;\n;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar isEmpty_1 = require('../operators/isEmpty');\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nfunction isEmpty() {\n    return isEmpty_1.isEmpty()(this);\n}\nexports.isEmpty = isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar last_1 = require('../operators/last');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return last_1.last(predicate, resultSelector, defaultValue)(this);\n}\nexports.last = last;\n//# sourceMappingURL=last.js.map","\"use strict\";\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nfunction letProto(func) {\n    return func(this);\n}\nexports.letProto = letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar mapTo_1 = require('../operators/mapTo');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return mapTo_1.mapTo(value)(this);\n}\nexports.mapTo = mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar materialize_1 = require('../operators/materialize');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return materialize_1.materialize()(this);\n}\nexports.materialize = materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar max_1 = require('../operators/max');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    return max_1.max(comparer)(this);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar merge_1 = require('../operators/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return merge_1.merge.apply(void 0, observables)(this);\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar mergeAll_1 = require('../operators/mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeAll_1.mergeAll(concurrent)(this);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar mergeMap_1 = require('../operators/mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);\n}\nexports.mergeMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar mergeMapTo_1 = require('../operators/mergeMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMapTo_1.mergeMapTo(innerObservable, resultSelector, concurrent)(this);\n}\nexports.mergeMapTo = mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar mergeScan_1 = require('../operators/mergeScan');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\n}\nexports.mergeScan = mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar min_1 = require('../operators/min');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    return min_1.min(comparer)(this);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar multicast_1 = require('../operators/multicast');\n/* tslint:enable:max-line-length */\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return multicast_1.multicast(subjectOrSubjectFactory, selector)(this);\n}\nexports.multicast = multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar observeOn_1 = require('../operators/observeOn');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, nextSources)(this);\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar pairwise_1 = require('../operators/pairwise');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return pairwise_1.pairwise()(this);\n}\nexports.pairwise = pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar partition_1 = require('../operators/partition');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return partition_1.partition(predicate, thisArg)(this);\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar pluck_1 = require('../operators/pluck');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    return pluck_1.pluck.apply(void 0, properties)(this);\n}\nexports.pluck = pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar publishBehavior_1 = require('../operators/publishBehavior');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return publishBehavior_1.publishBehavior(value)(this);\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar publishLast_1 = require('../operators/publishLast');\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nfunction publishLast() {\n    //TODO(benlesh): correct type-flow through here.\n    return publishLast_1.publishLast()(this);\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar publishReplay_1 = require('../operators/publishReplay');\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar race_1 = require('../operators/race');\n// NOTE: to support backwards compatability with 5.4.* and lower\nvar race_2 = require('../observable/race');\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return race_1.race.apply(void 0, observables)(this);\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar reduce_1 = require('../operators/reduce');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return reduce_1.reduce(accumulator, seed)(this);\n    }\n    return reduce_1.reduce(accumulator)(this);\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return repeat_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar repeatWhen_1 = require('../operators/repeatWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return repeatWhen_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar retry_1 = require('../operators/retry');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return retry_1.retry(count)(this);\n}\nexports.retry = retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar retryWhen_1 = require('../operators/retryWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return retryWhen_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar sample_1 = require('../operators/sample');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return sample_1.sample(notifier)(this);\n}\nexports.sample = sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar sampleTime_1 = require('../operators/sampleTime');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return sampleTime_1.sampleTime(period, scheduler)(this);\n}\nexports.sampleTime = sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar scan_1 = require('../operators/scan');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar sequenceEqual_1 = require('../operators/sequenceEqual');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return sequenceEqual_1.sequenceEqual(compareTo, comparor)(this);\n}\nexports.sequenceEqual = sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar share_1 = require('../operators/share');\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar shareReplay_1 = require('../operators/shareReplay');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);\n}\nexports.shareReplay = shareReplay;\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar single_1 = require('../operators/single');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return single_1.single(predicate)(this);\n}\nexports.single = single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar skipLast_1 = require('../operators/skipLast');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar skipUntil_1 = require('../operators/skipUntil');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar skipWhile_1 = require('../operators/skipWhile');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return skipWhile_1.skipWhile(predicate)(this);\n}\nexports.skipWhile = skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar startWith_1 = require('../operators/startWith');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return startWith_1.startWith.apply(void 0, array)(this);\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar subscribeOn_1 = require('../operators/subscribeOn');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return subscribeOn_1.subscribeOn(scheduler, delay)(this);\n}\nexports.subscribeOn = subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar switchAll_1 = require('../operators/switchAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nfunction _switch() {\n    return switchAll_1.switchAll()(this);\n}\nexports._switch = _switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar switchMap_1 = require('../operators/switchMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar switchMapTo_1 = require('../operators/switchMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return switchMapTo_1.switchMapTo(innerObservable, resultSelector)(this);\n}\nexports.switchMapTo = switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar take_1 = require('../operators/take');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return take_1.take(count)(this);\n}\nexports.take = take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar takeLast_1 = require('../operators/takeLast');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return takeLast_1.takeLast(count)(this);\n}\nexports.takeLast = takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar takeUntil_1 = require('../operators/takeUntil');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return takeUntil_1.takeUntil(notifier)(this);\n}\nexports.takeUntil = takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar takeWhile_1 = require('../operators/takeWhile');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return takeWhile_1.takeWhile(predicate)(this);\n}\nexports.takeWhile = takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar throttle_1 = require('../operators/throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttle_1.throttle(durationSelector, config)(this);\n}\nexports.throttle = throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('../operators/throttle');\nvar throttleTime_1 = require('../operators/throttleTime');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttleTime_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeInterval_1 = require('../operators/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeInterval_1.timeInterval(scheduler)(this);\n}\nexports.timeInterval = timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeout_1 = require('../operators/timeout');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeout_1.timeout(due, scheduler)(this);\n}\nexports.timeout = timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeoutWith_1 = require('../operators/timeoutWith');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeoutWith_1.timeoutWith(due, withObservable, scheduler)(this);\n}\nexports.timeoutWith = timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timestamp_1 = require('../operators/timestamp');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timestamp_1.timestamp(scheduler)(this);\n}\nexports.timestamp = timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar toArray_1 = require('../operators/toArray');\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nfunction toArray() {\n    return toArray_1.toArray()(this);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar window_1 = require('../operators/window');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return window_1.window(windowBoundaries)(this);\n}\nexports.window = window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar windowCount_1 = require('../operators/windowCount');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return windowCount_1.windowCount(windowSize, startWindowEvery)(this);\n}\nexports.windowCount = windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nvar windowTime_1 = require('../operators/windowTime');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return windowTime_1.windowTime(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\n}\nexports.windowTime = windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar windowToggle_1 = require('../operators/windowToggle');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return windowToggle_1.windowToggle(openings, closingSelector)(this);\n}\nexports.windowToggle = windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar windowWhen_1 = require('../operators/windowWhen');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return windowWhen_1.windowWhen(closingSelector)(this);\n}\nexports.windowWhen = windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar withLatestFrom_1 = require('../operators/withLatestFrom');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return zip_1.zip.apply(void 0, observables)(this);\n}\nexports.zipProto = zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar zipAll_1 = require('../operators/zipAll');\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nfunction zipAll(project) {\n    return zipAll_1.zipAll(project)(this);\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar audit_1 = require('./operators/audit');\nexports.audit = audit_1.audit;\nvar auditTime_1 = require('./operators/auditTime');\nexports.auditTime = auditTime_1.auditTime;\nvar buffer_1 = require('./operators/buffer');\nexports.buffer = buffer_1.buffer;\nvar bufferCount_1 = require('./operators/bufferCount');\nexports.bufferCount = bufferCount_1.bufferCount;\nvar bufferTime_1 = require('./operators/bufferTime');\nexports.bufferTime = bufferTime_1.bufferTime;\nvar bufferToggle_1 = require('./operators/bufferToggle');\nexports.bufferToggle = bufferToggle_1.bufferToggle;\nvar bufferWhen_1 = require('./operators/bufferWhen');\nexports.bufferWhen = bufferWhen_1.bufferWhen;\nvar catchError_1 = require('./operators/catchError');\nexports.catchError = catchError_1.catchError;\nvar combineAll_1 = require('./operators/combineAll');\nexports.combineAll = combineAll_1.combineAll;\nvar combineLatest_1 = require('./operators/combineLatest');\nexports.combineLatest = combineLatest_1.combineLatest;\nvar concat_1 = require('./operators/concat');\nexports.concat = concat_1.concat;\nvar concatAll_1 = require('./operators/concatAll');\nexports.concatAll = concatAll_1.concatAll;\nvar concatMap_1 = require('./operators/concatMap');\nexports.concatMap = concatMap_1.concatMap;\nvar concatMapTo_1 = require('./operators/concatMapTo');\nexports.concatMapTo = concatMapTo_1.concatMapTo;\nvar count_1 = require('./operators/count');\nexports.count = count_1.count;\nvar debounce_1 = require('./operators/debounce');\nexports.debounce = debounce_1.debounce;\nvar debounceTime_1 = require('./operators/debounceTime');\nexports.debounceTime = debounceTime_1.debounceTime;\nvar defaultIfEmpty_1 = require('./operators/defaultIfEmpty');\nexports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\nvar delay_1 = require('./operators/delay');\nexports.delay = delay_1.delay;\nvar delayWhen_1 = require('./operators/delayWhen');\nexports.delayWhen = delayWhen_1.delayWhen;\nvar dematerialize_1 = require('./operators/dematerialize');\nexports.dematerialize = dematerialize_1.dematerialize;\nvar distinct_1 = require('./operators/distinct');\nexports.distinct = distinct_1.distinct;\nvar distinctUntilChanged_1 = require('./operators/distinctUntilChanged');\nexports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\nvar distinctUntilKeyChanged_1 = require('./operators/distinctUntilKeyChanged');\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\nvar elementAt_1 = require('./operators/elementAt');\nexports.elementAt = elementAt_1.elementAt;\nvar every_1 = require('./operators/every');\nexports.every = every_1.every;\nvar exhaust_1 = require('./operators/exhaust');\nexports.exhaust = exhaust_1.exhaust;\nvar exhaustMap_1 = require('./operators/exhaustMap');\nexports.exhaustMap = exhaustMap_1.exhaustMap;\nvar expand_1 = require('./operators/expand');\nexports.expand = expand_1.expand;\nvar filter_1 = require('./operators/filter');\nexports.filter = filter_1.filter;\nvar finalize_1 = require('./operators/finalize');\nexports.finalize = finalize_1.finalize;\nvar find_1 = require('./operators/find');\nexports.find = find_1.find;\nvar findIndex_1 = require('./operators/findIndex');\nexports.findIndex = findIndex_1.findIndex;\nvar first_1 = require('./operators/first');\nexports.first = first_1.first;\nvar groupBy_1 = require('./operators/groupBy');\nexports.groupBy = groupBy_1.groupBy;\nvar ignoreElements_1 = require('./operators/ignoreElements');\nexports.ignoreElements = ignoreElements_1.ignoreElements;\nvar isEmpty_1 = require('./operators/isEmpty');\nexports.isEmpty = isEmpty_1.isEmpty;\nvar last_1 = require('./operators/last');\nexports.last = last_1.last;\nvar map_1 = require('./operators/map');\nexports.map = map_1.map;\nvar mapTo_1 = require('./operators/mapTo');\nexports.mapTo = mapTo_1.mapTo;\nvar materialize_1 = require('./operators/materialize');\nexports.materialize = materialize_1.materialize;\nvar max_1 = require('./operators/max');\nexports.max = max_1.max;\nvar merge_1 = require('./operators/merge');\nexports.merge = merge_1.merge;\nvar mergeAll_1 = require('./operators/mergeAll');\nexports.mergeAll = mergeAll_1.mergeAll;\nvar mergeMap_1 = require('./operators/mergeMap');\nexports.mergeMap = mergeMap_1.mergeMap;\nvar mergeMap_2 = require('./operators/mergeMap');\nexports.flatMap = mergeMap_2.mergeMap;\nvar mergeMapTo_1 = require('./operators/mergeMapTo');\nexports.mergeMapTo = mergeMapTo_1.mergeMapTo;\nvar mergeScan_1 = require('./operators/mergeScan');\nexports.mergeScan = mergeScan_1.mergeScan;\nvar min_1 = require('./operators/min');\nexports.min = min_1.min;\nvar multicast_1 = require('./operators/multicast');\nexports.multicast = multicast_1.multicast;\nvar observeOn_1 = require('./operators/observeOn');\nexports.observeOn = observeOn_1.observeOn;\nvar onErrorResumeNext_1 = require('./operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\nvar pairwise_1 = require('./operators/pairwise');\nexports.pairwise = pairwise_1.pairwise;\nvar partition_1 = require('./operators/partition');\nexports.partition = partition_1.partition;\nvar pluck_1 = require('./operators/pluck');\nexports.pluck = pluck_1.pluck;\nvar publish_1 = require('./operators/publish');\nexports.publish = publish_1.publish;\nvar publishBehavior_1 = require('./operators/publishBehavior');\nexports.publishBehavior = publishBehavior_1.publishBehavior;\nvar publishLast_1 = require('./operators/publishLast');\nexports.publishLast = publishLast_1.publishLast;\nvar publishReplay_1 = require('./operators/publishReplay');\nexports.publishReplay = publishReplay_1.publishReplay;\nvar race_1 = require('./operators/race');\nexports.race = race_1.race;\nvar reduce_1 = require('./operators/reduce');\nexports.reduce = reduce_1.reduce;\nvar repeat_1 = require('./operators/repeat');\nexports.repeat = repeat_1.repeat;\nvar repeatWhen_1 = require('./operators/repeatWhen');\nexports.repeatWhen = repeatWhen_1.repeatWhen;\nvar retry_1 = require('./operators/retry');\nexports.retry = retry_1.retry;\nvar retryWhen_1 = require('./operators/retryWhen');\nexports.retryWhen = retryWhen_1.retryWhen;\nvar refCount_1 = require('./operators/refCount');\nexports.refCount = refCount_1.refCount;\nvar sample_1 = require('./operators/sample');\nexports.sample = sample_1.sample;\nvar sampleTime_1 = require('./operators/sampleTime');\nexports.sampleTime = sampleTime_1.sampleTime;\nvar scan_1 = require('./operators/scan');\nexports.scan = scan_1.scan;\nvar sequenceEqual_1 = require('./operators/sequenceEqual');\nexports.sequenceEqual = sequenceEqual_1.sequenceEqual;\nvar share_1 = require('./operators/share');\nexports.share = share_1.share;\nvar shareReplay_1 = require('./operators/shareReplay');\nexports.shareReplay = shareReplay_1.shareReplay;\nvar single_1 = require('./operators/single');\nexports.single = single_1.single;\nvar skip_1 = require('./operators/skip');\nexports.skip = skip_1.skip;\nvar skipLast_1 = require('./operators/skipLast');\nexports.skipLast = skipLast_1.skipLast;\nvar skipUntil_1 = require('./operators/skipUntil');\nexports.skipUntil = skipUntil_1.skipUntil;\nvar skipWhile_1 = require('./operators/skipWhile');\nexports.skipWhile = skipWhile_1.skipWhile;\nvar startWith_1 = require('./operators/startWith');\nexports.startWith = startWith_1.startWith;\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nvar switchAll_1 = require('./operators/switchAll');\nexports.switchAll = switchAll_1.switchAll;\nvar switchMap_1 = require('./operators/switchMap');\nexports.switchMap = switchMap_1.switchMap;\nvar switchMapTo_1 = require('./operators/switchMapTo');\nexports.switchMapTo = switchMapTo_1.switchMapTo;\nvar take_1 = require('./operators/take');\nexports.take = take_1.take;\nvar takeLast_1 = require('./operators/takeLast');\nexports.takeLast = takeLast_1.takeLast;\nvar takeUntil_1 = require('./operators/takeUntil');\nexports.takeUntil = takeUntil_1.takeUntil;\nvar takeWhile_1 = require('./operators/takeWhile');\nexports.takeWhile = takeWhile_1.takeWhile;\nvar tap_1 = require('./operators/tap');\nexports.tap = tap_1.tap;\nvar throttle_1 = require('./operators/throttle');\nexports.throttle = throttle_1.throttle;\nvar throttleTime_1 = require('./operators/throttleTime');\nexports.throttleTime = throttleTime_1.throttleTime;\nvar timeInterval_1 = require('./operators/timeInterval');\nexports.timeInterval = timeInterval_1.timeInterval;\nvar timeout_1 = require('./operators/timeout');\nexports.timeout = timeout_1.timeout;\nvar timeoutWith_1 = require('./operators/timeoutWith');\nexports.timeoutWith = timeoutWith_1.timeoutWith;\nvar timestamp_1 = require('./operators/timestamp');\nexports.timestamp = timestamp_1.timestamp;\nvar toArray_1 = require('./operators/toArray');\nexports.toArray = toArray_1.toArray;\nvar window_1 = require('./operators/window');\nexports.window = window_1.window;\nvar windowCount_1 = require('./operators/windowCount');\nexports.windowCount = windowCount_1.windowCount;\nvar windowTime_1 = require('./operators/windowTime');\nexports.windowTime = windowTime_1.windowTime;\nvar windowToggle_1 = require('./operators/windowToggle');\nexports.windowToggle = windowToggle_1.windowToggle;\nvar windowWhen_1 = require('./operators/windowWhen');\nexports.windowWhen = windowWhen_1.windowWhen;\nvar withLatestFrom_1 = require('./operators/withLatestFrom');\nexports.withLatestFrom = withLatestFrom_1.withLatestFrom;\nvar zip_1 = require('./operators/zip');\nexports.zip = zip_1.zip;\nvar zipAll_1 = require('./operators/zipAll');\nexports.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=operators.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nexports.audit = audit;\nvar AuditOperator = (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = (function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar audit_1 = require('./audit');\nvar timer_1 = require('../observable/timer');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nexports.buffer = buffer;\nvar BufferOperator = (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = (function (_super) {\n    __extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        _super.call(this, destination);\n        this.buffer = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nexports.bufferCount = bufferCount;\nvar BufferCountOperator = (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = (function (_super) {\n    __extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = (function (_super) {\n    __extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nexports.bufferTime = bufferTime;\nvar BufferTimeOperator = (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = (function (_super) {\n    __extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        _super.call(this, destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        var context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = (function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nfunction catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nexports.catchError = catchError;\nvar CatchOperator = (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = (function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=catchError.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\nfunction combineAll(project) {\n    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar concat_1 = require('../observable/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar concatMap_1 = require('./concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nexports.count = count;\nvar CountOperator = (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = (function (_super) {\n    __extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nexports.debounce = debounce;\nvar DebounceOperator = (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = (function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = (function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nexports.defaultIfEmpty = defaultIfEmpty;\nvar DefaultIfEmptyOperator = (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = (function (_super) {\n    __extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        _super.call(this, destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteDelay = isDate_1.isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nexports.delay = delay;\nvar DelayOperator = (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = (function (_super) {\n    __extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        _super.call(this, destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification_1.Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification_1.Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber_1.Subscriber));\nvar DelayMessage = (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(/** @deprecated internal use only */ source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    /** @deprecated internal use only */ SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nexports.dematerialize = dematerialize;\nvar DeMaterializeOperator = (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = (function (_super) {\n    __extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set_1.Set();\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = (function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('./distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = (function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nexports.every = every;\nvar EveryOperator = (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = (function (_super) {\n    __extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = (function (_super) {\n    __extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\n}\nexports.exhaustMap = exhaustMap;\nvar SwitchFirstMapOperator = (function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = (function (_super) {\n    __extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nexports.expand = expand;\nvar ExpandOperator = (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexports.ExpandOperator = ExpandOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = (function (_super) {\n    __extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        _super.call(this, destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\n            if (result === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.ExpandSubscriber = ExpandSubscriber;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nexports.finalize = finalize;\nvar FinallyOperator = (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = (function (_super) {\n    __extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        _super.call(this, destination);\n        this.add(new Subscription_1.Subscription(callback));\n    }\n    return FinallySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=finalize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nexports.find = find;\nvar FindValueOperator = (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexports.FindValueOperator = FindValueOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = (function (_super) {\n    __extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber_1.Subscriber));\nexports.FindValueSubscriber = FindValueSubscriber;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar Observable_1 = require('../Observable');\nvar Subject_1 = require('../Subject');\nvar Map_1 = require('../util/Map');\nvar FastMap_1 = require('../util/FastMap');\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = (function (_super) {\n    __extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = (function (_super) {\n    __extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        _super.call(this, group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    /** @deprecated internal use only */ GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = (function (_super) {\n    __extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        _super.call(this);\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    /** @deprecated internal use only */ GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription_1.Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable_1.Observable));\nexports.GroupedObservable = GroupedObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = (function (_super) {\n    __extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        _super.call(this);\n        this.parent = parent;\n        parent.count++;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription_1.Subscription));\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar noop_1 = require('../util/noop');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nexports.ignoreElements = ignoreElements;\nvar IgnoreElementsOperator = (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = (function (_super) {\n    __extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        _super.apply(this, arguments);\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop_1.noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nexports.isEmpty = isEmpty;\nvar IsEmptyOperator = (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = (function (_super) {\n    __extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        _super.call(this, destination);\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.last = last;\nvar LastOperator = (function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = (function (_super) {\n    __extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.hasValue = false;\n        this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            this.lastValue = defaultValue;\n            this.hasValue = true;\n        }\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nexports.mapTo = mapTo;\nvar MapToOperator = (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = (function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nexports.materialize = materialize;\nvar MaterializeOperator = (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = (function (_super) {\n    __extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification_1.Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return reduce_1.reduce(max);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar merge_1 = require('../observable/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\nvar identity_1 = require('../util/identity');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = (function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return reduce_1.reduce(min);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = (function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nexports.pairwise = pairwise;\nvar PairwiseOperator = (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = (function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar not_1 = require('../util/not');\nvar filter_1 = require('./filter');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return function (source) { return [\n        filter_1.filter(predicate, thisArg)(source),\n        filter_1.filter(not_1.not(predicate, thisArg))(source)\n    ]; };\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar BehaviorSubject_1 = require('../BehaviorSubject');\nvar multicast_1 = require('./multicast');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar AsyncSubject_1 = require('../AsyncSubject');\nvar multicast_1 = require('./multicast');\nfunction publishLast() {\n    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nvar race_1 = require('../observable/race');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=refCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nexports.repeat = repeat;\nvar RepeatOperator = (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = (function (_super) {\n    __extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = (function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_1.Subject();\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject_1.errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nexports.retry = retry;\nvar RetryOperator = (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = (function (_super) {\n    __extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = (function (_super) {\n    __extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    /** @deprecated internal use only */ RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nexports.sample = sample;\nvar SampleOperator = (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = (function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = (function (_super) {\n    __extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        _super.call(this, destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar multicast_1 = require('./multicast');\nvar refCount_1 = require('./refCount');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nexports.shareReplay = shareReplay;\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nexports.single = single;\nvar SingleOperator = (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = (function (_super) {\n    __extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nexports.skip = skip;\nvar SkipOperator = (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = (function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nexports.skipLast = skipLast;\nvar SkipLastOperator = (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = (function (_super) {\n    __extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        _super.call(this, destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nexports.skipUntil = skipUntil;\nvar SkipUntilOperator = (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = (function (_super) {\n    __extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.isInnerStopped = false;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nexports.skipWhile = skipWhile;\nvar SkipWhileOperator = (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = (function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar SubscribeOnObservable_1 = require('../observable/SubscribeOnObservable');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nexports.subscribeOn = subscribeOn;\nvar SubscribeOnOperator = (function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar switchMap_1 = require('./switchMap');\nvar identity_1 = require('../util/identity');\nfunction switchAll() {\n    return switchMap_1.switchMap(identity_1.identity);\n}\nexports.switchAll = switchAll;\n//# sourceMappingURL=switchAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nexports.take = take;\nvar TakeOperator = (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = (function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = (function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = (function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=tap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nexports.defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = exports.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nexports.throttle = throttle;\nvar ThrottleOperator = (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = (function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasTrailingValue = false;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    /** @deprecated internal use only */ ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('./throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = (function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nexports.timeInterval = timeInterval;\nvar TimeInterval = (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexports.TimeInterval = TimeInterval;\n;\nvar TimeIntervalOperator = (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = (function (_super) {\n    __extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.lastTime = 0;\n        this.lastTime = scheduler.now();\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar TimeoutError_1 = require('../util/TimeoutError');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };\n}\nexports.timeout = timeout;\nvar TimeoutOperator = (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = (function (_super) {\n    __extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated internal use only */ TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) {\n        var absoluteTimeout = isDate_1.isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = (function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated internal use only */ TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar map_1 = require('./map');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nfunction toArray() {\n    return reduce_1.reduce(toArrayReducer, []);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nexports.window = window;\nvar WindowOperator = (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject_1.Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    /** @deprecated internal use only */ WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = (function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject_1.Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    /** @deprecated internal use only */ WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nexports.windowTime = windowTime;\nvar WindowTimeOperator = (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = (function (_super) {\n    __extends(CountedSubject, _super);\n    function CountedSubject() {\n        _super.apply(this, arguments);\n        this._numberOfNextedValues = 0;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject_1.Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = (function (_super) {\n    __extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        var window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = (function (_super) {\n    __extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject_1.errorObject) {\n                return this.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var window_1 = new Subject_1.Subject();\n                var subscription = new Subscription_1.Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject_1.Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            var err = errorObject_1.errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar Subscriber_1 = require('../Subscriber');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar iterator_1 = require('../symbol/iterator');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.zip = zip;\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nfunction zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexports.zipStatic = zipStatic;\nvar ZipOperator = (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexports.ZipOperator = ZipOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = (function (_super) {\n    __extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        _super.call(this, destination);\n        this.iterators = [];\n        this.active = 0;\n        this.project = (typeof project === 'function') ? project : null;\n        this.values = values;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray_1.isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[iterator_1.iterator] === 'function') {\n            iterators.push(new StaticIterator(value[iterator_1.iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ZipSubscriber = ZipSubscriber;\nvar StaticIterator = (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = (function (_super) {\n    __extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        _super.call(this, destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    ZipBufferIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar zip_1 = require('./zip');\nfunction zipAll(project) {\n    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = (function (_super) {\n    __extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n//# sourceMappingURL=AnimationFrameAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AnimationFrameScheduler = (function (_super) {\n    __extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        _super.apply(this, arguments);\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n//# sourceMappingURL=AnimationFrameScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = (function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n//# sourceMappingURL=AsapAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AsapScheduler = (function (_super) {\n    __extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        _super.apply(this, arguments);\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AsapScheduler = AsapScheduler;\n//# sourceMappingURL=AsapScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.pending = false;\n        this.work = work;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = (function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n//# sourceMappingURL=QueueAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar QueueScheduler = (function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n//# sourceMappingURL=QueueScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar VirtualTimeScheduler = (function (_super) {\n    __extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        var _this = this;\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        _super.call(this, SchedulerAction, function () { return _this.frame; });\n        this.maxFrames = maxFrames;\n        this.frame = 0;\n        this.index = -1;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = (function (_super) {\n    __extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.index = index;\n        this.active = true;\n        this.index = scheduler.index = index;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction_1.AsyncAction));\nexports.VirtualAction = VirtualAction;\n//# sourceMappingURL=VirtualTimeScheduler.js.map","\"use strict\";\nvar AnimationFrameAction_1 = require('./AnimationFrameAction');\nvar AnimationFrameScheduler_1 = require('./AnimationFrameScheduler');\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n//# sourceMappingURL=animationFrame.js.map","\"use strict\";\nvar AsapAction_1 = require('./AsapAction');\nvar AsapScheduler_1 = require('./AsapScheduler');\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n//# sourceMappingURL=asap.js.map","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map","\"use strict\";\nvar QueueAction_1 = require('./QueueAction');\nvar QueueScheduler_1 = require('./QueueScheduler');\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n//# sourceMappingURL=queue.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ColdObservable = (function (_super) {\n    __extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription_1.Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable_1.Observable));\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar HotObservable = (function (_super) {\n    __extends(HotObservable, _super);\n    function HotObservable(messages, scheduler) {\n        _super.call(this);\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    /** @deprecated internal use only */ HotObservable.prototype._subscribe = function (subscriber) {\n        var subject = this;\n        var index = subject.logSubscribedFrame();\n        subscriber.add(new Subscription_1.Subscription(function () {\n            subject.logUnsubscribedFrame(index);\n        }));\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    HotObservable.prototype.setup = function () {\n        var subject = this;\n        var messagesLength = subject.messages.length;\n        /* tslint:disable:no-var-keyword */\n        for (var i = 0; i < messagesLength; i++) {\n            (function () {\n                var message = subject.messages[i];\n                /* tslint:enable */\n                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    };\n    return HotObservable;\n}(Subject_1.Subject));\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=HotObservable.js.map","\"use strict\";\nvar SubscriptionLog = (function () {\n    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n        this.subscribedFrame = subscribedFrame;\n        this.unsubscribedFrame = unsubscribedFrame;\n    }\n    return SubscriptionLog;\n}());\nexports.SubscriptionLog = SubscriptionLog;\n//# sourceMappingURL=SubscriptionLog.js.map","\"use strict\";\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar SubscriptionLoggable = (function () {\n    function SubscriptionLoggable() {\n        this.subscriptions = [];\n    }\n    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n        return this.subscriptions.length - 1;\n    };\n    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n        var subscriptionLogs = this.subscriptions;\n        var oldSubscriptionLog = subscriptionLogs[index];\n        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n    };\n    return SubscriptionLoggable;\n}());\nexports.SubscriptionLoggable = SubscriptionLoggable;\n//# sourceMappingURL=SubscriptionLoggable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Notification_1 = require('../Notification');\nvar ColdObservable_1 = require('./ColdObservable');\nvar HotObservable_1 = require('./HotObservable');\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n//# sourceMappingURL=TestScheduler.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar RequestAnimationFrameDefinition = (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n//# sourceMappingURL=AnimationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = (function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n//# sourceMappingURL=EmptyError.js.map","\"use strict\";\nvar FastMap = (function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\nexports.FastMap = FastMap;\n//# sourceMappingURL=FastMap.js.map","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\nvar root_1 = require('./root');\nvar ImmediateDefinition = (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n//# sourceMappingURL=Immediate.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar MapPolyfill_1 = require('./MapPolyfill');\nexports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n//# sourceMappingURL=Map.js.map","\"use strict\";\nvar MapPolyfill = (function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\nexports.MapPolyfill = MapPolyfill;\n//# sourceMappingURL=MapPolyfill.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction minimalSetImpl() {\n    // THIS IS NOT a full impl of Set, this is just the minimum\n    // bits of functionality we need for this library.\n    return (function () {\n        function MinimalSet() {\n            this._values = [];\n        }\n        MinimalSet.prototype.add = function (value) {\n            if (!this.has(value)) {\n                this._values.push(value);\n            }\n        };\n        MinimalSet.prototype.has = function (value) {\n            return this._values.indexOf(value) !== -1;\n        };\n        Object.defineProperty(MinimalSet.prototype, \"size\", {\n            get: function () {\n                return this._values.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MinimalSet.prototype.clear = function () {\n            this._values.length = 0;\n        };\n        return MinimalSet;\n    }());\n}\nexports.minimalSetImpl = minimalSetImpl;\nexports.Set = root_1.root.Set || minimalSetImpl();\n//# sourceMappingURL=Set.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = (function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError() {\n        var err = _super.call(this, 'Timeout has occurred');\n        this.name = err.name = 'TimeoutError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return TimeoutError;\n}(Error));\nexports.TimeoutError = TimeoutError;\n//# sourceMappingURL=TimeoutError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map","\"use strict\";\nfunction applyMixins(derivedCtor, baseCtors) {\n    for (var i = 0, len = baseCtors.length; i < len; i++) {\n        var baseCtor = baseCtors[i];\n        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            var name_1 = propertyKeys[j];\n            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n        }\n    }\n}\nexports.applyMixins = applyMixins;\n//# sourceMappingURL=applyMixins.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction assignImpl(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    var len = sources.length;\n    for (var i = 0; i < len; i++) {\n        var source = sources[i];\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                target[k] = source[k];\n            }\n        }\n    }\n    return target;\n}\nexports.assignImpl = assignImpl;\n;\nfunction getAssign(root) {\n    return root.Object.assign || assignImpl;\n}\nexports.getAssign = getAssign;\nexports.assign = getAssign(root_1.root);\n//# sourceMappingURL=assign.js.map","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","\"use strict\";\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n//# sourceMappingURL=identity.js.map","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","\"use strict\";\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n//# sourceMappingURL=isDate.js.map","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n//# sourceMappingURL=isNumeric.js.map","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map","\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n//# sourceMappingURL=isScheduler.js.map","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nfunction not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\nexports.not = not;\n//# sourceMappingURL=not.js.map","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map"],"names":["indentString","cleanStack","AggregateError","Error","constructor","errors","Array","isArray","TypeError","message","map","error","Object","assign","stack","replace","String","join","super","this","name","defineProperty","value","Symbol","iterator","_errors","module","exports","os","extractPathRegex","pathRegex","homeDir","homedir","options","pretty","split","filter","line","pathMatches","match","includes","test","trim","m","p1","string","count","indent","includeEmptyLines","regex","repeat","async","iterable","mapper","concurrency","Infinity","stopOnError","Promise","resolve","reject","Number","isSafeInteger","result","isRejected","isIterableDone","resolvingCount","currentIndex","next","nextItem","index","done","length","element","push","i","__extends","d","b","p","hasOwnProperty","__","prototype","create","Subject_1","Subscription_1","AsyncSubject","_super","apply","arguments","hasNext","hasCompleted","_subscribe","subscriber","hasError","thrownError","Subscription","EMPTY","complete","call","Subject","ObjectUnsubscribedError_1","BehaviorSubject","_value","get","getValue","enumerable","configurable","subscription","closed","ObjectUnsubscribedError","InnerSubscriber","parent","outerValue","outerIndex","_next","notifyNext","_error","notifyError","unsubscribe","_complete","notifyComplete","Subscriber","Observable_1","Notification","kind","hasValue","observe","observer","do","accept","nextOrObserver","toObservable","Observable","of","throw","empty","createNext","undefinedValueNotification","createError","err","undefined","createComplete","completeNotification","root_1","toSubscriber_1","observable_1","pipe_1","subscribe","_isScalar","lift","operator","observable","source","observerOrNext","sink","toSubscriber","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","forEach","PromiseCtor","_this","root","Rx","config","pipe","operations","_i","pipeFromArray","toPromise","x","OuterSubscriber","innerValue","innerIndex","innerSub","destination","queue_1","observeOn_1","SubjectSubscription_1","ReplaySubject","bufferSize","windowTime","scheduler","POSITIVE_INFINITY","_events","_bufferSize","_windowTime","now","_getNow","ReplayEvent","_trimBufferThenGetEvents","isStopped","observers","SubjectSubscription","ObserveOnSubscriber","len","queue","eventsCount","spliceCount","time","Math","max","splice","AnonymousSubject","ConnectableObservable","EmptyError","ArgumentOutOfRangeError","TimeoutError","UnsubscriptionError","TimeInterval","Timestamp","TestScheduler","VirtualTimeScheduler","AjaxObservable_1","AjaxResponse","AjaxError","AjaxTimeoutError","asap_1","async_1","animationFrame_1","rxSubscriber_1","iterator_1","asap","animationFrame","rxSubscriber","Scheduler","SchedulerAction","schedule","work","delay","state","Date","Subscriber_1","SubjectSubscriber","subject","copy","slice","asObservable","subscriberIndex","indexOf","isFunction_1","Observer_1","destinationOrNext","isTrustedSubscriber","trustedSubscriber","SafeSubscriber","_unsubscribeAndRecycle","_parent","_parents","_parentSubscriber","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","_unsubscribe","obj","isArray_1","isObject_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","hasErrors","_a","remove","tryCatch","errorObject","e","flattenUnsubscriptionErrors","sub","isObject","concat","teardown","_addParent","tmp","subscriptions","subscriptionIndex","reduce","errs","bindCallback_1","bindCallback","bindNodeCallback_1","bindNodeCallback","combineLatest_1","combineLatest","concat_1","defer_1","defer","ajax_1","ajax","webSocket_1","webSocket","empty_1","forkJoin_1","forkJoin","from_1","from","fromEvent_1","fromEvent","fromEventPattern_1","fromEventPattern","fromPromise_1","fromPromise","generate_1","generate","if_1","if","_if","interval_1","interval","merge_1","merge","never_1","never","of_1","onErrorResumeNext_1","onErrorResumeNext","pairs_1","pairs","race_1","race","range_1","range","throw_1","_throw","timer_1","timer","using_1","using","zip_1","zip","audit_1","audit","auditTime_1","auditTime","buffer_1","buffer","bufferCount_1","bufferCount","bufferTime_1","bufferTime","bufferToggle_1","bufferToggle","bufferWhen_1","bufferWhen","catch_1","catch","_catch","combineAll_1","combineAll","concatAll_1","concatAll","concatMap_1","concatMap","concatMapTo_1","concatMapTo","count_1","debounce_1","debounce","debounceTime_1","debounceTime","defaultIfEmpty_1","defaultIfEmpty","delay_1","delayWhen_1","delayWhen","dematerialize_1","dematerialize","distinct_1","distinct","distinctUntilChanged_1","distinctUntilChanged","distinctUntilKeyChanged_1","distinctUntilKeyChanged","do_1","_do","elementAt_1","elementAt","every_1","every","exhaust_1","exhaust","exhaustMap_1","exhaustMap","expand_1","expand","filter_1","finally_1","finally","_finally","find_1","find","findIndex_1","findIndex","first_1","first","groupBy_1","groupBy","ignoreElements_1","ignoreElements","isEmpty_1","isEmpty","last_1","last","let_1","let","letProto","letBind","map_1","mapTo_1","mapTo","materialize_1","materialize","max_1","mergeAll_1","mergeAll","mergeMap_1","mergeMap","flatMap","mergeMapTo_1","flatMapTo","mergeMapTo","mergeScan_1","mergeScan","min_1","min","multicast_1","multicast","observeOn","pairwise_1","pairwise","partition_1","partition","pluck_1","pluck","publish_1","publish","publishBehavior_1","publishBehavior","publishLast_1","publishLast","publishReplay_1","publishReplay","reduce_1","repeat_1","repeatWhen_1","repeatWhen","retry_1","retry","retryWhen_1","retryWhen","sample_1","sample","sampleTime_1","sampleTime","scan_1","scan","sequenceEqual_1","sequenceEqual","share_1","share","shareReplay_1","shareReplay","single_1","single","skip_1","skip","skipLast_1","skipLast","skipUntil_1","skipUntil","skipWhile_1","skipWhile","startWith_1","startWith","subscribeOn_1","subscribeOn","switch_1","switch","_switch","switchMap_1","switchMap","switchMapTo_1","switchMapTo","take_1","take","takeLast_1","takeLast","takeUntil_1","takeUntil","takeWhile_1","takeWhile","throttle_1","throttle","throttleTime_1","throttleTime","timeInterval_1","timeInterval","timeout_1","timeout","timeoutWith_1","timeoutWith","timestamp_1","timestamp","toArray_1","toArray","window_1","window","windowCount_1","windowCount","windowTime_1","windowToggle_1","windowToggle","windowWhen_1","windowWhen","withLatestFrom_1","withLatestFrom","zipProto","zipAll_1","zipAll","ScalarObservable_1","EmptyObservable_1","ArrayLikeObservable","arrayLike","EmptyObservable","ScalarObservable","dispatch","isScheduler_1","ArrayObservable","array","isScheduler","pop","AsyncSubject_1","BoundCallbackObservable","callbackFunc","selector","args","func","handler","handlerFn","innerArgs","result_1","self","result_2","dispatchError","dispatchNext","arg","BoundNodeCallbackObservable","shift","refCount_1","subjectFactory","_refCount","_isComplete","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","refCount","connectableProto","connectableObservableDescriptor","writable","connectable","RefCountSubscriber","RefCountOperator","refCounter","sharedConnection","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","factory","tryDefer","_callFactory","subscribeToResult","ErrorObservable","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","total","values","innerSubscription","_hasValue","toString","FromEventObservable","sourceObj","eventName","target","setupSubscription","isNodeList","isHTMLCollection","addEventListener","removeEventListener","isEventTarget","source_1","on","off","isJQueryStyleEventEmitter","source_2","addListener","removeListener","isNodeStyleEventEmitter","source_3","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","isArrayLike_1","isPromise_1","PromiseObservable_1","IteratorObservable_1","ArrayObservable_1","ArrayLikeObservable_1","FromObservable","ish","isPromise","PromiseObservable","IteratorObservable","isArrayLike","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","isNumeric_1","IntervalObservable","period","isNumeric","StringIterator","ArrayIterator","getIterator","return","str","idx","charAt","arr","o","isNaN","isFinite","valueAsNumber","sign","floor","abs","maxSafeInteger","toLength","pow","noop_1","NeverObservable","noop","keys","key","PairsObservable","promise","then","setTimeout","RangeObservable","start","_count","SubscribeOnObservable","delayTime","isDate_1","TimerObservable","dueTime","isDate","initialDelay","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","BoundCallbackObservable_1","BoundNodeCallbackObservable_1","observables","project","CombineLatestOperator","DeferObservable_1","getCORSRequest","XMLHttpRequest","XDomainRequest","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","mapResponse","response","ajaxGetJSON","responseType","urlOrRequest","request","createXHR","crossDomain","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","prop","AjaxSubscriber","post","delete","put","patch","getJSON","FormData","serializeBody","send","xhr","_b","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURIComponent","JSON","stringify","setRequestHeader","progressSubscriber","xhrTimeout","ontimeout","upload","xhrProgress_1","xhrError_1","onprogress","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","originalEvent","parseXhrResponse","parse","responseXML","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","data","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","protocol","binaryType","close","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","onmessage","WebSocketSubject_1","ForkJoinObservable_1","FromObservable_1","FromEventObservable_1","FromEventPatternObservable_1","GenerateObservable_1","IfObservable_1","IntervalObservable_1","concurrent","NeverObservable_1","onErrorResumeNextStatic","PairsObservable_1","RaceOperator","RaceSubscriber","hasFirst","RangeObservable_1","ErrorObservable_1","TimerObservable_1","UsingObservable_1","zipStatic","durationSelector","duration","closingNotifier","startBufferEvery","bufferTimeSpan","bufferCreationInterval","maxBufferSize","openings","closingSelector","catchError_1","catchError","concat_2","concatStatic","innerObservable","predicate","defaultValue","delayDurationSelector","subscriptionDelay","keySelector","flushes","compare","tap_1","tap","thisArg","finalize_1","callback","finalize","GroupedObservable","elementSelector","subjectSelector","comparer","merge_2","mergeStatic","accumulator","seed","subjectOrSubjectFactory","nextSources","properties","selectorOrScheduler","race_2","raceStatic","notifier","compareTo","comparor","switchAll_1","switchAll","defaultThrottleConfig","due","withObservable","windowBoundaries","windowSize","startWindowEvery","windowTimeSpan","windowCreationInterval","maxWindowSize","mergeMap_2","AuditOperator","AuditSubscriber","throttled","clearThrottle","BufferOperator","BufferSubscriber","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","BufferTimeOperator","BufferTimeSubscriber","Context","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","CatchOperator","caught","CatchSubscriber","err2","none","CombineLatestSubscriber","active","toRespond","unused","oldVal","_tryProject","CountOperator","CountSubscriber","_tryPredicate","DebounceOperator","DebounceSubscriber","durationSubscription","_tryNext","emitValue","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debouncedNext","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","Notification_1","delayFor","DelayOperator","DelaySubscriber","errored","notification","_schedule","scheduleNotification","DelayMessage","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","DeMaterializeOperator","DeMaterializeSubscriber","Set_1","DistinctOperator","DistinctSubscriber","Set","clear","_useKeySelector","_finalizeNext","has","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","ArgumentOutOfRangeError_1","ElementAtOperator","ElementAtSubscriber","EveryOperator","EverySubscriber","everyValueMatch","SwitchFirstOperator","SwitchFirstSubscriber","hasSubscription","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","ExpandOperator","ExpandSubscriber","subscribeToProjection","FilterOperator","FilterSubscriber","FinallyOperator","FinallySubscriber","FindValueOperator","yieldIndex","FindValueSubscriber","EmptyError_1","FirstOperator","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","Map_1","FastMap_1","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap","Map","group","set","groupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsOperator","IgnoreElementsSubscriber","IsEmptyOperator","IsEmptySubscriber","LastOperator","LastSubscriber","MapOperator","MapSubscriber","MapToOperator","MapToSubscriber","MaterializeOperator","MaterializeSubscriber","identity_1","identity","MergeMapOperator","MergeMapSubscriber","_innerSub","_notifyResultSelector","MergeMapToOperator","MergeMapToSubscriber","MergeScanOperator","MergeScanSubscriber","acc","ConnectableObservable_1","MulticastOperator","ObserveOnOperator","scheduleMessage","ObserveOnMessage","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","not_1","not","plucker","props","currentProp","BehaviorSubject_1","RepeatOperator","RepeatSubscriber","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","subscribeToRetries","retriesSubscription","notifications","RetryOperator","RetrySubscriber","RetryWhenOperator","RetryWhenSubscriber","SampleOperator","sampleSubscriber","SampleSubscriber","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","hasSeed","ScanOperator","ScanSubscriber","_seed","SequenceEqualOperator","SequenceEqualSubscriber","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","areEqual","nextB","shareSubjectFactory","isComplete","shareReplayOperator","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipOperator","SkipSubscriber","SkipLastOperator","_skipCount","SkipLastSubscriber","_ring","skipCount","ring","oldValue","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","SubscribeOnObservable_1","SubscribeOnOperator","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","TakeOperator","TakeSubscriber","TakeLastOperator","TakeLastSubscriber","TakeUntilOperator","TakeUntilSubscriber","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","DoOperator","DoSubscriber","safeSubscriber","leading","trailing","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","_trailingValue","tryDurationSelector","_sendTrailing","ThrottleTimeOperator","ThrottleTimeSubscriber","TimeIntervalOperator","TimeIntervalSubscriber","lastTime","span","TimeoutError_1","absoluteTimeout","waitFor","TimeoutOperator","errorInstance","TimeoutSubscriber","action","scheduleTimeout","dispatchTimeout","TimeoutWithOperator","TimeoutWithSubscriber","toArrayReducer","item","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","WindowCountOperator","WindowCountSubscriber","windows","c","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","WindowToggleOperator","WindowToggleSubscriber","openSubscription","unsubscribeClosingNotification","closingNotification","WithLatestFromOperator","WithLatestFromSubscriber","found","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","Action","AsyncAction_1","AnimationFrame_1","AnimationFrameAction","requestAsyncId","id","actions","scheduled","AnimationFrame","requestAnimationFrame","flush","recycleAsyncId","cancelAnimationFrame","AsyncAction","AnimationFrameScheduler","execute","AsyncScheduler","Immediate_1","AsapAction","Immediate","setImmediate","clearImmediate","AsapScheduler","pending","setInterval","clearInterval","_execute","errorValue","QueueAction","QueueScheduler","maxFrames","VirtualAction","frame","frameTimeFactor","sort","sortActions","AnimationFrameAction_1","AnimationFrameScheduler_1","AsapAction_1","AsapScheduler_1","AsyncScheduler_1","QueueAction_1","QueueScheduler_1","symbolIteratorPonyfill","getOwnPropertyNames","$$iterator","getSymbolObservable","$$observable","for","$$rxSubscriber","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","applyMixins","SubscriptionLoggable","HotObservable","setup","SubscriptionLog","subscribedFrame","unsubscribedFrame","SubscriptionLog_1","subscriptionLogs","oldSubscriptionLog","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","assertDeepEqual","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","RequestAnimationFrameDefinition","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","cb","ImmediateDefinition","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","MapPolyfill_1","MapPolyfill","size","_values","_keys","minimalSetImpl","MinimalSet","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","assignImpl","k","getAssign","val","parseFloat","pred","notPred","fns","input","__window","__self","WorkerGlobalScope","__global","g","_root","InnerSubscriber_1","outerSubscriber","obs","msg","tryCatchTarget","tryCatcher"],"sourceRoot":""}