{"version":3,"sources":["file:///home/circleci/bemuse/node_modules/webpack/buildin/amd-options.js","file:///home/circleci/bemuse/node_modules/webpack/buildin/amd-define.js","file:///home/circleci/bemuse/node_modules/baconjs/dist/Bacon.js"],"names":["__webpack_amd_options__","module","exports","Error","__WEBPACK_AMD_DEFINE_RESULT__","_slice","Array","prototype","slice","Bacon","toString","version","Exception","global","this","nop","former","x","_","assert","message","condition","assertObservableIsProperty","_isObservable","_isProperty","assertFunction","f","isFunction","isArray","xs","isObservable","extend","target","length","arguments","i","prop","inherit","child","parent","hasProp","hasOwnProperty","ctor","key","call","indexOf","indexWhere","head","always","negate","empty","tail","filter","filtered","push","map","result","each","Object","toArray","contains","id","last","all","undefined","any","without","y","remove","splice","fold","seed","flatMap","ys","concat","cached","value","None","_isNone","bind","fn","me","apply","obj","recursionDepth","results","error","rootEvent","waiterObs","waiters","afters","aftersIndex","flushed","afterTransaction","flushWaiters","flushDepsOf","UpdateBarrier","index","deps","obs","obsId","obsWaiters","dep","internalDeps","whenDoneWith","hasWaiters","inTransaction","event","context","args","flush","after","currentEventId","wrappedSubscribe","sink","unsubd","shouldUnsub","doUnsub","unsub","dispatcher","subscribe","noMore","Source","sync","lazy","queue","ConsumingSource","BufferingSource","Desc","method","_isSource","markEnded","ended","consume","mayHave","hasAtLeast","flatten","shift","c","values","isTrigger","s","_isEventStream","fromObservable","_isDesc","findDeps","describe","ref","_len","_key","withDesc","desc","withMethodCallSupport","wrapped","_len2","_key2","methodName","makeFunctionArgs","makeFunction_","partiallyApplied","applied","_len3","_key3","toFieldExtractor","parts","split","partFuncs","fieldValue","toSimpleExtractor","isFieldKey","charAt","_len4","_key4","makeFunction","convertArgsToFunction","sampled","sampledBy","p","_ref","_ref2","toCombinator","toFieldKey","left","right","Some","_isSome","getOrElse","get","forEach","isDefined","inspect","toOption","v","more","eventIdCounter","Event","Next","valueF","eager","_isNext","valueInternal","Initial","End","_isEvent","isEvent","isEnd","isInitial","isNext","isError","hasValue","log","fmap","_isInitial","toNext","initialEvent","nextEvent","endEvent","toEvent","idCounter","registerObs","Observable","initialDesc","CompositeUnsubscribe","ss","unsubscribe","unsubscribed","subscriptions","starting","add","Dispatcher","_subscribe","_handleEvent","handleEvent","pushing","prevError","unsubSrc","EventStream","handler","subscribeInternal","onValue","onValues","onError","onEnd","name","_name","withDescription","assign","subscription","_this2","iterable","count","hasSubscribers","removeSub","pushIt","pushToSubscriptions","tmp","len","sub","unsubscribeFromSource","_this","toProperty","initValue_","initValue","disp","Property","initSent","subbed","reply","sendInit","toEventStream","withHandler","never","when","sources","pats","patterns","patSources","pat","constantToFunction","ixs","triggerFound","j","ix","k","needsBarrier","containsDuplicateDeps","resultStream","triggers","ends","match","i1","cannotSync","source","cannotMatch","nonFlattened","trigger","part","unsubAll","flushLater","flushWhileTriggers","pop","events","i2","e","_p","observables","state","checkObservable","PropertyDispatcher","property","current","currentValueRootId","propertyEnded","groupSimultaneous","_len5","streams","_key5","_len6","_key6","maybeSubSource","_this3","dispatchingId","valId","changes","_this4","_this5","constant","fromBinder","binder","eventTransformer","unbound","shouldUnbind","unbind","unbinder","_len7","_key7","_len8","_key8","argumentsToObservables","argumentsToObservablesAndFunction","combineAsArray","stream","_len9","_key9","combineWith","_argumentsToObservablesAndFunction","combine","other","combinator","withStateMachine","initState","fromF","newState","outputs","output","equals","a","b","skipDuplicates","isEqual","prev","object","awaiting","not","and","or","scheduler","setTimeout","d","setInterval","clearInterval","clearTimeout","now","Date","getTime","bufferWithTime","delay","bufferWithTimeOrCount","Number","MAX_VALUE","bufferWithCount","flushOrSchedule","buffer","schedule","onInput","onFlush","scheduled","end","valuesToPush","_this6","delayMs","_this7","_len10","_key10","once","unsubRight","unsubLeft","flatMap_","makeSpawner","flatMapFirst","makeObservable","root","firstOnly","limit","rootDep","childDeps","composite","spawn","unsubMe","checkQueue","checkEnd","__","unsubRoot","Bus","subscribeAll","guardedSink","flatMapWithConcurrencyLimit","_len11","_key11","flatMapConcat","later","bufferingThrottle","minimumInterval","newSink","subscribeInput","input","_this8","unsubscribeInput","plug","_this9","assertObservable","liftCallback","callback","_len12","_key12","fromCallback","_len13","_key13","fromNodeCallback","_len14","_key14","combineTemplate","template","setValue","ctxStack","mkContext","compile","funcs","applyStreamValue","constructor","constantValue","newContext","pushContext","compileTemplate","rootContext","addPropertyInitValueToStream","justInitValue","mapEnd","skipErrors","takeUntil","stopper","endMarker","_event$value","data","flatMapLatest","delayChanges","debounce","debounceImmediate","decode","cases","scan","resultProperty","_this10","acc","initHandled","next","diff","start","prevTuple","tuple","doAction","doEnd","doError","doLog","_len15","_key15","console","endOnError","_len16","_key16","errors","take","first","mapError","flatMapError","err","sampler","thisSource","samplerSource","sample","interval","_len17","_key17","reduce","eventMethods","valueAndEnd","fromEventTarget","eventName","_findHandlerMethods","pair","methodPair","addListener","findHandlerMethods","fromEvent","fromPoll","poll","fromPromise","promise","abort","bound","then","done","groupBy","keyF","limitF","src","similar","limited","fromArray","assertArray","pushNeeded","holdWhen","valve","onHold","bufferedValues","srcIsEnded","subscribed","endIfBothEnded","toSend","$","asEventStream","selector","_this11","on","off","jQuery","Zepto","lastEvent","_len18","_key18","merge","assertEventStream","mergeAll","sinks","unsubBoth","repeatedly","repeat","generator","flag","subscribeNext","retry","options","retries","retriesDone","isRetryable","finished","valueStream","pause","sequentially","skip","skipUntil","starter","started","skipWhile","ok","_len19","_key19","slidingWindow","n","minValues","window","spies","running","spy","startWith","takeWhile","_len20","_key20","throttle","firstToPromise","PromiseCtr","_this12","Promise","resolve","reject","toPromise","update","initial","lateBindFirst","_len22","_key22","_len21","_key21","Function","zipAsArray","_len23","_key23","zipWith","_len24","_key24","_len25","_key25","observablesAndFunction","zip","__webpack_require__"],"mappings":"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","file":"vendors~app~game~playground~sync~test-ae2feff244735c50317c.js","sourcesContent":["/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n","(function() {\nvar _slice = Array.prototype.slice;\nvar Bacon = {\n  toString: function () {\n    return \"Bacon\";\n  }\n};\n\nBacon.version = '0.7.88';\n\nvar Exception = (typeof global !== \"undefined\" && global !== null ? global : this).Error;\nvar nop = function () {};\nvar latter = function (_, x) {\n  return x;\n};\nvar former = function (x, _) {\n  return x;\n};\nvar cloneArray = function (xs) {\n  return xs.slice(0);\n};\nvar assert = function (message, condition) {\n  if (!condition) {\n    throw new Exception(message);\n  }\n};\nvar assertObservableIsProperty = function (x) {\n  if ((x != null ? x._isObservable : void 0) && !(x != null ? x._isProperty : void 0)) {\n    throw new Exception(\"Observable is not a Property : \" + x);\n  }\n};\nvar assertEventStream = function (event) {\n  if (!(event != null ? event._isEventStream : void 0)) {\n    throw new Exception(\"not an EventStream : \" + event);\n  }\n};\n\nvar assertObservable = function (event) {\n  if (!(event != null ? event._isObservable : void 0)) {\n    throw new Exception(\"not an Observable : \" + event);\n  }\n};\nvar assertFunction = function (f) {\n  return assert(\"not a function : \" + f, _.isFunction(f));\n};\nvar isArray = Array.isArray || function (xs) {\n  return xs instanceof Array;\n};\nvar isObservable = function (x) {\n  return x && x._isObservable;\n};\nvar assertArray = function (xs) {\n  if (!isArray(xs)) {\n    throw new Exception(\"not an array : \" + xs);\n  }\n};\nvar assertNoArguments = function (args) {\n  return assert(\"no arguments supported\", args.length === 0);\n};\nvar assertString = function (x) {\n  if (typeof x === \"string\") {\n    throw new Exception(\"not a string : \" + x);\n  }\n};\n\nvar extend = function (target) {\n  var length = arguments.length;\n  for (var i = 1; 1 < length ? i < length : i > length; 1 < length ? i++ : i--) {\n    for (var prop in arguments[i]) {\n      target[prop] = arguments[i][prop];\n    }\n  }\n  return target;\n};\n\nvar inherit = function (child, parent) {\n  var hasProp = ({}).hasOwnProperty;\n  var ctor = function () {};\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  for (var key in parent) {\n    if (hasProp.call(parent, key)) {\n      child[key] = parent[key];\n    }\n  }\n  return child;\n};\n\nvar _ = {\n  indexOf: (function () {\n    if (Array.prototype.indexOf) {\n      return function (xs, x) {\n        return xs.indexOf(x);\n      };\n    } else {\n      return function (xs, x) {\n        for (var i = 0, y; i < xs.length; i++) {\n          y = xs[i];\n          if (x === y) {\n            return i;\n          }\n        }\n        return -1;\n      };\n    }\n  })(),\n  indexWhere: function (xs, f) {\n    for (var i = 0, y; i < xs.length; i++) {\n      y = xs[i];\n      if (f(y)) {\n        return i;\n      }\n    }\n    return -1;\n  },\n  head: function (xs) {\n    return xs[0];\n  },\n  always: function (x) {\n    return function () {\n      return x;\n    };\n  },\n  negate: function (f) {\n    return function (x) {\n      return !f(x);\n    };\n  },\n  empty: function (xs) {\n    return xs.length === 0;\n  },\n  tail: function (xs) {\n    return xs.slice(1, xs.length);\n  },\n  filter: function (f, xs) {\n    var filtered = [];\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (f(x)) {\n        filtered.push(x);\n      }\n    }\n    return filtered;\n  },\n  map: function (f, xs) {\n    return (function () {\n      var result = [];\n      for (var i = 0, x; i < xs.length; i++) {\n        x = xs[i];\n        result.push(f(x));\n      }\n      return result;\n    })();\n  },\n  each: function (xs, f) {\n    for (var key in xs) {\n      if (Object.prototype.hasOwnProperty.call(xs, key)) {\n        var value = xs[key];\n        f(key, value);\n      }\n    }\n  },\n  toArray: function (xs) {\n    return isArray(xs) ? xs : [xs];\n  },\n  contains: function (xs, x) {\n    return _.indexOf(xs, x) !== -1;\n  },\n  id: function (x) {\n    return x;\n  },\n  last: function (xs) {\n    return xs[xs.length - 1];\n  },\n  all: function (xs) {\n    var f = arguments.length <= 1 || arguments[1] === undefined ? _.id : arguments[1];\n\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (!f(x)) {\n        return false;\n      }\n    }\n    return true;\n  },\n  any: function (xs) {\n    var f = arguments.length <= 1 || arguments[1] === undefined ? _.id : arguments[1];\n\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (f(x)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  without: function (x, xs) {\n    return _.filter(function (y) {\n      return y !== x;\n    }, xs);\n  },\n  remove: function (x, xs) {\n    var i = _.indexOf(xs, x);\n    if (i >= 0) {\n      return xs.splice(i, 1);\n    }\n  },\n  fold: function (xs, seed, f) {\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      seed = f(seed, x);\n    }\n    return seed;\n  },\n  flatMap: function (f, xs) {\n    return _.fold(xs, [], function (ys, x) {\n      return ys.concat(f(x));\n    });\n  },\n  cached: function (f) {\n    var value = None;\n    return function () {\n      if (typeof value !== \"undefined\" && value !== null ? value._isNone : undefined) {\n        value = f();\n        f = undefined;\n      }\n      return value;\n    };\n  },\n  bind: function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n  isFunction: function (f) {\n    return typeof f === \"function\";\n  },\n  toString: function (obj) {\n    var internals, key, value;\n    var hasProp = ({}).hasOwnProperty;\n    try {\n      recursionDepth++;\n      if (obj == null) {\n        return \"undefined\";\n      } else if (_.isFunction(obj)) {\n        return \"function\";\n      } else if (isArray(obj)) {\n        if (recursionDepth > 5) {\n          return \"[..]\";\n        }\n        return \"[\" + _.map(_.toString, obj).toString() + \"]\";\n      } else if ((obj != null ? obj.toString : void 0) != null && obj.toString !== Object.prototype.toString) {\n        return obj.toString();\n      } else if (typeof obj === \"object\") {\n        if (recursionDepth > 5) {\n          return \"{..}\";\n        }\n        internals = (function () {\n          var results = [];\n          for (key in obj) {\n            if (!hasProp.call(obj, key)) continue;\n            value = (function () {\n              var error;\n              try {\n                return obj[key];\n              } catch (error) {\n                return error;\n              }\n            })();\n            results.push(_.toString(key) + \":\" + _.toString(value));\n          }\n          return results;\n        })();\n        return \"{\" + internals + \"}\";\n      } else {\n        return obj;\n      }\n    } finally {\n      recursionDepth--;\n    }\n  }\n};\n\nvar recursionDepth = 0;\n\nBacon._ = _;\n\nvar UpdateBarrier = Bacon.UpdateBarrier = (function () {\n  var rootEvent;\n  var waiterObs = [];\n  var waiters = {};\n  var afters = [];\n  var aftersIndex = 0;\n  var flushed = {};\n\n  var afterTransaction = function (f) {\n    if (rootEvent) {\n      return afters.push(f);\n    } else {\n      return f();\n    }\n  };\n\n  var whenDoneWith = function (obs, f) {\n    if (rootEvent) {\n      var obsWaiters = waiters[obs.id];\n      if (!(typeof obsWaiters !== \"undefined\" && obsWaiters !== null)) {\n        obsWaiters = waiters[obs.id] = [f];\n        return waiterObs.push(obs);\n      } else {\n        return obsWaiters.push(f);\n      }\n    } else {\n      return f();\n    }\n  };\n\n  var flush = function () {\n    while (waiterObs.length > 0) {\n      flushWaiters(0, true);\n    }\n    flushed = {};\n  };\n\n  var flushWaiters = function (index, deps) {\n    var obs = waiterObs[index];\n    var obsId = obs.id;\n    var obsWaiters = waiters[obsId];\n    waiterObs.splice(index, 1);\n    delete waiters[obsId];\n    if (deps && waiterObs.length > 0) {\n      flushDepsOf(obs);\n    }\n    for (var i = 0, f; i < obsWaiters.length; i++) {\n      f = obsWaiters[i];\n      f();\n    }\n  };\n\n  var flushDepsOf = function (obs) {\n    if (flushed[obs.id]) return;\n    var deps = obs.internalDeps();\n    for (var i = 0, dep; i < deps.length; i++) {\n      dep = deps[i];\n      flushDepsOf(dep);\n      if (waiters[dep.id]) {\n        var index = _.indexOf(waiterObs, dep);\n        flushWaiters(index, false);\n      }\n    }\n    flushed[obs.id] = true;\n  };\n\n  var inTransaction = function (event, context, f, args) {\n    if (rootEvent) {\n      return f.apply(context, args);\n    } else {\n      rootEvent = event;\n      try {\n        var result = f.apply(context, args);\n\n        flush();\n      } finally {\n        rootEvent = undefined;\n        while (aftersIndex < afters.length) {\n          var after = afters[aftersIndex];\n          aftersIndex++;\n          after();\n        }\n        aftersIndex = 0;\n        afters = [];\n      }\n      return result;\n    }\n  };\n\n  var currentEventId = function () {\n    return rootEvent ? rootEvent.id : undefined;\n  };\n\n  var wrappedSubscribe = function (obs, sink) {\n    var unsubd = false;\n    var shouldUnsub = false;\n    var doUnsub = function () {\n      shouldUnsub = true;\n      return shouldUnsub;\n    };\n    var unsub = function () {\n      unsubd = true;\n      return doUnsub();\n    };\n    doUnsub = obs.dispatcher.subscribe(function (event) {\n      return afterTransaction(function () {\n        if (!unsubd) {\n          var reply = sink(event);\n          if (reply === Bacon.noMore) {\n            return unsub();\n          }\n        }\n      });\n    });\n    if (shouldUnsub) {\n      doUnsub();\n    }\n    return unsub;\n  };\n\n  var hasWaiters = function () {\n    return waiterObs.length > 0;\n  };\n\n  return { whenDoneWith: whenDoneWith, hasWaiters: hasWaiters, inTransaction: inTransaction, currentEventId: currentEventId, wrappedSubscribe: wrappedSubscribe, afterTransaction: afterTransaction };\n})();\n\nfunction Source(obs, sync) {\n  var lazy = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n  this.obs = obs;\n  this.sync = sync;\n  this.lazy = lazy;\n  this.queue = [];\n}\n\nextend(Source.prototype, {\n  _isSource: true,\n\n  subscribe: function (sink) {\n    return this.obs.dispatcher.subscribe(sink);\n  },\n  toString: function () {\n    return this.obs.toString();\n  },\n  markEnded: function () {\n    this.ended = true;\n    return true;\n  },\n  consume: function () {\n    if (this.lazy) {\n      return { value: _.always(this.queue[0]) };\n    } else {\n      return this.queue[0];\n    }\n  },\n  push: function (x) {\n    this.queue = [x];\n    return [x];\n  },\n  mayHave: function () {\n    return true;\n  },\n  hasAtLeast: function () {\n    return this.queue.length;\n  },\n  flatten: true\n});\n\nfunction ConsumingSource() {\n  Source.apply(this, arguments);\n}\n\ninherit(ConsumingSource, Source);\nextend(ConsumingSource.prototype, {\n  consume: function () {\n    return this.queue.shift();\n  },\n  push: function (x) {\n    return this.queue.push(x);\n  },\n  mayHave: function (c) {\n    return !this.ended || this.queue.length >= c;\n  },\n  hasAtLeast: function (c) {\n    return this.queue.length >= c;\n  },\n  flatten: false\n});\n\nfunction BufferingSource(obs) {\n  Source.call(this, obs, true);\n}\n\ninherit(BufferingSource, Source);\nextend(BufferingSource.prototype, {\n  consume: function () {\n    var values = this.queue;\n    this.queue = [];\n    return {\n      value: function () {\n        return values;\n      }\n    };\n  },\n  push: function (x) {\n    return this.queue.push(x.value());\n  },\n  hasAtLeast: function () {\n    return true;\n  }\n});\n\nSource.isTrigger = function (s) {\n  if (s != null ? s._isSource : void 0) {\n    return s.sync;\n  } else {\n    return s != null ? s._isEventStream : void 0;\n  }\n};\n\nSource.fromObservable = function (s) {\n  if (s != null ? s._isSource : void 0) {\n    return s;\n  } else if (s != null ? s._isProperty : void 0) {\n    return new Source(s, false);\n  } else {\n    return new ConsumingSource(s, true);\n  }\n};\n\nfunction Desc(context, method, args) {\n  this.context = context;\n  this.method = method;\n  this.args = args;\n}\n\nextend(Desc.prototype, {\n  _isDesc: true,\n  deps: function () {\n    if (!this.cached) {\n      this.cached = findDeps([this.context].concat(this.args));\n    }\n    return this.cached;\n  },\n  toString: function () {\n    return _.toString(this.context) + \".\" + _.toString(this.method) + \"(\" + _.map(_.toString, this.args) + \")\";\n  }\n});\n\nvar describe = function (context, method) {\n  var ref = context || method;\n  if (ref && ref._isDesc) {\n    return context || method;\n  } else {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return new Desc(context, method, args);\n  }\n};\n\nvar withDesc = function (desc, obs) {\n  obs.desc = desc;\n  return obs;\n};\n\nvar findDeps = function (x) {\n  if (isArray(x)) {\n    return _.flatMap(findDeps, x);\n  } else if (isObservable(x)) {\n    return [x];\n  } else if (typeof x !== \"undefined\" && x !== null ? x._isSource : undefined) {\n    return [x.obs];\n  } else {\n    return [];\n  }\n};\n\nBacon.Desc = Desc;\nBacon.Desc.empty = new Bacon.Desc(\"\", \"\", []);\n\nvar withMethodCallSupport = function (wrapped) {\n  return function (f) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (typeof f === \"object\" && args.length) {\n      var context = f;\n      var methodName = args[0];\n      f = function () {\n        return context[methodName].apply(context, arguments);\n      };\n      args = args.slice(1);\n    }\n    return wrapped.apply(undefined, [f].concat(args));\n  };\n};\n\nvar makeFunctionArgs = function (args) {\n  args = Array.prototype.slice.call(args);\n  return makeFunction_.apply(undefined, args);\n};\n\nvar partiallyApplied = function (f, applied) {\n  return function () {\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return f.apply(undefined, applied.concat(args));\n  };\n};\n\nvar toSimpleExtractor = function (args) {\n  return function (key) {\n    return function (value) {\n      if (!(typeof value !== \"undefined\" && value !== null)) {\n        return;\n      } else {\n        var fieldValue = value[key];\n        if (_.isFunction(fieldValue)) {\n          return fieldValue.apply(value, args);\n        } else {\n          return fieldValue;\n        }\n      }\n    };\n  };\n};\n\nvar toFieldExtractor = function (f, args) {\n  var parts = f.slice(1).split(\".\");\n  var partFuncs = _.map(toSimpleExtractor(args), parts);\n  return function (value) {\n    for (var i = 0, f; i < partFuncs.length; i++) {\n      f = partFuncs[i];\n      value = f(value);\n    }\n    return value;\n  };\n};\n\nvar isFieldKey = function (f) {\n  return typeof f === \"string\" && f.length > 1 && f.charAt(0) === \".\";\n};\n\nvar makeFunction_ = withMethodCallSupport(function (f) {\n  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n\n  if (_.isFunction(f)) {\n    if (args.length) {\n      return partiallyApplied(f, args);\n    } else {\n      return f;\n    }\n  } else if (isFieldKey(f)) {\n    return toFieldExtractor(f, args);\n  } else {\n    return _.always(f);\n  }\n});\n\nvar makeFunction = function (f, args) {\n  return makeFunction_.apply(undefined, [f].concat(args));\n};\n\nvar convertArgsToFunction = function (obs, f, args, method) {\n  if (typeof f !== \"undefined\" && f !== null ? f._isProperty : undefined) {\n    var sampled = f.sampledBy(obs, function (p, s) {\n      return [p, s];\n    });\n    return method.call(sampled, function (_ref) {\n      var p = _ref[0];\n      var s = _ref[1];\n      return p;\n    }).map(function (_ref2) {\n      var p = _ref2[0];\n      var s = _ref2[1];\n      return s;\n    });\n  } else {\n    f = makeFunction(f, args);\n    return method.call(obs, f);\n  }\n};\n\nvar toCombinator = function (f) {\n  if (_.isFunction(f)) {\n    return f;\n  } else if (isFieldKey(f)) {\n    var key = toFieldKey(f);\n    return function (left, right) {\n      return left[key](right);\n    };\n  } else {\n    throw new Exception(\"not a function or a field key: \" + f);\n  }\n};\n\nvar toFieldKey = function (f) {\n  return f.slice(1);\n};\n\nfunction Some(value) {\n  this.value = value;\n}\n\nextend(Some.prototype, {\n  _isSome: true,\n  getOrElse: function () {\n    return this.value;\n  },\n  get: function () {\n    return this.value;\n  },\n  filter: function (f) {\n    if (f(this.value)) {\n      return new Some(this.value);\n    } else {\n      return None;\n    }\n  },\n  map: function (f) {\n    return new Some(f(this.value));\n  },\n  forEach: function (f) {\n    return f(this.value);\n  },\n  isDefined: true,\n  toArray: function () {\n    return [this.value];\n  },\n  inspect: function () {\n    return \"Some(\" + this.value + \")\";\n  },\n  toString: function () {\n    return this.inspect();\n  }\n});\n\nvar None = {\n  _isNone: true,\n  getOrElse: function (value) {\n    return value;\n  },\n  filter: function () {\n    return None;\n  },\n  map: function () {\n    return None;\n  },\n  forEach: function () {},\n  isDefined: false,\n  toArray: function () {\n    return [];\n  },\n  inspect: function () {\n    return \"None\";\n  },\n  toString: function () {\n    return this.inspect();\n  }\n};\n\nvar toOption = function (v) {\n  if ((typeof v !== \"undefined\" && v !== null ? v._isSome : undefined) || (typeof v !== \"undefined\" && v !== null ? v._isNone : undefined)) {\n    return v;\n  } else {\n    return new Some(v);\n  }\n};\n\nBacon.noMore = \"<no-more>\";\nBacon.more = \"<more>\";\n\nvar eventIdCounter = 0;\n\nfunction Event() {\n  this.id = ++eventIdCounter;\n}\n\nEvent.prototype._isEvent = true;\nEvent.prototype.isEvent = function () {\n  return true;\n};\nEvent.prototype.isEnd = function () {\n  return false;\n};\nEvent.prototype.isInitial = function () {\n  return false;\n};\nEvent.prototype.isNext = function () {\n  return false;\n};\nEvent.prototype.isError = function () {\n  return false;\n};\nEvent.prototype.hasValue = function () {\n  return false;\n};\nEvent.prototype.filter = function () {\n  return true;\n};\nEvent.prototype.inspect = function () {\n  return this.toString();\n};\nEvent.prototype.log = function () {\n  return this.toString();\n};\n\nfunction Next(valueF, eager) {\n  if (!(this instanceof Next)) {\n    return new Next(valueF, eager);\n  }\n\n  Event.call(this);\n\n  if (!eager && _.isFunction(valueF) || (valueF != null ? valueF._isNext : void 0)) {\n    this.valueF = valueF;\n    this.valueInternal = void 0;\n  } else {\n    this.valueF = void 0;\n    this.valueInternal = valueF;\n  }\n}\n\ninherit(Next, Event);\n\nNext.prototype.isNext = function () {\n  return true;\n};\nNext.prototype.hasValue = function () {\n  return true;\n};\nNext.prototype.value = function () {\n  var ref;\n  if ((ref = this.valueF) != null ? ref._isNext : void 0) {\n    this.valueInternal = this.valueF.value();\n    this.valueF = void 0;\n  } else if (this.valueF) {\n    this.valueInternal = this.valueF();\n    this.valueF = void 0;\n  }\n  return this.valueInternal;\n};\n\nNext.prototype.fmap = function (f) {\n  var event, value;\n  if (this.valueInternal) {\n    value = this.valueInternal;\n    return this.apply(function () {\n      return f(value);\n    });\n  } else {\n    event = this;\n    return this.apply(function () {\n      return f(event.value());\n    });\n  }\n};\n\nNext.prototype.apply = function (value) {\n  return new Next(value);\n};\nNext.prototype.filter = function (f) {\n  return f(this.value());\n};\nNext.prototype.toString = function () {\n  return _.toString(this.value());\n};\nNext.prototype.log = function () {\n  return this.value();\n};\nNext.prototype._isNext = true;\n\nfunction Initial(valueF, eager) {\n  if (!(this instanceof Initial)) {\n    return new Initial(valueF, eager);\n  }\n  Next.call(this, valueF, eager);\n}\n\ninherit(Initial, Next);\nInitial.prototype._isInitial = true;\nInitial.prototype.isInitial = function () {\n  return true;\n};\nInitial.prototype.isNext = function () {\n  return false;\n};\nInitial.prototype.apply = function (value) {\n  return new Initial(value);\n};\nInitial.prototype.toNext = function () {\n  return new Next(this);\n};\n\nfunction End() {\n  if (!(this instanceof End)) {\n    return new End();\n  }\n  Event.call(this);\n}\n\ninherit(End, Event);\nEnd.prototype.isEnd = function () {\n  return true;\n};\nEnd.prototype.fmap = function () {\n  return this;\n};\nEnd.prototype.apply = function () {\n  return this;\n};\nEnd.prototype.toString = function () {\n  return \"<end>\";\n};\n\nfunction Error(error) {\n  if (!(this instanceof Error)) {\n    return new Error(error);\n  }\n  this.error = error;\n  Event.call(this);\n}\n\ninherit(Error, Event);\nError.prototype.isError = function () {\n  return true;\n};\nError.prototype.fmap = function () {\n  return this;\n};\nError.prototype.apply = function () {\n  return this;\n};\nError.prototype.toString = function () {\n  return \"<error> \" + _.toString(this.error);\n};\n\nBacon.Event = Event;\nBacon.Initial = Initial;\nBacon.Next = Next;\nBacon.End = End;\nBacon.Error = Error;\n\nvar initialEvent = function (value) {\n  return new Initial(value, true);\n};\nvar nextEvent = function (value) {\n  return new Next(value, true);\n};\nvar endEvent = function () {\n  return new End();\n};\nvar toEvent = function (x) {\n  if (x && x._isEvent) {\n    return x;\n  } else {\n    return nextEvent(x);\n  }\n};\n\nvar idCounter = 0;\nvar registerObs = function () {};\n\nfunction Observable(desc) {\n  this.desc = desc;\n  this.id = ++idCounter;\n  this.initialDesc = this.desc;\n}\n\nextend(Observable.prototype, {\n  _isObservable: true,\n\n  subscribe: function (sink) {\n    return UpdateBarrier.wrappedSubscribe(this, sink);\n  },\n\n  subscribeInternal: function (sink) {\n    return this.dispatcher.subscribe(sink);\n  },\n\n  onValue: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.hasValue()) {\n        return f(event.value());\n      }\n    });\n  },\n\n  onValues: function (f) {\n    return this.onValue(function (args) {\n      return f.apply(undefined, args);\n    });\n  },\n\n  onError: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.isError()) {\n        return f(event.error);\n      }\n    });\n  },\n\n  onEnd: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.isEnd()) {\n        return f();\n      }\n    });\n  },\n\n  name: function (name) {\n    this._name = name;\n    return this;\n  },\n\n  withDescription: function () {\n    this.desc = describe.apply(undefined, arguments);\n    return this;\n  },\n\n  toString: function () {\n    if (this._name) {\n      return this._name;\n    } else {\n      return this.desc.toString();\n    }\n  },\n\n  deps: function () {\n    return this.desc.deps();\n  },\n\n  internalDeps: function () {\n    return this.initialDesc.deps();\n  }\n});\n\nObservable.prototype.assign = Observable.prototype.onValue;\nObservable.prototype.forEach = Observable.prototype.onValue;\nObservable.prototype.inspect = Observable.prototype.toString;\n\nBacon.Observable = Observable;\n\nfunction CompositeUnsubscribe() {\n  var ss = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n  this.unsubscribe = _.bind(this.unsubscribe, this);\n  this.unsubscribed = false;\n  this.subscriptions = [];\n  this.starting = [];\n  for (var i = 0, s; i < ss.length; i++) {\n    s = ss[i];\n    this.add(s);\n  }\n}\n\nextend(CompositeUnsubscribe.prototype, {\n  add: function (subscription) {\n    var _this2 = this;\n\n    if (this.unsubscribed) {\n      return;\n    }\n    var ended = false;\n    var unsub = nop;\n    this.starting.push(subscription);\n    var unsubMe = function () {\n      if (_this2.unsubscribed) {\n        return;\n      }\n      ended = true;\n      _this2.remove(unsub);\n      return _.remove(subscription, _this2.starting);\n    };\n    unsub = subscription(this.unsubscribe, unsubMe);\n    if (!(this.unsubscribed || ended)) {\n      this.subscriptions.push(unsub);\n    } else {\n      unsub();\n    }\n    _.remove(subscription, this.starting);\n    return unsub;\n  },\n\n  remove: function (unsub) {\n    if (this.unsubscribed) {\n      return;\n    }\n    if (_.remove(unsub, this.subscriptions) !== undefined) {\n      return unsub();\n    }\n  },\n\n  unsubscribe: function () {\n    if (this.unsubscribed) {\n      return;\n    }\n    this.unsubscribed = true;\n    var iterable = this.subscriptions;\n    for (var i = 0; i < iterable.length; i++) {\n      iterable[i]();\n    }\n    this.subscriptions = [];\n    this.starting = [];\n    return [];\n  },\n\n  count: function () {\n    if (this.unsubscribed) {\n      return 0;\n    }\n    return this.subscriptions.length + this.starting.length;\n  },\n\n  empty: function () {\n    return this.count() === 0;\n  }\n});\n\nBacon.CompositeUnsubscribe = CompositeUnsubscribe;\n\nfunction Dispatcher(_subscribe, _handleEvent) {\n  this._subscribe = _subscribe;\n  this._handleEvent = _handleEvent;\n  this.subscribe = _.bind(this.subscribe, this);\n  this.handleEvent = _.bind(this.handleEvent, this);\n  this.pushing = false;\n  this.ended = false;\n  this.prevError = undefined;\n  this.unsubSrc = undefined;\n  this.subscriptions = [];\n  this.queue = [];\n}\n\nDispatcher.prototype.hasSubscribers = function () {\n  return this.subscriptions.length > 0;\n};\n\nDispatcher.prototype.removeSub = function (subscription) {\n  this.subscriptions = _.without(subscription, this.subscriptions);\n  return this.subscriptions;\n};\n\nDispatcher.prototype.push = function (event) {\n  if (event.isEnd()) {\n    this.ended = true;\n  }\n  return UpdateBarrier.inTransaction(event, this, this.pushIt, [event]);\n};\n\nDispatcher.prototype.pushToSubscriptions = function (event) {\n  try {\n    var tmp = this.subscriptions;\n    var len = tmp.length;\n    for (var i = 0; i < len; i++) {\n      var sub = tmp[i];\n      var reply = sub.sink(event);\n      if (reply === Bacon.noMore || event.isEnd()) {\n        this.removeSub(sub);\n      }\n    }\n    return true;\n  } catch (error) {\n    this.pushing = false;\n    this.queue = [];\n    throw error;\n  }\n};\n\nDispatcher.prototype.pushIt = function (event) {\n  if (!this.pushing) {\n    if (event === this.prevError) {\n      return;\n    }\n    if (event.isError()) {\n      this.prevError = event;\n    }\n    this.pushing = true;\n    this.pushToSubscriptions(event);\n    this.pushing = false;\n    while (this.queue.length) {\n      event = this.queue.shift();\n      this.push(event);\n    }\n    if (this.hasSubscribers()) {\n      return Bacon.more;\n    } else {\n      this.unsubscribeFromSource();\n      return Bacon.noMore;\n    }\n  } else {\n    this.queue.push(event);\n    return Bacon.more;\n  }\n};\n\nDispatcher.prototype.handleEvent = function (event) {\n  if (this._handleEvent) {\n    return this._handleEvent(event);\n  } else {\n    return this.push(event);\n  }\n};\n\nDispatcher.prototype.unsubscribeFromSource = function () {\n  if (this.unsubSrc) {\n    this.unsubSrc();\n  }\n  this.unsubSrc = undefined;\n};\n\nDispatcher.prototype.subscribe = function (sink) {\n  var subscription;\n  if (this.ended) {\n    sink(endEvent());\n    return nop;\n  } else {\n    assertFunction(sink);\n    subscription = {\n      sink: sink\n    };\n    this.subscriptions.push(subscription);\n    if (this.subscriptions.length === 1) {\n      this.unsubSrc = this._subscribe(this.handleEvent);\n      assertFunction(this.unsubSrc);\n    }\n    return (function (_this) {\n      return function () {\n        _this.removeSub(subscription);\n        if (!_this.hasSubscribers()) {\n          return _this.unsubscribeFromSource();\n        }\n      };\n    })(this);\n  }\n};\n\nBacon.Dispatcher = Dispatcher;\n\nfunction EventStream(desc, subscribe, handler) {\n  if (!(this instanceof EventStream)) {\n    return new EventStream(desc, subscribe, handler);\n  }\n  if (_.isFunction(desc)) {\n    handler = subscribe;\n    subscribe = desc;\n    desc = Desc.empty;\n  }\n  Observable.call(this, desc);\n  assertFunction(subscribe);\n  this.dispatcher = new Dispatcher(subscribe, handler);\n  registerObs(this);\n}\n\ninherit(EventStream, Observable);\nextend(EventStream.prototype, {\n  _isEventStream: true,\n\n  toProperty: function (initValue_) {\n    var initValue = arguments.length === 0 ? None : toOption(function () {\n      return initValue_;\n    });\n    var disp = this.dispatcher;\n    var desc = new Bacon.Desc(this, \"toProperty\", [initValue_]);\n    return new Property(desc, function (sink) {\n      var initSent = false;\n      var subbed = false;\n      var unsub = nop;\n      var reply = Bacon.more;\n      var sendInit = function () {\n        if (!initSent) {\n          return initValue.forEach(function (value) {\n            initSent = true;\n            reply = sink(new Initial(value));\n            if (reply === Bacon.noMore) {\n              unsub();\n              unsub = nop;\n              return nop;\n            }\n          });\n        }\n      };\n\n      unsub = disp.subscribe(function (event) {\n        if (event.hasValue()) {\n          if (event.isInitial() && !subbed) {\n            initValue = new Some(function () {\n              return event.value();\n            });\n            return Bacon.more;\n          } else {\n            if (!event.isInitial()) {\n              sendInit();\n            }\n            initSent = true;\n            initValue = new Some(event);\n            return sink(event);\n          }\n        } else {\n          if (event.isEnd()) {\n            reply = sendInit();\n          }\n          if (reply !== Bacon.noMore) {\n            return sink(event);\n          }\n        }\n      });\n      subbed = true;\n      sendInit();\n      return unsub;\n    });\n  },\n\n  toEventStream: function () {\n    return this;\n  },\n\n  withHandler: function (handler) {\n    return new EventStream(new Bacon.Desc(this, \"withHandler\", [handler]), this.dispatcher.subscribe, handler);\n  }\n});\n\nBacon.EventStream = EventStream;\n\nBacon.never = function () {\n  return new EventStream(describe(Bacon, \"never\"), function (sink) {\n    sink(endEvent());\n    return nop;\n  });\n};\n\nBacon.when = function () {\n  if (arguments.length === 0) {\n    return Bacon.never();\n  }\n  var len = arguments.length;\n  var usage = \"when: expecting arguments in the form (Observable+,function)+\";\n\n  assert(usage, len % 2 === 0);\n  var sources = [];\n  var pats = [];\n  var i = 0;\n  var patterns = [];\n  while (i < len) {\n    patterns[i] = arguments[i];\n    patterns[i + 1] = arguments[i + 1];\n    var patSources = _.toArray(arguments[i]);\n    var f = constantToFunction(arguments[i + 1]);\n    var pat = { f: f, ixs: [] };\n    var triggerFound = false;\n    for (var j = 0, s; j < patSources.length; j++) {\n      s = patSources[j];\n      var index = _.indexOf(sources, s);\n      if (!triggerFound) {\n        triggerFound = Source.isTrigger(s);\n      }\n      if (index < 0) {\n        sources.push(s);\n        index = sources.length - 1;\n      }\n      for (var k = 0, ix; k < pat.ixs.length; k++) {\n        ix = pat.ixs[k];\n        if (ix.index === index) {\n          ix.count++;\n        }\n      }\n      pat.ixs.push({ index: index, count: 1 });\n    }\n\n    assert(\"At least one EventStream required\", triggerFound || !patSources.length);\n\n    if (patSources.length > 0) {\n      pats.push(pat);\n    }\n    i = i + 2;\n  }\n\n  if (!sources.length) {\n    return Bacon.never();\n  }\n\n  sources = _.map(Source.fromObservable, sources);\n  var needsBarrier = _.any(sources, function (s) {\n    return s.flatten;\n  }) && containsDuplicateDeps(_.map(function (s) {\n    return s.obs;\n  }, sources));\n\n  var desc = new Bacon.Desc(Bacon, \"when\", patterns);\n  var resultStream = new EventStream(desc, function (sink) {\n    var triggers = [];\n    var ends = false;\n    var match = function (p) {\n      for (var i1 = 0, i; i1 < p.ixs.length; i1++) {\n        i = p.ixs[i1];\n        if (!sources[i.index].hasAtLeast(i.count)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    var cannotSync = function (source) {\n      return !source.sync || source.ended;\n    };\n    var cannotMatch = function (p) {\n      for (var i1 = 0, i; i1 < p.ixs.length; i1++) {\n        i = p.ixs[i1];\n        if (!sources[i.index].mayHave(i.count)) {\n          return true;\n        }\n      }\n    };\n    var nonFlattened = function (trigger) {\n      return !trigger.source.flatten;\n    };\n    var part = function (source) {\n      return function (unsubAll) {\n        var flushLater = function () {\n          return UpdateBarrier.whenDoneWith(resultStream, flush);\n        };\n        var flushWhileTriggers = function () {\n          if (triggers.length > 0) {\n            var reply = Bacon.more;\n            var trigger = triggers.pop();\n            for (var i1 = 0, p; i1 < pats.length; i1++) {\n              p = pats[i1];\n              if (match(p)) {\n                var events = (function () {\n                  var result = [];\n                  for (var i2 = 0, i; i2 < p.ixs.length; i2++) {\n                    i = p.ixs[i2];\n                    result.push(sources[i.index].consume());\n                  }\n                  return result;\n                })();\n                reply = sink(trigger.e.apply(function () {\n                  var _p;\n\n                  var values = (function () {\n                    var result = [];\n                    for (var i2 = 0, event; i2 < events.length; i2++) {\n                      event = events[i2];\n                      result.push(event.value());\n                    }\n                    return result;\n                  })();\n\n                  return (_p = p).f.apply(_p, values);\n                }));\n                if (triggers.length) {\n                  triggers = _.filter(nonFlattened, triggers);\n                }\n                if (reply === Bacon.noMore) {\n                  return reply;\n                } else {\n                  return flushWhileTriggers();\n                }\n              }\n            }\n          } else {\n            return Bacon.more;\n          }\n        };\n        var flush = function () {\n          var reply = flushWhileTriggers();\n          if (ends) {\n            if (_.all(sources, cannotSync) || _.all(pats, cannotMatch)) {\n              reply = Bacon.noMore;\n              sink(endEvent());\n            }\n          }\n          if (reply === Bacon.noMore) {\n            unsubAll();\n          }\n\n          return reply;\n        };\n        return source.subscribe(function (e) {\n          if (e.isEnd()) {\n            ends = true;\n            source.markEnded();\n            flushLater();\n          } else if (e.isError()) {\n            var reply = sink(e);\n          } else {\n            source.push(e);\n            if (source.sync) {\n              triggers.push({ source: source, e: e });\n              if (needsBarrier || UpdateBarrier.hasWaiters()) {\n                flushLater();\n              } else {\n                flush();\n              }\n            }\n          }\n          if (reply === Bacon.noMore) {\n            unsubAll();\n          }\n          return reply || Bacon.more;\n        });\n      };\n    };\n\n    return new Bacon.CompositeUnsubscribe((function () {\n      var result = [];\n      for (var i1 = 0, s; i1 < sources.length; i1++) {\n        s = sources[i1];\n        result.push(part(s));\n      }\n      return result;\n    })()).unsubscribe;\n  });\n  return resultStream;\n};\n\nvar containsDuplicateDeps = function (observables) {\n  var state = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n  var checkObservable = function (obs) {\n    if (_.contains(state, obs)) {\n      return true;\n    } else {\n      var deps = obs.internalDeps();\n      if (deps.length) {\n        state.push(obs);\n        return _.any(deps, checkObservable);\n      } else {\n        state.push(obs);\n        return false;\n      }\n    }\n  };\n\n  return _.any(observables, checkObservable);\n};\n\nvar constantToFunction = function (f) {\n  if (_.isFunction(f)) {\n    return f;\n  } else {\n    return _.always(f);\n  }\n};\n\nBacon.groupSimultaneous = function () {\n  for (var _len5 = arguments.length, streams = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    streams[_key5] = arguments[_key5];\n  }\n\n  if (streams.length === 1 && isArray(streams[0])) {\n    streams = streams[0];\n  }\n  var sources = (function () {\n    var result = [];\n    for (var i = 0, s; i < streams.length; i++) {\n      s = streams[i];\n      result.push(new BufferingSource(s));\n    }\n    return result;\n  })();\n  return withDesc(new Bacon.Desc(Bacon, \"groupSimultaneous\", streams), Bacon.when(sources, function () {\n    for (var _len6 = arguments.length, xs = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      xs[_key6] = arguments[_key6];\n    }\n\n    return xs;\n  }));\n};\n\nfunction PropertyDispatcher(property, subscribe, handleEvent) {\n  Dispatcher.call(this, subscribe, handleEvent);\n  this.property = property;\n  this.subscribe = _.bind(this.subscribe, this);\n  this.current = None;\n  this.currentValueRootId = undefined;\n  this.propertyEnded = false;\n}\n\ninherit(PropertyDispatcher, Dispatcher);\nextend(PropertyDispatcher.prototype, {\n  push: function (event) {\n    if (event.isEnd()) {\n      this.propertyEnded = true;\n    }\n    if (event.hasValue()) {\n      this.current = new Some(event);\n      this.currentValueRootId = UpdateBarrier.currentEventId();\n    }\n    return Dispatcher.prototype.push.call(this, event);\n  },\n\n  maybeSubSource: function (sink, reply) {\n    if (reply === Bacon.noMore) {\n      return nop;\n    } else if (this.propertyEnded) {\n      sink(endEvent());\n      return nop;\n    } else {\n      return Dispatcher.prototype.subscribe.call(this, sink);\n    }\n  },\n\n  subscribe: function (sink) {\n    var _this3 = this;\n\n    var initSent = false;\n\n    var reply = Bacon.more;\n\n    if (this.current.isDefined && (this.hasSubscribers() || this.propertyEnded)) {\n      var dispatchingId = UpdateBarrier.currentEventId();\n      var valId = this.currentValueRootId;\n      if (!this.propertyEnded && valId && dispatchingId && dispatchingId !== valId) {\n        UpdateBarrier.whenDoneWith(this.property, function () {\n          if (_this3.currentValueRootId === valId) {\n            return sink(initialEvent(_this3.current.get().value()));\n          }\n        });\n\n        return this.maybeSubSource(sink, reply);\n      } else {\n        UpdateBarrier.inTransaction(undefined, this, function () {\n          reply = sink(initialEvent(this.current.get().value()));\n          return reply;\n        }, []);\n        return this.maybeSubSource(sink, reply);\n      }\n    } else {\n      return this.maybeSubSource(sink, reply);\n    }\n  }\n});\n\nfunction Property(desc, subscribe, handler) {\n  Observable.call(this, desc);\n  assertFunction(subscribe);\n  this.dispatcher = new PropertyDispatcher(this, subscribe, handler);\n  registerObs(this);\n}\n\ninherit(Property, Observable);\nextend(Property.prototype, {\n  _isProperty: true,\n\n  changes: function () {\n    var _this4 = this;\n\n    return new EventStream(new Bacon.Desc(this, \"changes\", []), function (sink) {\n      return _this4.dispatcher.subscribe(function (event) {\n        if (!event.isInitial()) {\n          return sink(event);\n        }\n      });\n    });\n  },\n\n  withHandler: function (handler) {\n    return new Property(new Bacon.Desc(this, \"withHandler\", [handler]), this.dispatcher.subscribe, handler);\n  },\n\n  toProperty: function () {\n    assertNoArguments(arguments);\n    return this;\n  },\n\n  toEventStream: function () {\n    var _this5 = this;\n\n    return new EventStream(new Bacon.Desc(this, \"toEventStream\", []), function (sink) {\n      return _this5.dispatcher.subscribe(function (event) {\n        if (event.isInitial()) {\n          event = event.toNext();\n        }\n        return sink(event);\n      });\n    });\n  }\n});\n\nBacon.Property = Property;\n\nBacon.constant = function (value) {\n  return new Property(new Bacon.Desc(Bacon, \"constant\", [value]), function (sink) {\n    sink(initialEvent(value));\n    sink(endEvent());\n    return nop;\n  });\n};\n\nBacon.fromBinder = function (binder) {\n  var eventTransformer = arguments.length <= 1 || arguments[1] === undefined ? _.id : arguments[1];\n\n  var desc = new Bacon.Desc(Bacon, \"fromBinder\", [binder, eventTransformer]);\n  return new EventStream(desc, function (sink) {\n    var unbound = false;\n    var shouldUnbind = false;\n    var unbind = function () {\n      if (!unbound) {\n        if (typeof unbinder !== \"undefined\" && unbinder !== null) {\n          unbinder();\n          return unbound = true;\n        } else {\n          return shouldUnbind = true;\n        }\n      }\n    };\n    var unbinder = binder(function () {\n      var ref;\n\n      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      var value = eventTransformer.apply(this, args);\n      if (!(isArray(value) && ((ref = _.last(value)) != null ? ref._isEvent : undefined))) {\n        value = [value];\n      }\n      var reply = Bacon.more;\n      for (var i = 0, event; i < value.length; i++) {\n        event = value[i];\n        reply = sink(event = toEvent(event));\n        if (reply === Bacon.noMore || event.isEnd()) {\n          unbind();\n          return reply;\n        }\n      }\n      return reply;\n    });\n    if (shouldUnbind) {\n      unbind();\n    }\n    return unbind;\n  });\n};\n\nBacon.Observable.prototype.map = function (p) {\n  for (var _len8 = arguments.length, args = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    args[_key8 - 1] = arguments[_key8];\n  }\n\n  return convertArgsToFunction(this, p, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"map\", [f]), this.withHandler(function (event) {\n      return this.push(event.fmap(f));\n    }));\n  });\n};\n\nvar argumentsToObservables = function (args) {\n  if (isArray(args[0])) {\n    return args[0];\n  } else {\n    return Array.prototype.slice.call(args);\n  }\n};\n\nvar argumentsToObservablesAndFunction = function (args) {\n  if (_.isFunction(args[0])) {\n    return [argumentsToObservables(Array.prototype.slice.call(args, 1)), args[0]];\n  } else {\n    return [argumentsToObservables(Array.prototype.slice.call(args, 0, args.length - 1)), _.last(args)];\n  }\n};\n\nBacon.combineAsArray = function () {\n  var streams = argumentsToObservables(arguments);\n  if (streams.length) {\n    var sources = [];\n    for (var i = 0; i < streams.length; i++) {\n      var stream = isObservable(streams[i]) ? streams[i] : Bacon.constant(streams[i]);\n      sources.push(new Source(stream, true));\n    }\n    return withDesc(new Bacon.Desc(Bacon, \"combineAsArray\", streams), Bacon.when(sources, function () {\n      for (var _len9 = arguments.length, xs = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        xs[_key9] = arguments[_key9];\n      }\n\n      return xs;\n    }).toProperty());\n  } else {\n    return Bacon.constant([]);\n  }\n};\n\nBacon.onValues = function () {\n  return Bacon.combineAsArray(Array.prototype.slice.call(arguments, 0, arguments.length - 1)).onValues(arguments[arguments.length - 1]);\n};\n\nBacon.combineWith = function () {\n  var _argumentsToObservablesAndFunction = argumentsToObservablesAndFunction(arguments);\n\n  var streams = _argumentsToObservablesAndFunction[0];\n  var f = _argumentsToObservablesAndFunction[1];\n\n  var desc = new Bacon.Desc(Bacon, \"combineWith\", [f].concat(streams));\n  return withDesc(desc, Bacon.combineAsArray(streams).map(function (values) {\n    return f.apply(undefined, values);\n  }));\n};\n\nBacon.Observable.prototype.combine = function (other, f) {\n  var combinator = toCombinator(f);\n  var desc = new Bacon.Desc(this, \"combine\", [other, f]);\n  return withDesc(desc, Bacon.combineAsArray(this, other).map(function (values) {\n    return combinator(values[0], values[1]);\n  }));\n};\n\nBacon.Observable.prototype.withStateMachine = function (initState, f) {\n  var state = initState;\n  var desc = new Bacon.Desc(this, \"withStateMachine\", [initState, f]);\n  return withDesc(desc, this.withHandler(function (event) {\n    var fromF = f(state, event);\n    var newState = fromF[0];\n    var outputs = fromF[1];\n\n    state = newState;\n    var reply = Bacon.more;\n    for (var i = 0, output; i < outputs.length; i++) {\n      output = outputs[i];\n      reply = this.push(output);\n      if (reply === Bacon.noMore) {\n        return reply;\n      }\n    }\n    return reply;\n  }));\n};\n\nvar equals = function (a, b) {\n  return a === b;\n};\n\nvar isNone = function (object) {\n  return typeof object !== \"undefined\" && object !== null ? object._isNone : false;\n};\n\nBacon.Observable.prototype.skipDuplicates = function () {\n  var isEqual = arguments.length <= 0 || arguments[0] === undefined ? equals : arguments[0];\n\n  var desc = new Bacon.Desc(this, \"skipDuplicates\", []);\n  return withDesc(desc, this.withStateMachine(None, function (prev, event) {\n    if (!event.hasValue()) {\n      return [prev, [event]];\n    } else if (event.isInitial() || isNone(prev) || !isEqual(prev.get(), event.value())) {\n      return [new Some(event.value()), [event]];\n    } else {\n      return [prev, []];\n    }\n  }));\n};\n\nBacon.Observable.prototype.awaiting = function (other) {\n  var desc = new Bacon.Desc(this, \"awaiting\", [other]);\n  return withDesc(desc, Bacon.groupSimultaneous(this, other).map(function (values) {\n    return values[1].length === 0;\n  }).toProperty(false).skipDuplicates());\n};\n\nBacon.Observable.prototype.not = function () {\n  return withDesc(new Bacon.Desc(this, \"not\", []), this.map(function (x) {\n    return !x;\n  }));\n};\n\nBacon.Property.prototype.and = function (other) {\n  return withDesc(new Bacon.Desc(this, \"and\", [other]), this.combine(other, function (x, y) {\n    return x && y;\n  }));\n};\n\nBacon.Property.prototype.or = function (other) {\n  return withDesc(new Bacon.Desc(this, \"or\", [other]), this.combine(other, function (x, y) {\n    return x || y;\n  }));\n};\n\nBacon.scheduler = {\n  setTimeout: function (f, d) {\n    return setTimeout(f, d);\n  },\n  setInterval: function (f, i) {\n    return setInterval(f, i);\n  },\n  clearInterval: function (id) {\n    return clearInterval(id);\n  },\n  clearTimeout: function (id) {\n    return clearTimeout(id);\n  },\n  now: function () {\n    return new Date().getTime();\n  }\n};\n\nBacon.EventStream.prototype.bufferWithTime = function (delay) {\n  return withDesc(new Bacon.Desc(this, \"bufferWithTime\", [delay]), this.bufferWithTimeOrCount(delay, Number.MAX_VALUE));\n};\n\nBacon.EventStream.prototype.bufferWithCount = function (count) {\n  return withDesc(new Bacon.Desc(this, \"bufferWithCount\", [count]), this.bufferWithTimeOrCount(undefined, count));\n};\n\nBacon.EventStream.prototype.bufferWithTimeOrCount = function (delay, count) {\n  var flushOrSchedule = function (buffer) {\n    if (buffer.values.length === count) {\n      return buffer.flush();\n    } else if (delay !== undefined) {\n      return buffer.schedule();\n    }\n  };\n  var desc = new Bacon.Desc(this, \"bufferWithTimeOrCount\", [delay, count]);\n  return withDesc(desc, this.buffer(delay, flushOrSchedule, flushOrSchedule));\n};\n\nBacon.EventStream.prototype.buffer = function (delay) {\n  var onInput = arguments.length <= 1 || arguments[1] === undefined ? nop : arguments[1];\n  var onFlush = arguments.length <= 2 || arguments[2] === undefined ? nop : arguments[2];\n\n  var buffer = {\n    scheduled: null,\n    end: undefined,\n    values: [],\n    flush: function () {\n      if (this.scheduled) {\n        Bacon.scheduler.clearTimeout(this.scheduled);\n        this.scheduled = null;\n      }\n      if (this.values.length > 0) {\n        var valuesToPush = this.values;\n        this.values = [];\n        var reply = this.push(nextEvent(valuesToPush));\n        if (this.end != null) {\n          return this.push(this.end);\n        } else if (reply !== Bacon.noMore) {\n          return onFlush(this);\n        }\n      } else {\n        if (this.end != null) {\n          return this.push(this.end);\n        }\n      }\n    },\n    schedule: function () {\n      var _this6 = this;\n\n      if (!this.scheduled) {\n        return this.scheduled = delay(function () {\n          return _this6.flush();\n        });\n      }\n    }\n  };\n  var reply = Bacon.more;\n  if (!_.isFunction(delay)) {\n    var delayMs = delay;\n    delay = function (f) {\n      return Bacon.scheduler.setTimeout(f, delayMs);\n    };\n  }\n  return withDesc(new Bacon.Desc(this, \"buffer\", []), this.withHandler(function (event) {\n    var _this7 = this;\n\n    buffer.push = function (event) {\n      return _this7.push(event);\n    };\n    if (event.isError()) {\n      reply = this.push(event);\n    } else if (event.isEnd()) {\n      buffer.end = event;\n      if (!buffer.scheduled) {\n        buffer.flush();\n      }\n    } else {\n      buffer.values.push(event.value());\n\n      onInput(buffer);\n    }\n    return reply;\n  }));\n};\n\nBacon.Observable.prototype.filter = function (f) {\n  assertObservableIsProperty(f);\n\n  for (var _len10 = arguments.length, args = Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n    args[_key10 - 1] = arguments[_key10];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"filter\", [f]), this.withHandler(function (event) {\n      if (event.filter(f)) {\n        return this.push(event);\n      } else {\n        return Bacon.more;\n      }\n    }));\n  });\n};\n\nBacon.once = function (value) {\n  return new EventStream(new Desc(Bacon, \"once\", [value]), function (sink) {\n    sink(toEvent(value));\n    sink(endEvent());\n    return nop;\n  });\n};\n\nBacon.EventStream.prototype.concat = function (right) {\n  var left = this;\n  return new EventStream(new Bacon.Desc(left, \"concat\", [right]), function (sink) {\n    var unsubRight = nop;\n    var unsubLeft = left.dispatcher.subscribe(function (e) {\n      if (e.isEnd()) {\n        unsubRight = right.dispatcher.subscribe(sink);\n        return unsubRight;\n      } else {\n        return sink(e);\n      }\n    });\n    return function () {\n      return (unsubLeft(), unsubRight());\n    };\n  });\n};\n\nBacon.Observable.prototype.flatMap = function () {\n  return flatMap_(this, makeSpawner(arguments));\n};\n\nBacon.Observable.prototype.flatMapFirst = function () {\n  return flatMap_(this, makeSpawner(arguments), true);\n};\n\nvar makeSpawner = function (args) {\n  if (args.length === 1 && isObservable(args[0])) {\n    return _.always(args[0]);\n  } else {\n    return makeFunctionArgs(args);\n  }\n};\n\nvar makeObservable = function (x) {\n  if (isObservable(x)) {\n    return x;\n  } else {\n    return Bacon.once(x);\n  }\n};\n\nvar flatMap_ = function (root, f, firstOnly, limit) {\n  var rootDep = [root];\n  var childDeps = [];\n  var desc = new Bacon.Desc(root, \"flatMap\" + (firstOnly ? \"First\" : \"\"), [f]);\n  var result = new EventStream(desc, function (sink) {\n    var composite = new CompositeUnsubscribe();\n    var queue = [];\n    var spawn = function (event) {\n      var child = makeObservable(f(event.value()));\n      childDeps.push(child);\n      return composite.add(function (unsubAll, unsubMe) {\n        return child.dispatcher.subscribe(function (event) {\n          if (event.isEnd()) {\n            _.remove(child, childDeps);\n            checkQueue();\n            checkEnd(unsubMe);\n            return Bacon.noMore;\n          } else {\n            if (typeof event !== \"undefined\" && event !== null ? event._isInitial : undefined) {\n              event = event.toNext();\n            }\n            var reply = sink(event);\n            if (reply === Bacon.noMore) {\n              unsubAll();\n            }\n            return reply;\n          }\n        });\n      });\n    };\n    var checkQueue = function () {\n      var event = queue.shift();\n      if (event) {\n        return spawn(event);\n      }\n    };\n    var checkEnd = function (unsub) {\n      unsub();\n      if (composite.empty()) {\n        return sink(endEvent());\n      }\n    };\n    composite.add(function (__, unsubRoot) {\n      return root.dispatcher.subscribe(function (event) {\n        if (event.isEnd()) {\n          return checkEnd(unsubRoot);\n        } else if (event.isError()) {\n          return sink(event);\n        } else if (firstOnly && composite.count() > 1) {\n          return Bacon.more;\n        } else {\n          if (composite.unsubscribed) {\n            return Bacon.noMore;\n          }\n          if (limit && composite.count() > limit) {\n            return queue.push(event);\n          } else {\n            return spawn(event);\n          }\n        }\n      });\n    });\n    return composite.unsubscribe;\n  });\n  result.internalDeps = function () {\n    if (childDeps.length) {\n      return rootDep.concat(childDeps);\n    } else {\n      return rootDep;\n    }\n  };\n  return result;\n};\n\nBacon.Observable.prototype.flatMapWithConcurrencyLimit = function (limit) {\n  for (var _len11 = arguments.length, args = Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    args[_key11 - 1] = arguments[_key11];\n  }\n\n  var desc = new Bacon.Desc(this, \"flatMapWithConcurrencyLimit\", [limit].concat(args));\n  return withDesc(desc, flatMap_(this, makeSpawner(args), false, limit));\n};\n\nBacon.Observable.prototype.flatMapConcat = function () {\n  var desc = new Bacon.Desc(this, \"flatMapConcat\", Array.prototype.slice.call(arguments, 0));\n  return withDesc(desc, this.flatMapWithConcurrencyLimit.apply(this, [1].concat(_slice.call(arguments))));\n};\n\nBacon.later = function (delay, value) {\n  return withDesc(new Bacon.Desc(Bacon, \"later\", [delay, value]), Bacon.fromBinder(function (sink) {\n    var sender = function () {\n      return sink([value, endEvent()]);\n    };\n    var id = Bacon.scheduler.setTimeout(sender, delay);\n    return function () {\n      return Bacon.scheduler.clearTimeout(id);\n    };\n  }));\n};\n\nBacon.Observable.prototype.bufferingThrottle = function (minimumInterval) {\n  var desc = new Bacon.Desc(this, \"bufferingThrottle\", [minimumInterval]);\n  return withDesc(desc, this.flatMapConcat(function (x) {\n    return Bacon.once(x).concat(Bacon.later(minimumInterval).filter(false));\n  }));\n};\n\nBacon.Property.prototype.bufferingThrottle = function () {\n  return Bacon.Observable.prototype.bufferingThrottle.apply(this, arguments).toProperty();\n};\n\nfunction Bus() {\n  if (!(this instanceof Bus)) {\n    return new Bus();\n  }\n\n  this.unsubAll = _.bind(this.unsubAll, this);\n  this.subscribeAll = _.bind(this.subscribeAll, this);\n  this.guardedSink = _.bind(this.guardedSink, this);\n\n  this.sink = undefined;\n  this.subscriptions = [];\n  this.ended = false;\n  EventStream.call(this, new Bacon.Desc(Bacon, \"Bus\", []), this.subscribeAll);\n}\n\ninherit(Bus, EventStream);\nextend(Bus.prototype, {\n  unsubAll: function () {\n    var iterable = this.subscriptions;\n    for (var i = 0, sub; i < iterable.length; i++) {\n      sub = iterable[i];\n      if (typeof sub.unsub === \"function\") {\n        sub.unsub();\n      }\n    }\n  },\n\n  subscribeAll: function (newSink) {\n    if (this.ended) {\n      newSink(endEvent());\n    } else {\n      this.sink = newSink;\n      var iterable = cloneArray(this.subscriptions);\n      for (var i = 0, subscription; i < iterable.length; i++) {\n        subscription = iterable[i];\n        this.subscribeInput(subscription);\n      }\n    }\n    return this.unsubAll;\n  },\n\n  guardedSink: function (input) {\n    var _this8 = this;\n\n    return function (event) {\n      if (event.isEnd()) {\n        _this8.unsubscribeInput(input);\n        return Bacon.noMore;\n      } else {\n        return _this8.sink(event);\n      }\n    };\n  },\n\n  subscribeInput: function (subscription) {\n    subscription.unsub = subscription.input.dispatcher.subscribe(this.guardedSink(subscription.input));\n    return subscription.unsub;\n  },\n\n  unsubscribeInput: function (input) {\n    var iterable = this.subscriptions;\n    for (var i = 0, sub; i < iterable.length; i++) {\n      sub = iterable[i];\n      if (sub.input === input) {\n        if (typeof sub.unsub === \"function\") {\n          sub.unsub();\n        }\n        this.subscriptions.splice(i, 1);\n        return;\n      }\n    }\n  },\n\n  plug: function (input) {\n    var _this9 = this;\n\n    assertObservable(input);\n    if (this.ended) {\n      return;\n    }\n    var sub = { input: input };\n    this.subscriptions.push(sub);\n    if (typeof this.sink !== \"undefined\") {\n      this.subscribeInput(sub);\n    }\n    return function () {\n      return _this9.unsubscribeInput(input);\n    };\n  },\n\n  end: function () {\n    this.ended = true;\n    this.unsubAll();\n    if (typeof this.sink === \"function\") {\n      return this.sink(endEvent());\n    }\n  },\n\n  push: function (value) {\n    if (!this.ended && typeof this.sink === \"function\") {\n      return this.sink(nextEvent(value));\n    }\n  },\n\n  error: function (error) {\n    if (typeof this.sink === \"function\") {\n      return this.sink(new Error(error));\n    }\n  }\n});\n\nBacon.Bus = Bus;\n\nvar liftCallback = function (desc, wrapped) {\n  return withMethodCallSupport(function (f) {\n    var stream = partiallyApplied(wrapped, [function (values, callback) {\n      return f.apply(undefined, values.concat([callback]));\n    }]);\n\n    for (var _len12 = arguments.length, args = Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n      args[_key12 - 1] = arguments[_key12];\n    }\n\n    return withDesc(new Bacon.Desc(Bacon, desc, [f].concat(args)), Bacon.combineAsArray(args).flatMap(stream));\n  });\n};\n\nBacon.fromCallback = liftCallback(\"fromCallback\", function (f) {\n  for (var _len13 = arguments.length, args = Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {\n    args[_key13 - 1] = arguments[_key13];\n  }\n\n  return Bacon.fromBinder(function (handler) {\n    makeFunction(f, args)(handler);\n    return nop;\n  }, function (value) {\n    return [value, endEvent()];\n  });\n});\n\nBacon.fromNodeCallback = liftCallback(\"fromNodeCallback\", function (f) {\n  for (var _len14 = arguments.length, args = Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n    args[_key14 - 1] = arguments[_key14];\n  }\n\n  return Bacon.fromBinder(function (handler) {\n    makeFunction(f, args)(handler);\n    return nop;\n  }, function (error, value) {\n    if (error) {\n      return [new Error(error), endEvent()];\n    }\n    return [value, endEvent()];\n  });\n});\n\nBacon.combineTemplate = function (template) {\n  function current(ctxStack) {\n    return ctxStack[ctxStack.length - 1];\n  }\n  function setValue(ctxStack, key, value) {\n    current(ctxStack)[key] = value;\n    return value;\n  }\n  function applyStreamValue(key, index) {\n    return function (ctxStack, values) {\n      return setValue(ctxStack, key, values[index]);\n    };\n  }\n  function constantValue(key, value) {\n    return function (ctxStack) {\n      return setValue(ctxStack, key, value);\n    };\n  }\n\n  function mkContext(template) {\n    return isArray(template) ? [] : {};\n  }\n\n  function pushContext(key, value) {\n    return function (ctxStack) {\n      var newContext = mkContext(value);\n      setValue(ctxStack, key, newContext);\n      return ctxStack.push(newContext);\n    };\n  }\n\n  function compile(key, value) {\n    if (isObservable(value)) {\n      streams.push(value);\n      return funcs.push(applyStreamValue(key, streams.length - 1));\n    } else if (value && (value.constructor == Object || value.constructor == Array)) {\n      var popContext = function (ctxStack) {\n        return ctxStack.pop();\n      };\n      funcs.push(pushContext(key, value));\n      compileTemplate(value);\n      return funcs.push(popContext);\n    } else {\n      return funcs.push(constantValue(key, value));\n    }\n  }\n\n  function combinator(values) {\n    var rootContext = mkContext(template);\n    var ctxStack = [rootContext];\n    for (var i = 0, f; i < funcs.length; i++) {\n      f = funcs[i];\n      f(ctxStack, values);\n    }\n    return rootContext;\n  }\n\n  function compileTemplate(template) {\n    return _.each(template, compile);\n  }\n\n  var funcs = [];\n  var streams = [];\n\n  compileTemplate(template);\n\n  return withDesc(new Bacon.Desc(Bacon, \"combineTemplate\", [template]), Bacon.combineAsArray(streams).map(combinator));\n};\n\nvar addPropertyInitValueToStream = function (property, stream) {\n  var justInitValue = new EventStream(describe(property, \"justInitValue\"), function (sink) {\n    var value = undefined;\n    var unsub = property.dispatcher.subscribe(function (event) {\n      if (!event.isEnd()) {\n        value = event;\n      }\n      return Bacon.noMore;\n    });\n    UpdateBarrier.whenDoneWith(justInitValue, function () {\n      if (typeof value !== \"undefined\" && value !== null) {\n        sink(value);\n      }\n      return sink(endEvent());\n    });\n    return unsub;\n  });\n  return justInitValue.concat(stream).toProperty();\n};\n\nBacon.Observable.prototype.mapEnd = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"mapEnd\", [f]), this.withHandler(function (event) {\n    if (event.isEnd()) {\n      this.push(nextEvent(f(event)));\n      this.push(endEvent());\n      return Bacon.noMore;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nBacon.Observable.prototype.skipErrors = function () {\n  return withDesc(new Bacon.Desc(this, \"skipErrors\", []), this.withHandler(function (event) {\n    if (event.isError()) {\n      return Bacon.more;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nBacon.EventStream.prototype.takeUntil = function (stopper) {\n  var endMarker = {};\n  return withDesc(new Bacon.Desc(this, \"takeUntil\", [stopper]), Bacon.groupSimultaneous(this.mapEnd(endMarker), stopper.skipErrors()).withHandler(function (event) {\n    if (!event.hasValue()) {\n      return this.push(event);\n    } else {\n      var _event$value = event.value();\n\n      var data = _event$value[0];\n      var stopper = _event$value[1];\n\n      if (stopper.length) {\n        return this.push(endEvent());\n      } else {\n        var reply = Bacon.more;\n        for (var i = 0, value; i < data.length; i++) {\n          value = data[i];\n          if (value === endMarker) {\n            reply = this.push(endEvent());\n          } else {\n            reply = this.push(nextEvent(value));\n          }\n        }\n        return reply;\n      }\n    }\n  }));\n};\n\nBacon.Property.prototype.takeUntil = function (stopper) {\n  var changes = this.changes().takeUntil(stopper);\n  return withDesc(new Bacon.Desc(this, \"takeUntil\", [stopper]), addPropertyInitValueToStream(this, changes));\n};\n\nBacon.Observable.prototype.flatMapLatest = function () {\n  var f = makeSpawner(arguments);\n  var stream = this.toEventStream();\n  return withDesc(new Bacon.Desc(this, \"flatMapLatest\", [f]), stream.flatMap(function (value) {\n    return makeObservable(f(value)).takeUntil(stream);\n  }));\n};\n\nBacon.Property.prototype.delayChanges = function (desc, f) {\n  return withDesc(desc, addPropertyInitValueToStream(this, f(this.changes())));\n};\n\nBacon.EventStream.prototype.delay = function (delay) {\n  return withDesc(new Bacon.Desc(this, \"delay\", [delay]), this.flatMap(function (value) {\n    return Bacon.later(delay, value);\n  }));\n};\n\nBacon.Property.prototype.delay = function (delay) {\n  return this.delayChanges(new Bacon.Desc(this, \"delay\", [delay]), function (changes) {\n    return changes.delay(delay);\n  });\n};\n\nBacon.EventStream.prototype.debounce = function (delay) {\n  return withDesc(new Bacon.Desc(this, \"debounce\", [delay]), this.flatMapLatest(function (value) {\n    return Bacon.later(delay, value);\n  }));\n};\n\nBacon.Property.prototype.debounce = function (delay) {\n  return this.delayChanges(new Bacon.Desc(this, \"debounce\", [delay]), function (changes) {\n    return changes.debounce(delay);\n  });\n};\n\nBacon.EventStream.prototype.debounceImmediate = function (delay) {\n  return withDesc(new Bacon.Desc(this, \"debounceImmediate\", [delay]), this.flatMapFirst(function (value) {\n    return Bacon.once(value).concat(Bacon.later(delay).filter(false));\n  }));\n};\n\nBacon.Observable.prototype.decode = function (cases) {\n  return withDesc(new Bacon.Desc(this, \"decode\", [cases]), this.combine(Bacon.combineTemplate(cases), function (key, values) {\n    return values[key];\n  }));\n};\n\nBacon.Observable.prototype.scan = function (seed, f) {\n  var _this10 = this;\n\n  var resultProperty;\n  f = toCombinator(f);\n  var acc = toOption(seed);\n  var initHandled = false;\n  var subscribe = function (sink) {\n    var initSent = false;\n    var unsub = nop;\n    var reply = Bacon.more;\n    var sendInit = function () {\n      if (!initSent) {\n        return acc.forEach(function (value) {\n          initSent = initHandled = true;\n          reply = sink(new Initial(function () {\n            return value;\n          }));\n          if (reply === Bacon.noMore) {\n            unsub();\n            unsub = nop;\n            return unsub;\n          }\n        });\n      }\n    };\n    unsub = _this10.dispatcher.subscribe(function (event) {\n      if (event.hasValue()) {\n        if (initHandled && event.isInitial()) {\n          return Bacon.more;\n        } else {\n            if (!event.isInitial()) {\n              sendInit();\n            }\n            initSent = initHandled = true;\n            var prev = acc.getOrElse(undefined);\n            var next = f(prev, event.value());\n\n            acc = new Some(next);\n            return sink(event.apply(function () {\n              return next;\n            }));\n          }\n      } else {\n        if (event.isEnd()) {\n          reply = sendInit();\n        }\n        if (reply !== Bacon.noMore) {\n          return sink(event);\n        }\n      }\n    });\n    UpdateBarrier.whenDoneWith(resultProperty, sendInit);\n    return unsub;\n  };\n  resultProperty = new Property(new Bacon.Desc(this, \"scan\", [seed, f]), subscribe);\n  return resultProperty;\n};\n\nBacon.Observable.prototype.diff = function (start, f) {\n  f = toCombinator(f);\n  return withDesc(new Bacon.Desc(this, \"diff\", [start, f]), this.scan([start], function (prevTuple, next) {\n    return [next, f(prevTuple[0], next)];\n  }).filter(function (tuple) {\n    return tuple.length === 2;\n  }).map(function (tuple) {\n    return tuple[1];\n  }));\n};\n\nBacon.Observable.prototype.doAction = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"doAction\", [f]), this.withHandler(function (event) {\n    if (event.hasValue()) {\n      f(event.value());\n    }\n    return this.push(event);\n  }));\n};\n\nBacon.Observable.prototype.doEnd = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"doEnd\", [f]), this.withHandler(function (event) {\n    if (event.isEnd()) {\n      f();\n    }\n    return this.push(event);\n  }));\n};\n\nBacon.Observable.prototype.doError = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"doError\", [f]), this.withHandler(function (event) {\n    if (event.isError()) {\n      f(event.error);\n    }\n    return this.push(event);\n  }));\n};\n\nBacon.Observable.prototype.doLog = function () {\n  for (var _len15 = arguments.length, args = Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n    args[_key15] = arguments[_key15];\n  }\n\n  return withDesc(new Bacon.Desc(this, \"doLog\", args), this.withHandler(function (event) {\n    if (typeof console !== \"undefined\" && console !== null && typeof console.log === \"function\") {\n      console.log.apply(console, args.concat([event.log()]));\n    }\n    return this.push(event);\n  }));\n};\n\nBacon.Observable.prototype.endOnError = function (f) {\n  if (!(typeof f !== \"undefined\" && f !== null)) {\n    f = true;\n  }\n\n  for (var _len16 = arguments.length, args = Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {\n    args[_key16 - 1] = arguments[_key16];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"endOnError\", []), this.withHandler(function (event) {\n      if (event.isError() && f(event.error)) {\n        this.push(event);\n        return this.push(endEvent());\n      } else {\n        return this.push(event);\n      }\n    }));\n  });\n};\n\nObservable.prototype.errors = function () {\n  return withDesc(new Bacon.Desc(this, \"errors\", []), this.filter(function () {\n    return false;\n  }));\n};\n\nBacon.Observable.prototype.take = function (count) {\n  if (count <= 0) {\n    return Bacon.never();\n  }\n  return withDesc(new Bacon.Desc(this, \"take\", [count]), this.withHandler(function (event) {\n    if (!event.hasValue()) {\n      return this.push(event);\n    } else {\n      count--;\n      if (count > 0) {\n        return this.push(event);\n      } else {\n        if (count === 0) {\n          this.push(event);\n        }\n        this.push(endEvent());\n        return Bacon.noMore;\n      }\n    }\n  }));\n};\n\nBacon.Observable.prototype.first = function () {\n  return withDesc(new Bacon.Desc(this, \"first\", []), this.take(1));\n};\n\nBacon.Observable.prototype.mapError = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"mapError\", [f]), this.withHandler(function (event) {\n    if (event.isError()) {\n      return this.push(nextEvent(f(event.error)));\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nBacon.Observable.prototype.flatMapError = function (fn) {\n  var desc = new Bacon.Desc(this, \"flatMapError\", [fn]);\n  return withDesc(desc, this.mapError(function (err) {\n    return new Error(err);\n  }).flatMap(function (x) {\n    if (x instanceof Error) {\n      return fn(x.error);\n    } else {\n      return Bacon.once(x);\n    }\n  }));\n};\n\nBacon.EventStream.prototype.sampledBy = function (sampler, combinator) {\n  return withDesc(new Bacon.Desc(this, \"sampledBy\", [sampler, combinator]), this.toProperty().sampledBy(sampler, combinator));\n};\n\nBacon.Property.prototype.sampledBy = function (sampler, combinator) {\n  var lazy = false;\n  if (typeof combinator !== \"undefined\" && combinator !== null) {\n    combinator = toCombinator(combinator);\n  } else {\n    lazy = true;\n    combinator = function (f) {\n      return f.value();\n    };\n  }\n  var thisSource = new Source(this, false, lazy);\n  var samplerSource = new Source(sampler, true, lazy);\n  var stream = Bacon.when([thisSource, samplerSource], combinator);\n  var result = sampler._isProperty ? stream.toProperty() : stream;\n  return withDesc(new Bacon.Desc(this, \"sampledBy\", [sampler, combinator]), result);\n};\n\nBacon.Property.prototype.sample = function (interval) {\n  return withDesc(new Bacon.Desc(this, \"sample\", [interval]), this.sampledBy(Bacon.interval(interval, {})));\n};\n\nBacon.Observable.prototype.map = function (p) {\n  if (p && p._isProperty) {\n    return p.sampledBy(this, former);\n  } else {\n    for (var _len17 = arguments.length, args = Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {\n      args[_key17 - 1] = arguments[_key17];\n    }\n\n    return convertArgsToFunction(this, p, args, function (f) {\n      return withDesc(new Bacon.Desc(this, \"map\", [f]), this.withHandler(function (event) {\n        return this.push(event.fmap(f));\n      }));\n    });\n  }\n};\n\nBacon.Observable.prototype.fold = function (seed, f) {\n  return withDesc(new Bacon.Desc(this, \"fold\", [seed, f]), this.scan(seed, f).sampledBy(this.filter(false).mapEnd().toProperty()));\n};\n\nObservable.prototype.reduce = Observable.prototype.fold;\n\nvar eventMethods = [[\"addEventListener\", \"removeEventListener\"], [\"addListener\", \"removeListener\"], [\"on\", \"off\"], [\"bind\", \"unbind\"]];\n\nvar findHandlerMethods = function (target) {\n  var pair;\n  for (var i = 0; i < eventMethods.length; i++) {\n    pair = eventMethods[i];\n    var methodPair = [target[pair[0]], target[pair[1]]];\n    if (methodPair[0] && methodPair[1]) {\n      return methodPair;\n    }\n  }\n  for (var j = 0; j < eventMethods.length; j++) {\n    pair = eventMethods[j];\n    var addListener = target[pair[0]];\n    if (addListener) {\n      return [addListener, function () {}];\n    }\n  }\n  throw new Error(\"No suitable event methods in \" + target);\n};\n\nBacon.fromEventTarget = function (target, eventName, eventTransformer) {\n  var _findHandlerMethods = findHandlerMethods(target);\n\n  var sub = _findHandlerMethods[0];\n  var unsub = _findHandlerMethods[1];\n\n  var desc = new Bacon.Desc(Bacon, \"fromEvent\", [target, eventName]);\n  return withDesc(desc, Bacon.fromBinder(function (handler) {\n    sub.call(target, eventName, handler);\n    return function () {\n      return unsub.call(target, eventName, handler);\n    };\n  }, eventTransformer));\n};\n\nBacon.fromEvent = Bacon.fromEventTarget;\n\nBacon.fromPoll = function (delay, poll) {\n  var desc = new Bacon.Desc(Bacon, \"fromPoll\", [delay, poll]);\n  return withDesc(desc, Bacon.fromBinder(function (handler) {\n    var id = Bacon.scheduler.setInterval(handler, delay);\n    return function () {\n      return Bacon.scheduler.clearInterval(id);\n    };\n  }, poll));\n};\n\nfunction valueAndEnd(value) {\n  return [value, endEvent()];\n}\n\nBacon.fromPromise = function (promise, abort) {\n  var eventTransformer = arguments.length <= 2 || arguments[2] === undefined ? valueAndEnd : arguments[2];\n\n  return withDesc(new Bacon.Desc(Bacon, \"fromPromise\", [promise]), Bacon.fromBinder(function (handler) {\n    var bound = promise.then(handler, function (e) {\n      return handler(new Error(e));\n    });\n    if (bound && typeof bound.done === \"function\") {\n      bound.done();\n    }\n\n    if (abort) {\n      return function () {\n        if (typeof promise.abort === \"function\") {\n          return promise.abort();\n        }\n      };\n    } else {\n      return function () {};\n    }\n  }, eventTransformer));\n};\n\nBacon.Observable.prototype.groupBy = function (keyF) {\n  var limitF = arguments.length <= 1 || arguments[1] === undefined ? Bacon._.id : arguments[1];\n\n  var streams = {};\n  var src = this;\n  return src.filter(function (x) {\n    return !streams[keyF(x)];\n  }).map(function (x) {\n    var key = keyF(x);\n    var similar = src.filter(function (x) {\n      return keyF(x) === key;\n    });\n    var data = Bacon.once(x).concat(similar);\n    var limited = limitF(data, x).withHandler(function (event) {\n      this.push(event);\n      if (event.isEnd()) {\n        return delete streams[key];\n      }\n    });\n    streams[key] = limited;\n    return limited;\n  });\n};\n\nBacon.fromArray = function (values) {\n  assertArray(values);\n  if (!values.length) {\n    return withDesc(new Bacon.Desc(Bacon, \"fromArray\", values), Bacon.never());\n  } else {\n    var i = 0;\n    return new EventStream(new Bacon.Desc(Bacon, \"fromArray\", [values]), function (sink) {\n      var unsubd = false;\n      var reply = Bacon.more;\n      var pushing = false;\n      var pushNeeded = false;\n      var push = function () {\n        pushNeeded = true;\n        if (pushing) {\n          return;\n        }\n        pushing = true;\n        while (pushNeeded) {\n          pushNeeded = false;\n          if (reply !== Bacon.noMore && !unsubd) {\n            var value = values[i++];\n            reply = sink(toEvent(value));\n            if (reply !== Bacon.noMore) {\n              if (i === values.length) {\n                sink(endEvent());\n              } else {\n                UpdateBarrier.afterTransaction(push);\n              }\n            }\n          }\n        }\n        pushing = false;\n        return pushing;\n      };\n\n      push();\n      return function () {\n        unsubd = true;\n        return unsubd;\n      };\n    });\n  }\n};\n\nBacon.EventStream.prototype.holdWhen = function (valve) {\n  var onHold = false;\n  var bufferedValues = [];\n  var src = this;\n  var srcIsEnded = false;\n  return new EventStream(new Bacon.Desc(this, \"holdWhen\", [valve]), function (sink) {\n    var composite = new CompositeUnsubscribe();\n    var subscribed = false;\n    var endIfBothEnded = function (unsub) {\n      if (typeof unsub === \"function\") {\n        unsub();\n      }\n      if (composite.empty() && subscribed) {\n        return sink(endEvent());\n      }\n    };\n    composite.add(function (unsubAll, unsubMe) {\n      return valve.subscribeInternal(function (event) {\n        if (event.hasValue()) {\n          onHold = event.value();\n          if (!onHold) {\n            var toSend = bufferedValues;\n            bufferedValues = [];\n            return (function () {\n              var result = [];\n              for (var i = 0, value; i < toSend.length; i++) {\n                value = toSend[i];\n                result.push(sink(nextEvent(value)));\n              }\n              if (srcIsEnded) {\n                result.push(sink(endEvent()));\n                unsubMe();\n              }\n              return result;\n            })();\n          }\n        } else if (event.isEnd()) {\n          return endIfBothEnded(unsubMe);\n        } else {\n          return sink(event);\n        }\n      });\n    });\n    composite.add(function (unsubAll, unsubMe) {\n      return src.subscribeInternal(function (event) {\n        if (onHold && event.hasValue()) {\n          return bufferedValues.push(event.value());\n        } else if (event.isEnd() && bufferedValues.length) {\n          srcIsEnded = true;\n          return endIfBothEnded(unsubMe);\n        } else {\n          return sink(event);\n        }\n      });\n    });\n    subscribed = true;\n    endIfBothEnded();\n    return composite.unsubscribe;\n  });\n};\n\nBacon.interval = function (delay) {\n  var value = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  return withDesc(new Bacon.Desc(Bacon, \"interval\", [delay, value]), Bacon.fromPoll(delay, function () {\n    return nextEvent(value);\n  }));\n};\n\nBacon.$ = {};\nBacon.$.asEventStream = function (eventName, selector, eventTransformer) {\n  var _this11 = this;\n\n  if (_.isFunction(selector)) {\n    eventTransformer = selector;\n    selector = undefined;\n  }\n\n  return withDesc(new Bacon.Desc(this.selector || this, \"asEventStream\", [eventName]), Bacon.fromBinder(function (handler) {\n    _this11.on(eventName, selector, handler);\n    return function () {\n      return _this11.off(eventName, selector, handler);\n    };\n  }, eventTransformer));\n};\n\nif (typeof jQuery !== \"undefined\" && jQuery) {\n  jQuery.fn.asEventStream = Bacon.$.asEventStream;\n}\n\nif (typeof Zepto !== \"undefined\" && Zepto) {\n  Zepto.fn.asEventStream = Bacon.$.asEventStream;\n}\n\nBacon.Observable.prototype.last = function () {\n  var lastEvent;\n\n  return withDesc(new Bacon.Desc(this, \"last\", []), this.withHandler(function (event) {\n    if (event.isEnd()) {\n      if (lastEvent) {\n        this.push(lastEvent);\n      }\n      this.push(endEvent());\n      return Bacon.noMore;\n    } else {\n      lastEvent = event;\n    }\n  }));\n};\n\nBacon.Observable.prototype.log = function () {\n  for (var _len18 = arguments.length, args = Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n    args[_key18] = arguments[_key18];\n  }\n\n  this.subscribe(function (event) {\n    if (typeof console !== \"undefined\" && typeof console.log === \"function\") {\n      console.log.apply(console, args.concat([event.log()]));\n    }\n  });\n  return this;\n};\n\nBacon.EventStream.prototype.merge = function (right) {\n  assertEventStream(right);\n  var left = this;\n  return withDesc(new Bacon.Desc(left, \"merge\", [right]), Bacon.mergeAll(this, right));\n};\n\nBacon.mergeAll = function () {\n  var streams = argumentsToObservables(arguments);\n  if (streams.length) {\n    return new EventStream(new Bacon.Desc(Bacon, \"mergeAll\", streams), function (sink) {\n      var ends = 0;\n      var smartSink = function (obs) {\n        return function (unsubBoth) {\n          return obs.dispatcher.subscribe(function (event) {\n            if (event.isEnd()) {\n              ends++;\n              if (ends === streams.length) {\n                return sink(endEvent());\n              } else {\n                return Bacon.more;\n              }\n            } else {\n              var reply = sink(event);\n              if (reply === Bacon.noMore) {\n                unsubBoth();\n              }\n              return reply;\n            }\n          });\n        };\n      };\n      var sinks = _.map(smartSink, streams);\n      return new Bacon.CompositeUnsubscribe(sinks).unsubscribe;\n    });\n  } else {\n    return Bacon.never();\n  }\n};\n\nBacon.repeatedly = function (delay, values) {\n  var index = 0;\n  return withDesc(new Bacon.Desc(Bacon, \"repeatedly\", [delay, values]), Bacon.fromPoll(delay, function () {\n    return values[index++ % values.length];\n  }));\n};\n\nBacon.repeat = function (generator) {\n  var index = 0;\n  return Bacon.fromBinder(function (sink) {\n    var flag = false;\n    var reply = Bacon.more;\n    var unsub = function () {};\n    function handleEvent(event) {\n      if (event.isEnd()) {\n        if (!flag) {\n          return flag = true;\n        } else {\n          return subscribeNext();\n        }\n      } else {\n        return reply = sink(event);\n      }\n    };\n    function subscribeNext() {\n      var next;\n      flag = true;\n      while (flag && reply !== Bacon.noMore) {\n        next = generator(index++);\n        flag = false;\n        if (next) {\n          unsub = next.subscribeInternal(handleEvent);\n        } else {\n          sink(endEvent());\n        }\n      }\n      return flag = true;\n    };\n    subscribeNext();\n    return function () {\n      return unsub();\n    };\n  });\n};\n\nBacon.retry = function (options) {\n  if (!_.isFunction(options.source)) {\n    throw new Exception(\"'source' option has to be a function\");\n  }\n  var source = options.source;\n  var retries = options.retries || 0;\n  var retriesDone = 0;\n  var delay = options.delay || function () {\n    return 0;\n  };\n  var isRetryable = options.isRetryable || function () {\n    return true;\n  };\n  var finished = false;\n  var error = null;\n\n  return withDesc(new Bacon.Desc(Bacon, \"retry\", [options]), Bacon.repeat(function () {\n    function valueStream() {\n      return source().endOnError().withHandler(function (event) {\n        if (event.isError()) {\n          error = event;\n          if (!(isRetryable(error.error) && (retries === 0 || retriesDone < retries))) {\n            finished = true;\n            return this.push(event);\n          }\n        } else {\n          if (event.hasValue()) {\n            error = null;\n            finished = true;\n          }\n          return this.push(event);\n        }\n      });\n    }\n\n    if (finished) {\n      return null;\n    } else if (error) {\n      var context = {\n        error: error.error,\n        retriesDone: retriesDone\n      };\n      var pause = Bacon.later(delay(context)).filter(false);\n      retriesDone++;\n      return pause.concat(Bacon.once().flatMap(valueStream));\n    } else {\n      return valueStream();\n    }\n  }));\n};\n\nBacon.sequentially = function (delay, values) {\n  var index = 0;\n  return withDesc(new Bacon.Desc(Bacon, \"sequentially\", [delay, values]), Bacon.fromPoll(delay, function () {\n    var value = values[index++];\n    if (index < values.length) {\n      return value;\n    } else if (index === values.length) {\n      return [value, endEvent()];\n    } else {\n      return endEvent();\n    }\n  }));\n};\n\nBacon.Observable.prototype.skip = function (count) {\n  return withDesc(new Bacon.Desc(this, \"skip\", [count]), this.withHandler(function (event) {\n    if (!event.hasValue()) {\n      return this.push(event);\n    } else if (count > 0) {\n      count--;\n      return Bacon.more;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nBacon.EventStream.prototype.skipUntil = function (starter) {\n  var started = starter.take(1).map(true).toProperty(false);\n  return withDesc(new Bacon.Desc(this, \"skipUntil\", [starter]), this.filter(started));\n};\n\nBacon.EventStream.prototype.skipWhile = function (f) {\n  assertObservableIsProperty(f);\n  var ok = false;\n\n  for (var _len19 = arguments.length, args = Array(_len19 > 1 ? _len19 - 1 : 0), _key19 = 1; _key19 < _len19; _key19++) {\n    args[_key19 - 1] = arguments[_key19];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"skipWhile\", [f]), this.withHandler(function (event) {\n      if (ok || !event.hasValue() || !f(event.value())) {\n        if (event.hasValue()) {\n          ok = true;\n        }\n        return this.push(event);\n      } else {\n        return Bacon.more;\n      }\n    }));\n  });\n};\n\nBacon.Observable.prototype.slidingWindow = function (n) {\n  var minValues = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  return withDesc(new Bacon.Desc(this, \"slidingWindow\", [n, minValues]), this.scan([], function (window, value) {\n    return window.concat([value]).slice(-n);\n  }).filter(function (values) {\n    return values.length >= minValues;\n  }));\n};\n\nvar spies = [];\nvar registerObs = function (obs) {\n  if (spies.length) {\n    if (!registerObs.running) {\n      try {\n        registerObs.running = true;\n        spies.forEach(function (spy) {\n          spy(obs);\n        });\n      } finally {\n        delete registerObs.running;\n      }\n    }\n  }\n};\n\nBacon.spy = function (spy) {\n  return spies.push(spy);\n};\n\nBacon.Property.prototype.startWith = function (seed) {\n  return withDesc(new Bacon.Desc(this, \"startWith\", [seed]), this.scan(seed, function (prev, next) {\n    return next;\n  }));\n};\n\nBacon.EventStream.prototype.startWith = function (seed) {\n  return withDesc(new Bacon.Desc(this, \"startWith\", [seed]), Bacon.once(seed).concat(this));\n};\n\nBacon.Observable.prototype.takeWhile = function (f) {\n  assertObservableIsProperty(f);\n\n  for (var _len20 = arguments.length, args = Array(_len20 > 1 ? _len20 - 1 : 0), _key20 = 1; _key20 < _len20; _key20++) {\n    args[_key20 - 1] = arguments[_key20];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"takeWhile\", [f]), this.withHandler(function (event) {\n      if (event.filter(f)) {\n        return this.push(event);\n      } else {\n        this.push(endEvent());\n        return Bacon.noMore;\n      }\n    }));\n  });\n};\n\nBacon.EventStream.prototype.throttle = function (delay) {\n  return withDesc(new Bacon.Desc(this, \"throttle\", [delay]), this.bufferWithTime(delay).map(function (values) {\n    return values[values.length - 1];\n  }));\n};\n\nBacon.Property.prototype.throttle = function (delay) {\n  return this.delayChanges(new Bacon.Desc(this, \"throttle\", [delay]), function (changes) {\n    return changes.throttle(delay);\n  });\n};\n\nObservable.prototype.firstToPromise = function (PromiseCtr) {\n  var _this12 = this;\n\n  if (typeof PromiseCtr !== \"function\") {\n    if (typeof Promise === \"function\") {\n      PromiseCtr = Promise;\n    } else {\n      throw new Exception(\"There isn't default Promise, use shim or parameter\");\n    }\n  }\n\n  return new PromiseCtr(function (resolve, reject) {\n    return _this12.subscribe(function (event) {\n      if (event.hasValue()) {\n        resolve(event.value());\n      }\n      if (event.isError()) {\n        reject(event.error);\n      }\n\n      return Bacon.noMore;\n    });\n  });\n};\n\nObservable.prototype.toPromise = function (PromiseCtr) {\n  return this.last().firstToPromise(PromiseCtr);\n};\n\nBacon[\"try\"] = function (f) {\n  return function (value) {\n    try {\n      return Bacon.once(f(value));\n    } catch (e) {\n      return new Bacon.Error(e);\n    }\n  };\n};\n\nBacon.update = function (initial) {\n  function lateBindFirst(f) {\n    return function () {\n      for (var _len22 = arguments.length, args = Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n        args[_key22] = arguments[_key22];\n      }\n\n      return function (i) {\n        return f.apply(undefined, [i].concat(args));\n      };\n    };\n  }\n\n  for (var _len21 = arguments.length, patterns = Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {\n    patterns[_key21 - 1] = arguments[_key21];\n  }\n\n  var i = patterns.length - 1;\n  while (i > 0) {\n    if (!(patterns[i] instanceof Function)) {\n      patterns[i] = _.always(patterns[i]);\n    }\n    patterns[i] = lateBindFirst(patterns[i]);\n    i = i - 2;\n  }\n  return withDesc(new Bacon.Desc(Bacon, \"update\", [initial].concat(patterns)), Bacon.when.apply(Bacon, patterns).scan(initial, function (x, f) {\n    return f(x);\n  }));\n};\n\nBacon.zipAsArray = function () {\n  for (var _len23 = arguments.length, args = Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n    args[_key23] = arguments[_key23];\n  }\n\n  var streams = argumentsToObservables(args);\n  return withDesc(new Bacon.Desc(Bacon, \"zipAsArray\", streams), Bacon.zipWith(streams, function () {\n    for (var _len24 = arguments.length, xs = Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n      xs[_key24] = arguments[_key24];\n    }\n\n    return xs;\n  }));\n};\n\nBacon.zipWith = function () {\n  for (var _len25 = arguments.length, args = Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n    args[_key25] = arguments[_key25];\n  }\n\n  var observablesAndFunction = argumentsToObservablesAndFunction(args);\n  var streams = observablesAndFunction[0];\n  var f = observablesAndFunction[1];\n\n  streams = _.map(function (s) {\n    return s.toEventStream();\n  }, streams);\n  return withDesc(new Bacon.Desc(Bacon, \"zipWith\", [f].concat(streams)), Bacon.when(streams, f));\n};\n\nBacon.Observable.prototype.zip = function (other, f) {\n  return withDesc(new Bacon.Desc(this, \"zip\", [other]), Bacon.zipWith([this, other], f || Array));\n};\n\nif (typeof define !== \"undefined\" && define !== null && define.amd != null) {\n  define([], function () {\n    return Bacon;\n  });\n  if (typeof this !== \"undefined\" && this !== null) {\n    this.Bacon = Bacon;\n  }\n} else if (typeof module !== \"undefined\" && module !== null && module.exports != null) {\n  module.exports = Bacon;\n  Bacon.Bacon = Bacon;\n} else {\n    this.Bacon = Bacon;\n  }\n}).call(this);\n"],"sourceRoot":""}