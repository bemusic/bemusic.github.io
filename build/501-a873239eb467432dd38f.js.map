{"version":3,"file":"build/501-a873239eb467432dd38f.js","mappings":"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","sources":["file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/aggregate-error@3.1.0/node_modules/aggregate-error/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/bson-objectid@1.3.1/node_modules/bson-objectid/objectid.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/classnames@2.3.2/node_modules/classnames/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/clean-stack@2.2.0/node_modules/clean-stack/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/browser.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/p-map@4.0.0/node_modules/p-map/index.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/@babel+runtime@7.20.6/node_modules/@babel/runtime/helpers/esm/extends.js","file:///home/runner/work/bemuse/bemuse/common/temp/node_modules/.pnpm/idb-keyval@6.2.0/node_modules/idb-keyval/dist/index.js"],"sourcesContent":["'use strict';\nconst indentString = require('indent-string');\nconst cleanStack = require('clean-stack');\n\nconst cleanInternalStack = stack => stack.replace(/\\s+at .*aggregate-error\\/index.js:\\d+:\\d+\\)?/g, '');\n\nclass AggregateError extends Error {\n\tconstructor(errors) {\n\t\tif (!Array.isArray(errors)) {\n\t\t\tthrow new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n\t\t}\n\n\t\terrors = [...errors].map(error => {\n\t\t\tif (error instanceof Error) {\n\t\t\t\treturn error;\n\t\t\t}\n\n\t\t\tif (error !== null && typeof error === 'object') {\n\t\t\t\t// Handle plain error objects with message property and/or possibly other metadata\n\t\t\t\treturn Object.assign(new Error(error.message), error);\n\t\t\t}\n\n\t\t\treturn new Error(error);\n\t\t});\n\n\t\tlet message = errors\n\t\t\t.map(error => {\n\t\t\t\t// The `stack` property is not standardized, so we can't assume it exists\n\t\t\t\treturn typeof error.stack === 'string' ? cleanInternalStack(cleanStack(error.stack)) : String(error);\n\t\t\t})\n\t\t\t.join('\\n');\n\t\tmessage = '\\n' + indentString(message, 4);\n\t\tsuper(message);\n\n\t\tthis.name = 'AggregateError';\n\n\t\tObject.defineProperty(this, '_errors', {value: errors});\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tfor (const error of this._errors) {\n\t\t\tyield error;\n\t\t}\n\t}\n}\n\nmodule.exports = AggregateError;\n","\nvar MACHINE_ID = Math.floor(Math.random() * 0xFFFFFF);\nvar index = ObjectID.index = parseInt(Math.random() * 0xFFFFFF, 10);\nvar pid = (typeof process === 'undefined' || typeof process.pid !== 'number' ? Math.floor(Math.random() * 100000) : process.pid) % 0xFFFF;\n\n/**\n * Determine if an object is Buffer\n *\n * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * License:  MIT\n *\n */\nvar isBuffer = function (obj) {\n  return !!(\n  obj != null &&\n  obj.constructor &&\n  typeof obj.constructor.isBuffer === 'function' &&\n  obj.constructor.isBuffer(obj)\n  )\n};\n\n/**\n * Create a new immutable ObjectID instance\n *\n * @class Represents the BSON ObjectID type\n * @param {String|Number} arg Can be a 24 byte hex string, 12 byte binary string or a Number.\n * @return {Object} instance of ObjectID.\n */\nfunction ObjectID(arg) {\n  if(!(this instanceof ObjectID)) return new ObjectID(arg);\n  if(arg && ((arg instanceof ObjectID) || arg._bsontype===\"ObjectID\"))\n    return arg;\n\n  var buf;\n\n  if(isBuffer(arg) || (Array.isArray(arg) && arg.length===12)) {\n    buf = Array.prototype.slice.call(arg);\n  }\n  else if(typeof arg === \"string\") {\n    if(arg.length!==12 && !ObjectID.isValid(arg))\n      throw new Error(\"Argument passed in must be a single String of 12 bytes or a string of 24 hex characters\");\n\n    buf = buffer(arg);\n  }\n  else if(/number|undefined/.test(typeof arg)) {\n    buf = buffer(generate(arg));\n  }\n\n  Object.defineProperty(this, \"id\", {\n    enumerable: true,\n    get: function() { return String.fromCharCode.apply(this, buf); }\n  });\n  Object.defineProperty(this, \"str\", {\n    get: function() { return buf.map(hex.bind(this, 2)).join(''); }\n  });\n}\nmodule.exports = ObjectID;\nObjectID.generate = generate;\nObjectID.default = ObjectID;\n\n/**\n * Creates an ObjectID from a second based number, with the rest of the ObjectID zeroed out. Used for comparisons or sorting the ObjectID.\n *\n * @param {Number} time an integer number representing a number of seconds.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromTime = function(time){\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n  return new ObjectID(hex(8,time)+\"0000000000000000\");\n};\n\n/**\n * Creates an ObjectID from a hex string representation of an ObjectID.\n *\n * @param {String} hexString create a ObjectID from a passed in 24 byte hexstring.\n * @return {ObjectID} return the created ObjectID\n * @api public\n */\nObjectID.createFromHexString = function(hexString) {\n  if(!ObjectID.isValid(hexString))\n    throw new Error(\"Invalid ObjectID hex string\");\n\n  return new ObjectID(hexString);\n};\n\n/**\n * Checks if a value is a valid bson ObjectId\n *\n * @param {String} objectid Can be a 24 byte hex string or an instance of ObjectID.\n * @return {Boolean} return true if the value is a valid bson ObjectID, return false otherwise.\n * @api public\n *\n * THE NATIVE DOCUMENTATION ISN'T CLEAR ON THIS GUY!\n * http://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html#objectid-isvalid\n */\nObjectID.isValid = function(objectid) {\n  if(!objectid || (typeof objectid !== 'string' && (typeof objectid !== 'object' || Array.isArray(objectid) || typeof objectid.toString !== 'function'))) return false;\n\n  //call .toString() to get the hex if we're\n  // working with an instance of ObjectID\n  return /^[0-9A-F]{24}$/i.test(objectid.toString());\n};\n\n/**\n * set a custom machineID\n * \n * @param {String|Number} machineid Can be a string, hex-string or a number\n * @return {void}\n * @api public\n */\nObjectID.setMachineID = function(arg) {\n  var machineID;\n\n  if(typeof arg === \"string\") {\n    // hex string\n    machineID = parseInt(arg, 16);\n   \n    // any string\n    if(isNaN(machineID)) {\n      arg = ('000000' + arg).substr(-7,6);\n\n      machineID = \"\";\n      for(var i = 0;i<6; i++) {\n        machineID += (arg.charCodeAt(i));\n      }\n    }\n  }\n  else if(/number|undefined/.test(typeof arg)) {\n    machineID = arg | 0;\n  }\n\n  MACHINE_ID = (machineID & 0xFFFFFF);\n}\n\n/**\n * get the machineID\n * \n * @return {number}\n * @api public\n */\nObjectID.getMachineID = function() {\n  return MACHINE_ID;\n}\n\nObjectID.prototype = {\n  _bsontype: 'ObjectID',\n  constructor: ObjectID,\n\n  /**\n   * Return the ObjectID id as a 24 byte hex string representation\n   *\n   * @return {String} return the 24 byte hex string representation.\n   * @api public\n   */\n  toHexString: function() {\n    return this.str;\n  },\n\n  /**\n   * Compares the equality of this ObjectID with `otherID`.\n   *\n   * @param {Object} other ObjectID instance to compare against.\n   * @return {Boolean} the result of comparing two ObjectID's\n   * @api public\n   */\n  equals: function (other){\n    return !!other && this.str === other.toString();\n  },\n\n  /**\n   * Returns the generation date (accurate up to the second) that this ID was generated.\n   *\n   * @return {Date} the generation date\n   * @api public\n   */\n  getTimestamp: function(){\n    return new Date(parseInt(this.str.substr(0,8), 16) * 1000);\n  }\n};\n\nfunction next() {\n  return index = (index+1) % 0xFFFFFF;\n}\n\nfunction generate(time) {\n  if (typeof time !== 'number')\n    time = Date.now()/1000;\n\n  //keep it in the ring!\n  time = parseInt(time, 10) % 0xFFFFFFFF;\n\n  //FFFFFFFF FFFFFF FFFF FFFFFF\n  return hex(8,time) + hex(6,MACHINE_ID) + hex(4,pid) + hex(6,next());\n}\n\nfunction hex(length, n) {\n  n = n.toString(16);\n  return (n.length===length)? n : \"00000000\".substring(n.length, length) + n;\n}\n\nfunction buffer(str) {\n  var i=0,out=[];\n\n  if(str.length===24)\n    for(;i<24; out.push(parseInt(str[i]+str[i+1], 16)),i+=2);\n\n  else if(str.length===12)\n    for(;i<12; out.push(str.charCodeAt(i)),i++);\n\n  return out;\n}\n\nvar inspect = (Symbol && Symbol.for('nodejs.util.inspect.custom')) || 'inspect';\n\n/**\n * Converts to a string representation of this Id.\n *\n * @return {String} return the 24 byte hex string representation.\n * @api private\n */\nObjectID.prototype[inspect] = function() { return \"ObjectID(\"+this+\")\" };\nObjectID.prototype.toJSON = ObjectID.prototype.toHexString;\nObjectID.prototype.toString = ObjectID.prototype.toHexString;\n","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\tvar nativeCodeString = '[native code]';\n\n\tfunction classNames() {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg)) {\n\t\t\t\tif (arg.length) {\n\t\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\t\tif (inner) {\n\t\t\t\t\t\tclasses.push(inner);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\t\t\tclasses.push(arg.toString());\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n","'use strict';\nconst os = require('os');\n\nconst extractPathRegex = /\\s+at.*(?:\\(|\\s)(.*)\\)?/;\nconst pathRegex = /^(?:(?:(?:node|(?:internal\\/[\\w/]*|.*node_modules\\/(?:babel-polyfill|pirates)\\/.*)?\\w+)\\.js:\\d+:\\d+)|native)/;\nconst homeDir = typeof os.homedir === 'undefined' ? '' : os.homedir();\n\nmodule.exports = (stack, options) => {\n\toptions = Object.assign({pretty: false}, options);\n\n\treturn stack.replace(/\\\\/g, '/')\n\t\t.split('\\n')\n\t\t.filter(line => {\n\t\t\tconst pathMatches = line.match(extractPathRegex);\n\t\t\tif (pathMatches === null || !pathMatches[1]) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst match = pathMatches[1];\n\n\t\t\t// Electron\n\t\t\tif (\n\t\t\t\tmatch.includes('.app/Contents/Resources/electron.asar') ||\n\t\t\t\tmatch.includes('.app/Contents/Resources/default_app.asar')\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn !pathRegex.test(match);\n\t\t})\n\t\t.filter(line => line.trim() !== '')\n\t\t.map(line => {\n\t\t\tif (options.pretty) {\n\t\t\t\treturn line.replace(extractPathRegex, (m, p1) => m.replace(p1, p1.replace(homeDir, '~')));\n\t\t\t}\n\n\t\t\treturn line;\n\t\t})\n\t\t.join('\\n');\n};\n","'use strict';\n\nmodule.exports = (string, count = 1, options) => {\n\toptions = {\n\t\tindent: ' ',\n\t\tincludeEmptyLines: false,\n\t\t...options\n\t};\n\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof string}\\``\n\t\t);\n\t}\n\n\tif (typeof count !== 'number') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof count}\\``\n\t\t);\n\t}\n\n\tif (typeof options.indent !== 'string') {\n\t\tthrow new TypeError(\n\t\t\t`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof options.indent}\\``\n\t\t);\n\t}\n\n\tif (count === 0) {\n\t\treturn string;\n\t}\n\n\tconst regex = options.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n\n\treturn string.replace(regex, options.indent.repeat(count));\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar invariant = function(condition, format, a, b, c, d, e, f) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  }\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error(\n        'Minified exception occurred; use the non-minified dev environment ' +\n        'for the full error message and additional helpful warnings.'\n      );\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(\n        format.replace(/%s/g, function() { return args[argIndex++]; })\n      );\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n};\n\nmodule.exports = invariant;\n","'use strict';\nconst AggregateError = require('aggregate-error');\n\nmodule.exports = async (\n\titerable,\n\tmapper,\n\t{\n\t\tconcurrency = Infinity,\n\t\tstopOnError = true\n\t} = {}\n) => {\n\treturn new Promise((resolve, reject) => {\n\t\tif (typeof mapper !== 'function') {\n\t\t\tthrow new TypeError('Mapper function is required');\n\t\t}\n\n\t\tif (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {\n\t\t\tthrow new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t\t}\n\n\t\tconst result = [];\n\t\tconst errors = [];\n\t\tconst iterator = iterable[Symbol.iterator]();\n\t\tlet isRejected = false;\n\t\tlet isIterableDone = false;\n\t\tlet resolvingCount = 0;\n\t\tlet currentIndex = 0;\n\n\t\tconst next = () => {\n\t\t\tif (isRejected) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextItem = iterator.next();\n\t\t\tconst index = currentIndex;\n\t\t\tcurrentIndex++;\n\n\t\t\tif (nextItem.done) {\n\t\t\t\tisIterableDone = true;\n\n\t\t\t\tif (resolvingCount === 0) {\n\t\t\t\t\tif (!stopOnError && errors.length !== 0) {\n\t\t\t\t\t\treject(new AggregateError(errors));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolvingCount++;\n\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst element = await nextItem.value;\n\t\t\t\t\tresult[index] = await mapper(element, index);\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (stopOnError) {\n\t\t\t\t\t\tisRejected = true;\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t} else {\n\t\t\t\t\t\terrors.push(error);\n\t\t\t\t\t\tresolvingCount--;\n\t\t\t\t\t\tnext();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t};\n\n\t\tfor (let i = 0; i < concurrency; i++) {\n\t\t\tnext();\n\n\t\t\tif (isIterableDone) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t});\n};\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","function promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic – if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexport { clear, createStore, del, delMany, entries, get, getMany, keys, promisifyRequest, set, setMany, update, values };\n"],"names":["indentString","cleanStack","AggregateError","Error","constructor","errors","Array","isArray","TypeError","message","map","error","Object","assign","stack","replace","String","join","super","this","name","defineProperty","value","Symbol","iterator","_errors","module","exports","MACHINE_ID","Math","floor","random","index","ObjectID","parseInt","pid","process","arg","_bsontype","buf","obj","isBuffer","length","prototype","slice","call","isValid","buffer","test","generate","enumerable","get","fromCharCode","apply","hex","bind","time","Date","now","n","toString","substring","str","i","out","push","charCodeAt","default","createFromTime","createFromHexString","hexString","objectid","setMachineID","machineID","isNaN","substr","getMachineID","toHexString","equals","other","getTimestamp","inspect","for","toJSON","hasOwn","hasOwnProperty","classNames","classes","arguments","argType","inner","includes","key","os","extractPathRegex","pathRegex","homeDir","homedir","options","pretty","split","filter","line","pathMatches","match","trim","m","p1","string","count","indent","includeEmptyLines","regex","repeat","condition","format","a","b","c","d","e","f","undefined","args","argIndex","framesToPop","async","iterable","mapper","concurrency","Infinity","stopOnError","Promise","resolve","reject","Number","isSafeInteger","result","isRejected","isIterableDone","resolvingCount","currentIndex","next","nextItem","done","element","_extends","target","source","promisifyRequest","request","oncomplete","onsuccess","onabort","onerror","defaultGetStoreFunc","defaultGetStore","dbName","storeName","indexedDB","open","onupgradeneeded","createObjectStore","dbp","txMode","callback","then","db","transaction","objectStore","createStore","customStore","store","set","put","del","delete"],"sourceRoot":""}