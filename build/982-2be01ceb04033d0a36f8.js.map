{"version":3,"file":"build/982-2be01ceb04033d0a36f8.js","mappings":"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","sources":["file:///home/runner/work/bemuse/bemuse/packages/bms/lib/bms/chart.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/bms/headers.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/bms/objects.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/compiler/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/keysounds/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/notes/channels.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/notes/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/notes/note.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/positioning/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/reader/getReaderOptionsFromFilename.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/reader/index.web.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/reader/types.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/song-info/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/spacing/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/speedcore/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/speedcore/segment.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/time-signatures/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/timing/index.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/util/lodash.js","file:///home/runner/work/bemuse/bemuse/packages/bms/lib/util/match.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BMSChart = void 0;\nvar headers_1 = require(\"./headers\");\nvar objects_1 = require(\"./objects\");\nvar time_signatures_1 = require(\"../time-signatures\");\n/**\n * A BMSChart holds information about a particular BMS notechart.\n * Note that a BMSChart does not contain any information about `#RANDOM`,\n * as they are already processed after compilation.\n *\n * There is not many useful things you can do with a BMSChart other than\n * accessing the header fields and objects inside it.\n *\n * To extract information from a BMSChart,\n * please look at the documentation of higher-level classes,\n * such as {Keysounds}, {Notes}, and {Timing}.\n */\nvar BMSChart = /** @class */ (function () {\n    function BMSChart() {\n        /**\n         * {BMSHeaders} representing the BMS-specific headers of this notechart\n         */\n        this.headers = new headers_1.BMSHeaders();\n        /**\n         * {BMSObjects} representing all objects of this notechart\n         */\n        this.objects = new objects_1.BMSObjects();\n        /**\n         * {TimeSignatures} representing the time signature information in this chart\n         */\n        this.timeSignatures = new time_signatures_1.TimeSignatures();\n    }\n    /**\n     * Public: Converts measure number and fraction into beat.\n     * A single beat is equivalent to a quarter note in common time signature.\n     *\n     * @param {number} measure representing the measure number, starting from 0\n     * @param {number} fraction representing the fraction inside that measure, from 0 to 1\n     */\n    BMSChart.prototype.measureToBeat = function (measure, fraction) {\n        return this.timeSignatures.measureToBeat(measure, fraction);\n    };\n    return BMSChart;\n}());\nexports.BMSChart = BMSChart;\n//# sourceMappingURL=chart.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BMSHeaders = void 0;\n/**\n * A BMSHeader holds the header information in a BMS file, such as\n * `#TITLE`, `#ARTIST`, or `#BPM`.\n *\n * You get retrieve a header using the `get()` method:\n *\n * ```js\n * chart.headers.get('title')\n * ```\n *\n * For some header fields that may contain multiple values, such as `#SUBTITLE`,\n * you can get them all using `getAll()`:\n *\n * ```js\n * chart.headers.getAll()\n * ```\n */\nvar BMSHeaders = /** @class */ (function () {\n    function BMSHeaders() {\n        this._data = {};\n        this._dataAll = {};\n    }\n    /**\n     * Iterates through each header field using a callback function.\n     * @param callback will be called for each header field\n     */\n    BMSHeaders.prototype.each = function (callback) {\n        for (var i in this._data) {\n            callback(i, this._data[i]);\n        }\n    };\n    /**\n     * Retrieves the header field’s latest value.\n     * @param name field’s name\n     * @return the field’s latest value\n     */\n    BMSHeaders.prototype.get = function (name) {\n        return this._data[name.toLowerCase()];\n    };\n    /**\n     * Retrieves the header field’s values.\n     * This is useful when a header field is specified multiple times.\n     * @param name field’s name\n     */\n    BMSHeaders.prototype.getAll = function (name) {\n        return this._dataAll[name.toLowerCase()];\n    };\n    /**\n     * Sets the header field’s value.\n     * @param name field’s name\n     * @param value field’s value\n     */\n    BMSHeaders.prototype.set = function (name, value) {\n        var key = name.toLowerCase();\n        this._data[key] = value;\n        (this._dataAll[key] || (this._dataAll[key] = [])).push(value);\n    };\n    return BMSHeaders;\n}());\nexports.BMSHeaders = BMSHeaders;\n//# sourceMappingURL=headers.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BMSObjects = void 0;\n/**\n * BMSObjects holds a collection of objects inside a BMS notechart.\n */\nvar BMSObjects = /** @class */ (function () {\n    function BMSObjects() {\n        this._objects = [];\n    }\n    /**\n     * Adds a new object to this collection.\n     * If an object already exists on the same channel and position,\n     * the object is replaced (except for autokeysound tracks).\n     * @param object the object to add\n     */\n    BMSObjects.prototype.add = function (object) {\n        if (object.channel !== '01') {\n            for (var i = 0; i < this._objects.length; i++) {\n                var test = this._objects[i];\n                if (test.channel === object.channel &&\n                    test.measure === object.measure &&\n                    test.fraction === object.fraction) {\n                    this._objects[i] = object;\n                    return;\n                }\n            }\n        }\n        this._objects.push(object);\n    };\n    /**\n     * Returns an array of all objects.\n     */\n    BMSObjects.prototype.all = function () {\n        return this._objects.slice();\n    };\n    /**\n     * Returns a sorted array of all objects.\n     */\n    BMSObjects.prototype.allSorted = function () {\n        var list = this.all();\n        list.sort(function (a, b) {\n            return a.measure + a.fraction - (b.measure + b.fraction);\n        });\n        return list;\n    };\n    return BMSObjects;\n}());\nexports.BMSObjects = BMSObjects;\n//# sourceMappingURL=objects.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.compile = void 0;\n// Public: A module that takes a string representing the BMS notechart,\n// parses it, and compiles into a {BMSChart}.\n/* module */\nvar match_1 = require(\"../util/match\");\nvar chart_1 = require(\"../bms/chart\");\nvar matchers = {\n    bms: {\n        random: /^#RANDOM\\s+(\\d+)$/i,\n        if: /^#IF\\s+(\\d+)$/i,\n        endif: /^#ENDIF$/i,\n        timeSignature: /^#(\\d\\d\\d)02:(\\S*)$/,\n        channel: /^#(?:EXT\\s+#)?(\\d\\d\\d)(\\S\\S):(\\S*)$/,\n        header: /^#(\\w+)(?:\\s+(\\S.*))?$/,\n    },\n    dtx: {\n        random: /^#RANDOM\\s+(\\d+)$/i,\n        if: /^#IF\\s+(\\d+)$/i,\n        endif: /^#ENDIF$/i,\n        timeSignature: /^#(\\d\\d\\d)02:\\s*(\\S*)$/,\n        channel: /^#(?:EXT\\s+#)?(\\d\\d\\d)(\\S\\S):\\s*(\\S*)$/,\n        header: /^#(\\w+):(?:\\s+(\\S.*))?$/,\n    },\n};\n/**\n * Reads the string representing the BMS notechart, parses it,\n * and compiles into a {BMSChart}.\n * @param text the BMS notechart\n * @param options additional parser options\n */\nfunction compile(text, options) {\n    options = options || {};\n    var chart = new chart_1.BMSChart();\n    var rng = options.rng ||\n        function (max) {\n            return 1 + Math.floor(Math.random() * max);\n        };\n    var matcher = (options.format && matchers[options.format]) || matchers.bms;\n    var randomStack = [];\n    var skipStack = [false];\n    var result = {\n        headerSentences: 0,\n        channelSentences: 0,\n        controlSentences: 0,\n        skippedSentences: 0,\n        malformedSentences: 0,\n        /**\n         * The resulting chart\n         */\n        chart: chart,\n        /**\n         * Warnings found during compilation\n         */\n        warnings: [],\n    };\n    eachLine(text, function (text, lineNumber) {\n        var flow = true;\n        if (text.charAt(0) !== '#')\n            return;\n        (0, match_1.match)(text)\n            .when(matcher.random, function (m) {\n            result.controlSentences += 1;\n            randomStack.push(rng(+m[1]));\n        })\n            .when(matcher.if, function (m) {\n            result.controlSentences += 1;\n            skipStack.push(randomStack[randomStack.length - 1] !== +m[1]);\n        })\n            .when(matcher.endif, function (m) {\n            result.controlSentences += 1;\n            skipStack.pop();\n        })\n            .else(function () {\n            flow = false;\n        });\n        if (flow)\n            return;\n        var skipped = skipStack[skipStack.length - 1];\n        (0, match_1.match)(text)\n            .when(matcher.timeSignature, function (m) {\n            result.channelSentences += 1;\n            if (!skipped)\n                chart.timeSignatures.set(+m[1], +m[2]);\n        })\n            .when(matcher.channel, function (m) {\n            result.channelSentences += 1;\n            if (!skipped)\n                handleChannelSentence(+m[1], m[2], m[3], lineNumber);\n        })\n            .when(matcher.header, function (m) {\n            result.headerSentences += 1;\n            if (!skipped)\n                chart.headers.set(m[1], m[2]);\n        })\n            .else(function () {\n            warn(lineNumber, 'Invalid command');\n        });\n    });\n    return result;\n    function handleChannelSentence(measure, channel, string, lineNumber) {\n        var items = Math.floor(string.length / 2);\n        if (items === 0)\n            return;\n        for (var i = 0; i < items; i++) {\n            var value = string.substr(i * 2, 2);\n            var fraction = i / items;\n            if (value === '00')\n                continue;\n            chart.objects.add({\n                measure: measure,\n                fraction: fraction,\n                value: value,\n                channel: channel,\n                lineNumber: lineNumber,\n            });\n        }\n    }\n    function warn(lineNumber, message) {\n        result.warnings.push({\n            lineNumber: lineNumber,\n            message: message,\n        });\n    }\n}\nexports.compile = compile;\nfunction eachLine(text, callback) {\n    text\n        .split(/\\r\\n|\\r|\\n/)\n        .map(function (line) {\n        return line.trim();\n    })\n        .forEach(function (line, index) {\n        callback(line, index + 1);\n    });\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\n/**\n * Public: The `bms` package is a library for working with rhythm game data.\n *\n * Although this library’s name suggests that it is for BMS file format,\n * almost every part can be used standalone.\n *\n * This package contains:\n *\n * - __Modules that reads and parses BMS files:__\n *\n *   - {Reader} reads the BMS file from a {Buffer}, detects the character set\n *     and decodes the buffer using that character set into a {String}.\n *   - {Compiler} reads the BMS source from a {String}, and converts into\n *     {BMSChart}, an internal representation of a BMS notechart.\n *\n * - __Classes for representing a BMS notechart.__\n *   These module stores the data as close to the BMS file format as possible.\n *\n *   Almost no musical interpretation is made.\n *   For example, a BPM change is simply represented using a\n *   BMSObject with `channel` = `03` or `08`.\n *\n *   - {BMSChart} is composed of {BMSHeaders}, {BMSObjects}, and {TimeSignatures}.\n *   - {BMSHeaders} represents the header sentences in a BMS file.\n *   - {BMSObjects} represents the objects in a BMS file.\n *   - {BMSObject} represents a single object.\n *\n * - __Classes that represent different aspects of a notechart.__\n *   Instance of these classes may be created from a {BMSChart},\n *   but they can be used in a standalone manner as well.\n *\n *   This makes this library very flexible,\n *   and able to accommodate different formats of notechart.\n *   For example, see the [bmson](https: *github.com/bemusic/bmson) package.\n *\n *   It’s also possible to use these classes in context other than music gaming,\n *   for example, you can use these classes to help building a music player\n *   that requires precise synchronization between beats.\n *\n *   - {TimeSignatures} represents a collection of time signatures\n *     in a musical score, and lets you convert the measure number and fraction\n *     into beat number.\n *   - {Timing} represents the timing information in a musical score,\n *     and provides methods to convert between musical time (beats) and\n *     metric time (seconds).\n *   - {SongInfo} represents the basic song information,\n *     such as title, artist, and genre.\n *   - {Notes} represents the sound objects inside your notechart.\n *   - {Keysounds} represents a mapping between keysound ID and filename.\n *   - {Positioning} represents a mapping between beat and in-game position.\n *     Some rhythm game lets chart author control the amount of scrolling\n *     per beat. In StepMania 5, this is called the scroll segments.\n *   - {Spacing} represents a mapping between beat and note spacing.\n *     Some rhythm game lets chart author change the note spacing (HI-SPEED)\n *     dynamically. In StepMania 5, this is called the speed segments.\n *\n * - __Low-level utility classes:__\n *\n *   - {Speedcore} represents a linear animation.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Compiler = exports.Reader = void 0;\nvar Reader = __importStar(require(\"./reader\"));\nexports.Reader = Reader;\nvar Compiler = __importStar(require(\"./compiler\"));\nexports.Compiler = Compiler;\n__exportStar(require(\"./reader/types\"), exports);\n__exportStar(require(\"./bms/chart\"), exports);\n__exportStar(require(\"./bms/headers\"), exports);\n__exportStar(require(\"./bms/objects\"), exports);\n__exportStar(require(\"./speedcore\"), exports);\n__exportStar(require(\"./time-signatures\"), exports);\n__exportStar(require(\"./notes\"), exports);\n__exportStar(require(\"./timing\"), exports);\n__exportStar(require(\"./song-info\"), exports);\n__exportStar(require(\"./keysounds\"), exports);\n__exportStar(require(\"./positioning\"), exports);\n__exportStar(require(\"./spacing\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\n// Public: A module that exposes {Keysounds}\n/* module */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Keysounds = void 0;\nvar lodash_1 = require(\"../util/lodash\");\nvar chart_1 = require(\"../bms/chart\");\n/**\n * A simple mapping between keysounds ID and the file name.\n * ## Example\n *\n * If you have a BMS like this:\n *\n * ```\n * #WAVAA cat.wav\n * ```\n *\n * Having parsed it using a {Compiler} into a {BMSChart},\n * you can create a {Keysounds} using `fromBMSChart()`:\n *\n * ```js\n * var keysounds = Keysounds.fromBMSChart(bmsChart)\n * ```\n *\n * Then you can retrieve the filename using `.get()`:\n *\n * ```js\n * keysounds.get('aa') // => 'cat.wav'\n * ```\n */\nvar Keysounds = /** @class */ (function () {\n    function Keysounds(map) {\n        this._map = map;\n    }\n    /**\n     * Returns the keysound file at the specified ID.\n     * @param id the two-character keysound ID\n     * @returns the sound filename\n     */\n    Keysounds.prototype.get = function (id) {\n        return this._map[id.toLowerCase()];\n    };\n    /**\n     * Returns an array of unique filenames in this Keysounds object.\n     * @returns filenames array\n     */\n    Keysounds.prototype.files = function () {\n        return (0, lodash_1.uniq)((0, lodash_1.values)(this._map));\n    };\n    /**\n     * Returns a mapping from keysound ID to keysound filename.\n     *\n     * **Warning:** This method returns the internal data structure used\n     * in this Keysounds object. Do not mutate!\n     */\n    Keysounds.prototype.all = function () {\n        return this._map;\n    };\n    /**\n     * Constructs a new {Keysounds} object from a {BMSChart}.\n     * @param chart\n     */\n    Keysounds.fromBMSChart = function (chart) {\n        void chart_1.BMSChart;\n        var map = {};\n        chart.headers.each(function (name, value) {\n            var match = name.match(/^wav(\\S\\S)$/i);\n            if (!match)\n                return;\n            map[match[1].toLowerCase()] = value;\n        });\n        return new Keysounds(map);\n    };\n    return Keysounds;\n}());\nexports.Keysounds = Keysounds;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IIDX_DP_LANDMINE = exports.IIDX_P1_LANDMINE = exports.IIDX_DP = exports.IIDX_P1 = void 0;\nexports.IIDX_P1 = {\n    '11': '1',\n    '12': '2',\n    '13': '3',\n    '14': '4',\n    '15': '5',\n    '18': '6',\n    '19': '7',\n    '16': 'SC',\n};\nexports.IIDX_DP = {\n    '11': '1',\n    '12': '2',\n    '13': '3',\n    '14': '4',\n    '15': '5',\n    '18': '6',\n    '19': '7',\n    '16': 'SC',\n    '21': '8',\n    '22': '9',\n    '23': '10',\n    '24': '11',\n    '25': '12',\n    '28': '13',\n    '29': '14',\n    '26': 'SC2',\n};\nexports.IIDX_P1_LANDMINE = {\n    D1: '1',\n    D2: '2',\n    D3: '3',\n    D4: '4',\n    D5: '5',\n    D8: '6',\n    D9: '7',\n    D6: 'SC',\n};\nexports.IIDX_DP_LANDMINE = {\n    D1: '1',\n    D2: '2',\n    D3: '3',\n    D4: '4',\n    D5: '5',\n    D8: '6',\n    D9: '7',\n    D6: 'SC',\n    E1: '8',\n    E2: '9',\n    E3: '10',\n    E4: '11',\n    E5: '12',\n    E8: '13',\n    E9: '14',\n    E6: 'SC2',\n};\n//# sourceMappingURL=channels.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Notes = void 0;\nvar note_1 = require(\"./note\");\nvar invariant_1 = __importDefault(require(\"invariant\"));\nvar ChannelMapping = __importStar(require(\"./channels\"));\nvar chart_1 = require(\"../bms/chart\");\n/**\n * A Notes holds the {Note} objects in the game.\n * A note object may or may not be playable.\n *\n * ## Example\n *\n * If you have a BMS like this:\n *\n * ```\n * #00111:AA\n * ```\n *\n * Having parsed it using a {Compiler} into a {BMSChart},\n * you can create a {Notes} using `fromBMSChart()`:\n *\n * ```js\n * var notes = Notes.fromBMSChart(bmsChart)\n * ```\n *\n * Then you can get all notes using `.all()` method\n *\n * ```js\n * notes.all()\n * ```\n */\nvar Notes = /** @class */ (function () {\n    /**\n     * @param {BMSNote[]} notes An array of Note objects\n     */\n    function Notes(notes) {\n        notes.forEach(note_1.Note);\n        this._notes = notes;\n    }\n    /**\n     * Returns the number of notes in this object,\n     * counting both playable and non-playable notes.\n     */\n    Notes.prototype.count = function () {\n        return this._notes.length;\n    };\n    /**\n     * Returns an Array of all notes.\n     */\n    Notes.prototype.all = function () {\n        return this._notes.slice();\n    };\n    /**\n     * Creates a Notes object from a BMSChart.\n     * @param chart the chart to process\n     * @param options options\n     */\n    Notes.fromBMSChart = function (chart, options) {\n        void chart_1.BMSChart;\n        options = options || {};\n        var mapping = options.mapping || Notes.CHANNEL_MAPPING.IIDX_P1;\n        var builder = new BMSNoteBuilder(chart, { mapping: mapping });\n        return builder.build();\n    };\n    Notes.CHANNEL_MAPPING = ChannelMapping;\n    return Notes;\n}());\nexports.Notes = Notes;\nvar BMSNoteBuilder = /** @class */ (function () {\n    function BMSNoteBuilder(chart, options) {\n        this._chart = chart;\n        (0, invariant_1.default)(options.mapping, 'Expected options.mapping');\n        (0, invariant_1.default)(typeof options.mapping === 'object', 'options.mapping must be object');\n        this._mapping = options.mapping;\n        this._notes = [];\n        this._activeLN = {};\n        this._lastNote = {};\n        this._lnObj = (this._chart.headers.get('lnobj') || '').toLowerCase();\n        this._channelMapping = this._mapping;\n        this._objects = this._chart.objects.allSorted();\n    }\n    BMSNoteBuilder.prototype.build = function () {\n        var _this = this;\n        this._objects.forEach(function (object) {\n            _this._handle(object);\n        });\n        return new Notes(this._notes);\n    };\n    BMSNoteBuilder.prototype._handle = function (object) {\n        if (object.channel === '01') {\n            this._handleNormalNote(object);\n        }\n        else {\n            switch (object.channel.charAt(0).toUpperCase()) {\n                case '1':\n                case '2':\n                case 'D':\n                case 'E':\n                    this._handleNormalNote(object);\n                    break;\n                case '5':\n                case '6':\n                    this._handleLongNote(object);\n                    break;\n            }\n        }\n    };\n    BMSNoteBuilder.prototype._handleNormalNote = function (object) {\n        var channel = this._normalizeChannel(object.channel);\n        var beat = this._getBeat(object);\n        if (object.value.toLowerCase() === this._lnObj) {\n            if (this._lastNote[channel]) {\n                this._lastNote[channel].endBeat = beat;\n            }\n        }\n        else {\n            var note = {\n                beat: beat,\n                endBeat: undefined,\n                keysound: object.value,\n                column: this._getColumn(channel),\n            };\n            this._lastNote[channel] = note;\n            this._notes.push(note);\n        }\n    };\n    BMSNoteBuilder.prototype._handleLongNote = function (object) {\n        var channel = this._normalizeChannel(object.channel);\n        var beat = this._getBeat(object);\n        if (this._activeLN[channel]) {\n            var note = this._activeLN[channel];\n            note.endBeat = beat;\n            this._notes.push(note);\n            delete this._activeLN[channel];\n        }\n        else {\n            this._activeLN[channel] = {\n                beat: beat,\n                keysound: object.value,\n                column: this._getColumn(channel),\n            };\n        }\n    };\n    BMSNoteBuilder.prototype._getBeat = function (object) {\n        return this._chart.measureToBeat(object.measure, object.fraction);\n    };\n    BMSNoteBuilder.prototype._getColumn = function (channel) {\n        return this._channelMapping[channel];\n    };\n    BMSNoteBuilder.prototype._normalizeChannel = function (channel) {\n        return channel.replace(/^5/, '1').replace(/^6/, '2');\n    };\n    return BMSNoteBuilder;\n}());\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Note = void 0;\nvar data_structure_1 = __importDefault(require(\"data-structure\"));\nexports.Note = (0, data_structure_1.default)({\n    beat: 'number',\n    endBeat: data_structure_1.default.maybe('number'),\n    column: data_structure_1.default.maybe('string'),\n    keysound: 'string',\n});\n//# sourceMappingURL=note.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Positioning = void 0;\nvar speedcore_1 = require(\"../speedcore\");\nvar chart_1 = require(\"../bms/chart\");\n/**\n * A Positioning represents the relation between song beats and\n * display position, and provides a way to convert between them.\n *\n * In some rhythm games, the amount of scrolling per beat may be different.\n * StepMania’s `#SCROLL` segments is an example.\n */\nvar Positioning = /** @class */ (function () {\n    /**\n     * Constructs a Positioning from the given `segments`.\n     * @param segments\n     */\n    function Positioning(segments) {\n        this._speedcore = new speedcore_1.Speedcore(segments);\n    }\n    /**\n     * Returns the scrolling speed at specified beat.\n     * @param beat the beat number\n     */\n    Positioning.prototype.speed = function (beat) {\n        return this._speedcore.dx(beat);\n    };\n    /**\n     * Returns the total elapsed scrolling amount at specified beat.\n     * @param beat the beat number\n     */\n    Positioning.prototype.position = function (beat) {\n        return this._speedcore.x(beat);\n    };\n    /**\n     * Creates a {Positioning} object from the {BMSChart}.\n     * @param {BMSChart} chart A {BMSChart} to construct a {Positioning} from\n     */\n    Positioning.fromBMSChart = function (chart) {\n        void chart_1.BMSChart;\n        var segments = [];\n        var x = 0;\n        segments.push({\n            t: 0,\n            x: x,\n            dx: 1,\n            inclusive: true,\n        });\n        chart.objects.allSorted().forEach(function (object) {\n            if (object.channel === 'SC') {\n                var beat = chart.measureToBeat(object.measure, object.fraction);\n                var dx = +chart.headers.get('scroll' + object.value);\n                if (isNaN(dx))\n                    return;\n                var previous = segments[segments.length - 1];\n                x += (beat - previous.t) * previous.dx;\n                if (beat === 0 && segments.length === 1) {\n                    segments[0].dx = dx;\n                }\n                else {\n                    segments.push({\n                        t: beat,\n                        x: x,\n                        dx: dx,\n                        inclusive: true,\n                    });\n                }\n            }\n        });\n        return new Positioning(segments);\n    };\n    return Positioning;\n}());\nexports.Positioning = Positioning;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getReaderOptionsFromFilename = void 0;\n/**\n * Given the filename, returns the reader options.\n * @param {string} filename\n */\nfunction getReaderOptionsFromFilename(filename) {\n    var forceEncoding;\n    if (filename.match(/\\.sjis\\.\\w+$/i)) {\n        forceEncoding = 'Shift-JIS';\n    }\n    if (filename.match(/\\.euc_kr\\.\\w+$/i)) {\n        forceEncoding = 'EUC-KR';\n    }\n    if (filename.match(/\\.utf8\\.\\w+$/i)) {\n        forceEncoding = 'UTF-8';\n    }\n    return { forceEncoding: forceEncoding };\n}\nexports.getReaderOptionsFromFilename = getReaderOptionsFromFilename;\n//# sourceMappingURL=getReaderOptionsFromFilename.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getReaderOptionsFromFilename = exports.readAsync = exports.read = void 0;\nvar chardet = require(\"bemuse-chardet/bemuse-chardet\");\nfunction read(buffer) {\n    throw new Error('Synchronous read unsupported in browser!');\n}\nexports.read = read;\nfunction readAsync() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var buffer = args[0];\n    var options = args[1];\n    var charset = (options && options.forceEncoding) || chardet.detect(buffer);\n    return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onload = function () {\n            resolve(reader.result);\n        };\n        reader.onerror = function () {\n            reject(new Error('cannot read it'));\n        };\n        reader.readAsText(new Blob([buffer]), charset);\n    });\n}\nexports.readAsync = readAsync;\nvar getReaderOptionsFromFilename_1 = require(\"./getReaderOptionsFromFilename\");\nObject.defineProperty(exports, \"getReaderOptionsFromFilename\", { enumerable: true, get: function () { return getReaderOptionsFromFilename_1.getReaderOptionsFromFilename; } });\n//# sourceMappingURL=index.web.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SongInfo = void 0;\nvar match_1 = require(\"../util/match\");\nvar lodash_1 = require(\"../util/lodash\");\nvar chart_1 = require(\"../bms/chart\");\n/**\n * A SongInfo represents the song info, such as title, artist, genre.\n *\n * ## Example\n *\n * If you have a BMS like this:\n *\n * ```\n * #TITLE Exargon [HYPER]\n * ```\n *\n * Having parsed it using a {Compiler} into a {BMSChart},\n * you can create a {SongInfo} using `fromBMSChart()`:\n *\n * ```js\n * var info = SongInfo.fromBMSChart(bmsChart)\n * ```\n *\n * Then you can query the song information by accessing its properties.\n *\n * ```js\n * info.title     // => 'Exargon'\n * info.subtitles // => ['HYPER']\n * ```\n */\nvar SongInfo = /** @class */ (function () {\n    /**\n     * Constructs a SongInfo with given data\n     * @param info the properties to set on this new instance\n     */\n    function SongInfo(info) {\n        /** the song title */\n        this.title = 'NO TITLE';\n        /** the song artist */\n        this.artist = 'NO ARTIST';\n        /** the song genre */\n        this.genre = 'NO GENRE';\n        /**\n         * the song's subtitles, one line per element.\n         * The subtitle may be used to represent the difficulty name,\n         * such as NORMAL, HYPER, ANOTHER.\n         * @type {string[]}\n         */\n        this.subtitles = [];\n        /**\n         * the song's other artists, one artist per element.\n         * @type {string[]}\n         */\n        this.subartists = [];\n        /**\n         * the difficulty.\n         * Meaning of the number is same as BMS's [`#DIFFICULTY`](http:*hitkey.nekokan.dyndns.info/cmds.htm#DIFFICULTY) header.\n         *\n         * | difficulty | meaning  |\n         * | ----------:|:--------:|\n         * |          1 | BEGINNER |\n         * |          2 | NORMAL   |\n         * |          3 | HYPER    |\n         * |          4 | ANOTHER  |\n         * |          5 | INSANE   |\n         */\n        this.difficulty = 0;\n        /**\n         * the level of the song.\n         * When converted from a BMS chart, this is the value of `#PLAYLEVEL` header.\n         */\n        this.level = 0;\n        if (info)\n            (0, lodash_1.assign)(this, info);\n    }\n    /**\n     * Constructs a new {SongInfo} object from a {BMSChart}.\n     * @param chart A {BMSChart} to construct a {SongInfo} from\n     */\n    SongInfo.fromBMSChart = function (chart) {\n        void chart_1.BMSChart;\n        var info = {};\n        var title = chart.headers.get('title');\n        var artist = chart.headers.get('artist');\n        var genre = chart.headers.get('genre');\n        var difficulty = +chart.headers.get('difficulty') || 0;\n        var level = +chart.headers.get('playlevel') || 0;\n        var subtitles = chart.headers.getAll('subtitle');\n        var subartists = chart.headers.getAll('subartist');\n        if (typeof title === 'string' && !subtitles) {\n            var extractSubtitle = function (m) {\n                title = m[1];\n                subtitles = [m[2]];\n            };\n            (0, match_1.match)(title)\n                .when(/^(.*\\S)\\s*-(.+?)-$/, extractSubtitle)\n                .when(/^(.*\\S)\\s*～(.+?)～$/, extractSubtitle)\n                .when(/^(.*\\S)\\s*\\((.+?)\\)$/, extractSubtitle)\n                .when(/^(.*\\S)\\s*\\[(.+?)\\]$/, extractSubtitle)\n                .when(/^(.*\\S)\\s*<(.+?)>$/, extractSubtitle);\n        }\n        if (title)\n            info.title = title;\n        if (artist)\n            info.artist = artist;\n        if (genre)\n            info.genre = genre;\n        if (subtitles)\n            info.subtitles = subtitles;\n        if (subartists)\n            info.subartists = subartists;\n        if (difficulty)\n            info.difficulty = difficulty;\n        if (level)\n            info.level = level;\n        return new SongInfo(info);\n    };\n    return SongInfo;\n}());\nexports.SongInfo = SongInfo;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Spacing = void 0;\nvar speedcore_1 = require(\"../speedcore\");\nvar chart_1 = require(\"../bms/chart\");\n/**\n * Public: A Spacing represents the relation between song beats and\n * notes spacing.\n *\n * In some rhythm games, such as Pump It Up!,\n * the speed (note spacing factor) may be adjusted by the notechart.\n * StepMania’s `#SPEED` segments is an example.\n */\nvar Spacing = /** @class */ (function () {\n    /**\n     * Constructs a Spacing from the given `segments`.\n     */\n    function Spacing(segments) {\n        if (segments.length > 0) {\n            this._speedcore = new speedcore_1.Speedcore(segments);\n        }\n    }\n    /**\n     * Returns the note spacing factor at the specified beat.\n     * @param beat the beat\n     */\n    Spacing.prototype.factor = function (beat) {\n        if (this._speedcore) {\n            return this._speedcore.x(beat);\n        }\n        else {\n            return 1;\n        }\n    };\n    /**\n     * Creates a {Spacing} object from the {BMSChart}.\n     *\n     * ## `#SPEED` and `#xxxSP`\n     *\n     * Speed is defined as keyframes. These keyframes will be linearly interpolated.\n     *\n     * ```\n     * #SPEED01 1.0\n     * #SPEED02 2.0\n     *\n     * #001SP:01010202\n     * ```\n     *\n     * In this example, the note spacing factor will gradually change\n     * from 1.0x at beat 1 to 2.0x at beat 2.\n     *\n     * Returns a {Spacing} object\n     *\n     * @param {BMSChart} chart the chart\n     */\n    Spacing.fromBMSChart = function (chart) {\n        void chart_1.BMSChart;\n        var segments = [];\n        chart.objects.allSorted().forEach(function (object) {\n            if (object.channel === 'SP') {\n                var beat = chart.measureToBeat(object.measure, object.fraction);\n                var factor = +chart.headers.get('speed' + object.value);\n                if (isNaN(factor))\n                    return;\n                if (segments.length > 0) {\n                    var previous = segments[segments.length - 1];\n                    previous.dx = (factor - previous.x) / (beat - previous.t);\n                }\n                segments.push({\n                    t: beat,\n                    x: factor,\n                    dx: 0,\n                    inclusive: true,\n                });\n            }\n        });\n        if (segments.length > 0) {\n            segments.unshift({\n                t: 0,\n                x: segments[0].x,\n                dx: 0,\n                inclusive: true,\n            });\n        }\n        return new Spacing(segments);\n    };\n    return Spacing;\n}());\nexports.Spacing = Spacing;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Speedcore = void 0;\nvar segment_1 = require(\"./segment\");\n/**\n * Speedcore is a small internally-used library.\n * A Speedcore represents a single dimensional keyframed linear motion\n * (as in equation x = f(t)), and is useful when working\n * with BPM changes ({Timing}), note spacing factor ({Spacing}), or scrolling\n * segments ({Positioning}).\n * A Speedcore is constructed from an array of Segments.\n *\n * A {Segment} is defined as `{ t, x, dx }`, such that:\n *\n * * speedcore.x(segment.t) = segment.x\n * * speedcore.t(segment.x) = segment.t\n * * speedcore.x(segment.t + dt) = segment.x + (segment.dx / dt)\n *\n *\n * ## Explanation\n *\n * One way to think of these segments is to think about tempo changes, where:\n *\n * * `t` is the elapsed time (in seconds) since song start.\n * * `x` is the elapsed beat since song start.\n * * `dx` is the amount of `x` increase per `t`. In this case, it has the\n *   unit of beats per second.\n *\n * For example, consider a song that starts at 140 BPM.\n * 32 beats later, the tempo changes to 160 BPM.\n * 128 beats later (at beat 160), the tempo reverts to 140 BPM.\n *\n * We can derive three segments:\n *\n * 1. At time 0, we are at beat 0, and moving at 2.333 beats per second.\n * 2. At 13.714s, we are at beat 32, moving at 2.667 beats per second.\n * 3. At 61.714s, we are at beat 160, moving at 2.333 beats per second.\n *\n * This maps out to this data structure:\n *\n * ```js\n * [ [0]: { t:  0.000,  x:   0,  dx: 2.333,  inclusive: true },\n *   [1]: { t: 13.714,  x:  32,  dx: 2.667,  inclusive: true },\n *   [2]: { t: 61.714,  x: 160,  dx: 2.333,  inclusive: true } ]\n * ```\n *\n * With this data, it is possible to find out the value of `x` at any given `t`.\n *\n * For example, to answer the question, “what is the beat number at 30s?”\n * First, we find the segment with maximum value of `t < 30`, and we get\n * the segment `[1]`.\n *\n * We calculate `segment.x + (t - segment.t) * segment.dx`.\n * The result beat number is (32 + (30 - 13.714) * 2.667) = 75.435.\n *\n * We can also perform the reverse calculation in a similar way, by reversing\n * the equation.\n *\n * Interestingly, we can use these segments to represent the effect of\n * both BPM changes and STOP segments in the same array.\n * For example, a 150-BPM song with a 2-beat stop in the 32nd beat\n * can be represented like this:\n *\n * ```js\n * [ [0]: { t:  0.0,  x:  0,  dx: 2.5,  inclusive: true  },\n *   [1]: { t: 12.8,  x: 32,  dx: 0,    inclusive: true  },\n *   [2]: { t: 13.6,  x: 32,  dx: 2.5,  inclusive: false } ]\n * ```\n */\nvar Speedcore = /** @class */ (function () {\n    /**\n     * Constructs a new `Speedcore` from given segments.\n     */\n    function Speedcore(segments) {\n        segments.forEach(segment_1.Segment);\n        this._segments = segments;\n    }\n    Speedcore.prototype._reached = function (index, targetFn, position) {\n        if (index >= this._segments.length)\n            return false;\n        var segment = this._segments[index];\n        var target = targetFn(segment);\n        return segment.inclusive ? position >= target : position > target;\n    };\n    Speedcore.prototype._segmentAt = function (targetFn, position) {\n        for (var i = 0; i < this._segments.length; i++) {\n            if (!this._reached(i + 1, targetFn, position))\n                return this._segments[i];\n        }\n        throw new Error('Unable to find a segment matching a criteria (this should never happen)!');\n    };\n    Speedcore.prototype.segmentAtX = function (x) {\n        return this._segmentAt(X, x);\n    };\n    Speedcore.prototype.segmentAtT = function (t) {\n        return this._segmentAt(T, t);\n    };\n    /**\n     * Calculates the _t_, given _x_.\n     */\n    Speedcore.prototype.t = function (x) {\n        var segment = this.segmentAtX(x);\n        return segment.t + (x - segment.x) / (segment.dx || 1);\n    };\n    /**\n     * Calculates the _x_, given _t_.\n     * @param {number} t\n     */\n    Speedcore.prototype.x = function (t) {\n        var segment = this.segmentAtT(t);\n        return segment.x + (t - segment.t) * segment.dx;\n    };\n    /**\n     * Finds the _dx_, given _t_.\n     * @param {number} t\n     */\n    Speedcore.prototype.dx = function (t) {\n        var segment = this.segmentAtT(t);\n        return segment.dx;\n    };\n    return Speedcore;\n}());\nexports.Speedcore = Speedcore;\nvar T = function (segment) { return segment.t; };\nvar X = function (segment) { return segment.x; };\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Segment = void 0;\nvar data_structure_1 = __importDefault(require(\"data-structure\"));\nexports.Segment = (0, data_structure_1.default)({\n    t: 'number',\n    x: 'number',\n    dx: 'number',\n});\n//# sourceMappingURL=segment.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TimeSignatures = void 0;\n/**\n * A TimeSignatures is a collection of time signature values\n * index by measure number.\n *\n * The measure number starts from 0.\n * By default, each measure has a measure size of 1\n * (which represents the common 4/4 time signature)\n *\n * ## Example\n *\n * If you have a BMS like this:\n *\n * ```\n * #00102:0.75\n * #00103:1.25\n * ```\n *\n * Having parsed it using a {Compiler} into a {BMSChart},\n * you can access the {TimeSignatures} object:\n *\n * ```js\n * var timeSignatures = bmsChart.timeSignatures\n * ```\n *\n * Note that you can also use the constructor\n * to create a {TimeSignatures} from scratch.\n *\n * One of the most useful use case of this class\n * is to convert the measure and fraction into beat number.\n *\n * ```js\n * timeSignatures.measureToBeat(0, 0.000) // =>  0.0\n * timeSignatures.measureToBeat(0, 0.500) // =>  2.0\n * timeSignatures.measureToBeat(1, 0.000) // =>  4.0\n * timeSignatures.measureToBeat(1, 0.500) // =>  5.5\n * timeSignatures.measureToBeat(2, 0.000) // =>  7.0\n * timeSignatures.measureToBeat(2, 0.500) // =>  9.5\n * timeSignatures.measureToBeat(3, 0.000) // => 12.0\n * ```\n */\nvar TimeSignatures = /** @class */ (function () {\n    function TimeSignatures() {\n        this._values = {};\n    }\n    /**\n     * Sets the size of a specified measure.\n     * @param measure the measure number, starting from 0\n     * @param value the measure size.\n     *  For example, a size of 1.0 represents a common 4/4 time signature,\n     *  whereas a size of 0.75 represents the 3/4 or 6/8 time signature.\n     */\n    TimeSignatures.prototype.set = function (measure, value) {\n        this._values[measure] = value;\n    };\n    /**\n     * Retrieves the size of a specified measure.\n     * @param measure representing the measure number.\n     * @returns the size of the measure.\n     *  By default, a measure has a size of 1.\n     */\n    TimeSignatures.prototype.get = function (measure) {\n        return this._values[measure] || 1;\n    };\n    /**\n     * Retrieves the number of beats in a specified measure.\n     *\n     * Since one beat is equivalent to a quarter note in 4/4 time signature,\n     * this is equivalent to `(timeSignatures.get(measure) * 4)`.\n     * @param measure representing the measure number.\n     * @returns the size of the measure in beats.\n     */\n    TimeSignatures.prototype.getBeats = function (measure) {\n        return this.get(measure) * 4;\n    };\n    /**\n     * Converts a measure number and a fraction inside that measure\n     * into the beat number.\n     *\n     * @param measure the measure number.\n     * @param fraction the fraction of a measure,\n     * @returns the number of beats since measure 0.\n     */\n    TimeSignatures.prototype.measureToBeat = function (measure, fraction) {\n        var sum = 0;\n        for (var i = 0; i < measure; i++)\n            sum += this.getBeats(i);\n        return sum + this.getBeats(measure) * fraction;\n    };\n    return TimeSignatures;\n}());\nexports.TimeSignatures = TimeSignatures;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Timing = void 0;\nvar speedcore_1 = require(\"../speedcore\");\nvar lodash_1 = require(\"../util/lodash\");\nvar chart_1 = require(\"../bms/chart\");\nvar precedence = { bpm: 1, stop: 2 };\n/**\n * A Timing represents the timing information of a musical score.\n * A Timing object provides facilities to synchronize between\n * metric time (seconds) and musical time (beats).\n *\n * A Timing are created from a series of actions:\n *\n * - BPM changes.\n * - STOP action.\n */\nvar Timing = /** @class */ (function () {\n    /**\n     * Constructs a Timing with an initial BPM and specified actions.\n     *\n     * Generally, you would use `Timing.fromBMSChart` to create an instance\n     * from a BMSChart, but the constructor may also be used in other situations\n     * unrelated to the BMS file format. (e.g. bmson package)\n     */\n    function Timing(initialBPM, actions) {\n        var state = { bpm: initialBPM, beat: 0, seconds: 0 };\n        var segments = [];\n        segments.push({\n            t: 0,\n            x: 0,\n            dx: state.bpm / 60,\n            bpm: state.bpm,\n            inclusive: true,\n        });\n        actions = actions.slice();\n        actions.sort(function (a, b) {\n            return a.beat - b.beat || precedence[a.type] - precedence[b.type];\n        });\n        actions.forEach(function (action) {\n            var beat = action.beat;\n            var seconds = state.seconds + ((beat - state.beat) * 60) / state.bpm;\n            switch (action.type) {\n                case 'bpm':\n                    state.bpm = action.bpm;\n                    segments.push({\n                        t: seconds,\n                        x: beat,\n                        dx: state.bpm / 60,\n                        bpm: state.bpm,\n                        inclusive: true,\n                    });\n                    break;\n                case 'stop':\n                    segments.push({\n                        t: seconds,\n                        x: beat,\n                        dx: 0,\n                        bpm: state.bpm,\n                        inclusive: true,\n                    });\n                    seconds += ((action.stopBeats || 0) * 60) / state.bpm;\n                    segments.push({\n                        t: seconds,\n                        x: beat,\n                        dx: state.bpm / 60,\n                        bpm: state.bpm,\n                        inclusive: false,\n                    });\n                    break;\n                default:\n                    throw new Error('Unrecognized segment object!');\n            }\n            state.beat = beat;\n            state.seconds = seconds;\n        });\n        this._speedcore = new speedcore_1.Speedcore(segments);\n        this._eventBeats = (0, lodash_1.uniq)((0, lodash_1.map)(actions, function (action) { return action.beat; }));\n    }\n    /**\n     * Convert the given beat into seconds.\n     * @param {number} beat\n     */\n    Timing.prototype.beatToSeconds = function (beat) {\n        return this._speedcore.t(beat);\n    };\n    /**\n     * Convert the given second into beats.\n     * @param {number} seconds\n     */\n    Timing.prototype.secondsToBeat = function (seconds) {\n        return this._speedcore.x(seconds);\n    };\n    /**\n     * Returns the BPM at the specified beat.\n     * @param {number} beat\n     */\n    Timing.prototype.bpmAtBeat = function (beat) {\n        return this._speedcore.segmentAtX(beat).bpm;\n    };\n    /**\n     * Returns an array representing the beats where there are events.\n     */\n    Timing.prototype.getEventBeats = function () {\n        return this._eventBeats;\n    };\n    /**\n     * Creates a Timing instance from a BMSChart.\n     * @param {BMSChart} chart\n     */\n    Timing.fromBMSChart = function (chart) {\n        void chart_1.BMSChart;\n        var actions = [];\n        chart.objects.all().forEach(function (object) {\n            var bpm;\n            var beat = chart.measureToBeat(object.measure, object.fraction);\n            if (object.channel === '03') {\n                bpm = parseInt(object.value, 16);\n                actions.push({ type: 'bpm', beat: beat, bpm: bpm });\n            }\n            else if (object.channel === '08') {\n                bpm = +chart.headers.get('bpm' + object.value);\n                if (!isNaN(bpm))\n                    actions.push({ type: 'bpm', beat: beat, bpm: bpm });\n            }\n            else if (object.channel === '09') {\n                var stopBeats = +chart.headers.get('stop' + object.value) / 48;\n                actions.push({ type: 'stop', beat: beat, stopBeats: stopBeats });\n            }\n        });\n        return new Timing(+chart.headers.get('bpm') || 60, actions);\n    };\n    return Timing;\n}());\nexports.Timing = Timing;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assign = exports.values = exports.map = exports.uniq = void 0;\n// A subset of lodash that we actually use.\nvar lodash_uniq_1 = __importDefault(require(\"lodash.uniq\"));\nexports.uniq = lodash_uniq_1.default;\nvar lodash_map_1 = __importDefault(require(\"lodash.map\"));\nexports.map = lodash_map_1.default;\nvar lodash_values_1 = __importDefault(require(\"lodash.values\"));\nexports.values = lodash_values_1.default;\nvar lodash_assign_1 = __importDefault(require(\"lodash.assign\"));\nexports.assign = lodash_assign_1.default;\n//# sourceMappingURL=lodash.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.match = void 0;\nfunction match(text) {\n    var matched = false;\n    return {\n        when: function (pattern, callback) {\n            if (matched)\n                return this;\n            var match = text.match(pattern);\n            if (match) {\n                matched = true;\n                callback(match);\n            }\n            return this;\n        },\n        else: function (callback) {\n            if (matched)\n                return this;\n            callback();\n        },\n    };\n}\nexports.match = match;\n//# sourceMappingURL=match.js.map"],"names":["Object","defineProperty","exports","value","BMSChart","headers_1","objects_1","time_signatures_1","this","headers","BMSHeaders","objects","BMSObjects","timeSignatures","TimeSignatures","prototype","measureToBeat","measure","fraction","_data","_dataAll","each","callback","i","get","name","toLowerCase","getAll","set","key","push","_objects","add","object","channel","length","test","all","slice","allSorted","list","sort","a","b","compile","match_1","chart_1","matchers","bms","random","if","endif","timeSignature","header","dtx","text","options","chart","rng","max","Math","floor","matcher","format","randomStack","skipStack","result","headerSentences","channelSentences","controlSentences","skippedSentences","malformedSentences","warnings","split","map","line","trim","forEach","index","eachLine","lineNumber","flow","charAt","match","when","m","pop","else","skipped","string","items","substr","handleChannelSentence","message","warn","__createBinding","create","o","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","__setModuleDefault","v","__importStar","mod","hasOwnProperty","call","__exportStar","p","Compiler","Reader","Keysounds","lodash_1","_map","id","files","uniq","values","fromBMSChart","IIDX_DP_LANDMINE","IIDX_P1_LANDMINE","IIDX_DP","IIDX_P1","D1","D2","D3","D4","D5","D8","D9","D6","E1","E2","E3","E4","E5","E8","E9","E6","__importDefault","Notes","note_1","invariant_1","ChannelMapping","notes","Note","_notes","count","mapping","CHANNEL_MAPPING","BMSNoteBuilder","build","_chart","default","_mapping","_activeLN","_lastNote","_lnObj","_channelMapping","_this","_handle","_handleNormalNote","toUpperCase","_handleLongNote","_normalizeChannel","beat","_getBeat","endBeat","note","keysound","column","_getColumn","replace","data_structure_1","maybe","Positioning","speedcore_1","segments","_speedcore","Speedcore","speed","dx","position","x","t","inclusive","isNaN","previous","getReaderOptionsFromFilename","filename","forceEncoding","readAsync","read","chardet","buffer","Error","args","_i","arguments","charset","detect","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsText","Blob","getReaderOptionsFromFilename_1","SongInfo","info","title","artist","genre","subtitles","subartists","difficulty","level","assign","extractSubtitle","Spacing","factor","unshift","segment_1","Segment","_segments","_reached","targetFn","segment","target","_segmentAt","segmentAtX","X","segmentAtT","T","_values","getBeats","sum","Timing","precedence","bpm","stop","initialBPM","actions","state","seconds","type","action","stopBeats","_eventBeats","beatToSeconds","secondsToBeat","bpmAtBeat","getEventBeats","parseInt","lodash_uniq_1","lodash_map_1","lodash_values_1","lodash_assign_1","matched","pattern"],"sourceRoot":""}