{"version":3,"sources":["file:///home/circleci/bemuse/node_modules/webpack/buildin/amd-define.js","file:///home/circleci/bemuse/node_modules/webpack/buildin/amd-options.js","file:///home/circleci/bemuse/node_modules/baconjs/dist/Bacon.js"],"names":["module","exports","Error","__webpack_amd_options__","global","__WEBPACK_AMD_DEFINE_RESULT__","_slice","Array","prototype","slice","Bacon","toString","version","Exception","this","nop","former","x","_","assert","message","condition","assertObservableIsProperty","_isObservable","_isProperty","assertFunction","f","isFunction","isArray","xs","isObservable","extend","target","length","arguments","i","prop","inherit","child","parent","hasProp","hasOwnProperty","ctor","key","call","symbol","Symbol","indexOf","indexWhere","head","always","negate","empty","tail","filter","filtered","push","map","result","each","Object","toArray","contains","id","last","all","undefined","any","without","y","remove","splice","fold","seed","flatMap","ys","concat","cached","value","None","_isNone","bind","fn","me","apply","obj","recursionDepth","results","error","UpdateBarrier","rootEvent","waiterObs","waiters","aftersStack","aftersStackHeight","flushed","ensureStackHeight","h","afterTransaction","obs","stackIndexForThisObs","containsObs","processAfters","aftersList","stackSizeAtStart","topOfStack","topAfters","index","_topAfters$index","after","callSuccess","flushWaiters","deps","obsId","obsWaiters","flushDepsOf","dep","internalDeps","whenDoneWith","hasWaiters","inTransaction","event","context","args","flush","currentEventId","wrappedSubscribe","sink","unsubd","shouldUnsub","doUnsub","unsub","dispatcher","subscribe","noMore","Source","sync","lazy","queue","ConsumingSource","BufferingSource","Desc","method","_isSource","markEnded","ended","consume","mayHave","hasAtLeast","flatten","shift","c","values","isTrigger","s","_isEventStream","fromObservable","_isDesc","findDeps","describe","ref","_len","_key","withDesc","desc","withMethodCallSupport","wrapped","_len2","_key2","methodName","makeFunctionArgs","makeFunction_","partiallyApplied","applied","_len3","_key3","toFieldExtractor","parts","split","partFuncs","fieldValue","toSimpleExtractor","isFieldKey","charAt","_len4","_key4","makeFunction","convertArgsToFunction","sampled","sampledBy","p","_ref","_ref2","toCombinator","toFieldKey","left","right","Some","_isSome","getOrElse","get","forEach","isDefined","inspect","toOption","v","more","eventIdCounter","Event","Next","valueF","eager","_isNext","valueInternal","Initial","End","_isEvent","isEvent","isEnd","isInitial","isNext","isError","hasValue","log","fmap","_isInitial","toNext","initialEvent","nextEvent","endEvent","toEvent","idCounter","registerObs","Observable","initialDesc","CompositeUnsubscribe","ss","unsubscribe","unsubscribed","subscriptions","starting","add","Dispatcher","_subscribe","_handleEvent","handleEvent","pushing","prevError","unsubSrc","EventStream","handler","subscribeInternal","onValue","onValues","onError","onEnd","name","_name","withDescription","assign","subscription","_this2","iterable","count","hasSubscribers","removeSub","pushIt","pushToSubscriptions","tmp","len","sub","unsubscribeFromSource","_this","toProperty","initValue_","initValue","disp","Property","initSent","subbed","reply","sendInit","toEventStream","withHandler","never","when","sources","pats","patterns","patSources","pat","constantToFunction","ixs","triggerFound","j","ix","k","needsBarrier","containsDuplicateDeps","resultStream","triggers","ends","match","i1","cannotSync","source","cannotMatch","nonFlattened","trigger","part","unsubAll","flushLater","flushWhileTriggers","pop","events","i2","e","_p","observables","state","checkObservable","PropertyDispatcher","property","current","currentValueRootId","propertyEnded","groupSimultaneous","_len5","streams","_key5","_len6","_key6","maybeSubSource","_this3","dispatchingId","valId","changes","_this4","assertNoArguments","_this5","constant","fromBinder","binder","eventTransformer","unbound","shouldUnbind","unbind","unbinder","_len7","_key7","_len8","_key8","argumentsToObservables","argumentsToObservablesAndFunction","combineAsArray","stream","_len9","_key9","combineWith","_argumentsToObservablesAndFunction","combine","other","combinator","withStateMachine","initState","fromF","newState","outputs","output","equals","a","b","skipDuplicates","isEqual","prev","object","isNone","awaiting","not","and","or","scheduler","setTimeout","d","setInterval","clearInterval","clearTimeout","now","Date","getTime","bufferWithTime","delay","bufferWithTimeOrCount","Number","MAX_VALUE","bufferWithCount","flushOrSchedule","buffer","schedule","onInput","onFlush","scheduled","end","valuesToPush","_this6","delayMs","_this7","_len10","_key10","once","unsubRight","unsubLeft","addPropertyInitValueToStream","concatAll","justInitValue","flatMap_","makeSpawner","flatMapFirst","makeObservable","root","firstOnly","limit","rootDep","childDeps","composite","spawn","unsubMe","checkQueue","checkEnd","__","unsubRoot","Bus","subscribeAll","guardedSink","flatMapWithConcurrencyLimit","_len11","_key11","flatMapConcat","later","bufferingThrottle","minimumInterval","newSink","cloneArray","subscribeInput","input","_this8","unsubscribeInput","plug","_this9","assertObservable","rootPush","pushQueue","liftCallback","callback","_len12","_key12","fromCallback","_len13","_key13","fromNodeCallback","_len14","_key14","combineTemplate","template","setValue","ctxStack","mkContext","containsObservables","constructor","compile","funcs","applyStreamValue","newContext","pushContext","compileTemplate","constantValue","resultProperty","rootContext","mapEnd","skipErrors","takeUntil","stopper","endMarker","_event$value","data","flatMapLatest","delayChanges","debounce","debounceImmediate","decode","cases","scan","_this10","acc","initHandled","next","diff","start","prevTuple","tuple","doAction","doEnd","doError","doLog","_len15","_key15","console","endOnError","_len16","_key16","errors","take","first","mapError","flatMapError","err","flatScan","updated","sampler","thisSource","samplerSource","sample","interval","_len17","_key17","reduce","eventMethods","valueAndEnd","fromEventTarget","eventName","_findHandlerMethods","pair","methodPair","addListener","findHandlerMethods","fromEvent","fromPoll","poll","fromPromise","promise","abort","bound","then","done","groupBy","keyF","limitF","src","similar","limited","fromArray","assertArray","pushNeeded","holdWhen","valve","onHold","bufferedValues","srcIsEnded","subscribed","endIfBothEnded","toSend","$","asEventStream","selector","_this11","on","off","jQuery","Zepto","lastEvent","_len18","_key18","merge","assertEventStream","mergeAll","sinks","unsubBoth","repeatedly","repeat","generator","flag","subscribeNext","retry","options","retries","retriesDone","isRetryable","finished","valueStream","pause","sequentially","skip","skipUntil","starter","started","skipWhile","ok","_len19","_key19","slidingWindow","n","minValues","window","spies","running","spy","ESObservable","observable","startWith","takeWhile","_len20","_key20","throttle","firstToPromise","PromiseCtr","_this12","Promise","resolve","reject","toPromise","update","initial","lateBindFirst","_len22","_key22","_len21","_key21","Function","zipAsArray","_len23","_key23","zipWith","_len24","_key24","_len25","_key25","observablesAndFunction","zip","observerOrOnNext","onComplete","observer","complete","closed","cancel","toESObservable","fromESObservable","_observable","__webpack_require__"],"mappings":"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","file":"build/vendors~app~game~playground~sync~test-493d84f8b38ce1fdad97.js","sourcesContent":["module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","(function() {\nvar _slice = Array.prototype.slice;\nvar Bacon = {\n  toString: function () {\n    return \"Bacon\";\n  }\n};\n\nBacon.version = '0.7.95';\n\nvar Exception = (typeof global !== \"undefined\" && global !== null ? global : this).Error;\nvar nop = function () {};\nvar latter = function (_, x) {\n  return x;\n};\nvar former = function (x, _) {\n  return x;\n};\nvar cloneArray = function (xs) {\n  return xs.slice(0);\n};\nvar assert = function (message, condition) {\n  if (!condition) {\n    throw new Exception(message);\n  }\n};\nvar assertObservableIsProperty = function (x) {\n  if ((x != null ? x._isObservable : void 0) && !(x != null ? x._isProperty : void 0)) {\n    throw new Exception(\"Observable is not a Property : \" + x);\n  }\n};\nvar assertEventStream = function (event) {\n  if (!(event != null ? event._isEventStream : void 0)) {\n    throw new Exception(\"not an EventStream : \" + event);\n  }\n};\n\nvar assertObservable = function (event) {\n  if (!(event != null ? event._isObservable : void 0)) {\n    throw new Exception(\"not an Observable : \" + event);\n  }\n};\nvar assertFunction = function (f) {\n  return assert(\"not a function : \" + f, _.isFunction(f));\n};\nvar isArray = Array.isArray || function (xs) {\n  return xs instanceof Array;\n};\nvar isObservable = function (x) {\n  return x && x._isObservable;\n};\nvar assertArray = function (xs) {\n  if (!isArray(xs)) {\n    throw new Exception(\"not an array : \" + xs);\n  }\n};\nvar assertNoArguments = function (args) {\n  return assert(\"no arguments supported\", args.length === 0);\n};\nvar assertString = function (x) {\n  if (typeof x === \"string\") {\n    throw new Exception(\"not a string : \" + x);\n  }\n};\n\nvar extend = function (target) {\n  var length = arguments.length;\n  for (var i = 1; 1 < length ? i < length : i > length; 1 < length ? i++ : i--) {\n    for (var prop in arguments[i]) {\n      target[prop] = arguments[i][prop];\n    }\n  }\n  return target;\n};\n\nvar inherit = function (child, parent) {\n  var hasProp = ({}).hasOwnProperty;\n  var ctor = function () {};\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n  for (var key in parent) {\n    if (hasProp.call(parent, key)) {\n      child[key] = parent[key];\n    }\n  }\n  return child;\n};\n\nvar symbol = function (key) {\n  if (typeof Symbol !== \"undefined\" && Symbol[key]) {\n    return Symbol[key];\n  } else if (typeof Symbol !== \"undefined\" && typeof Symbol[\"for\"] === \"function\") {\n    return Symbol[key] = Symbol[\"for\"](key);\n  } else {\n    return \"@@\" + key;\n  }\n};\n\nvar _ = {\n  indexOf: (function () {\n    if (Array.prototype.indexOf) {\n      return function (xs, x) {\n        return xs.indexOf(x);\n      };\n    } else {\n      return function (xs, x) {\n        for (var i = 0, y; i < xs.length; i++) {\n          y = xs[i];\n          if (x === y) {\n            return i;\n          }\n        }\n        return -1;\n      };\n    }\n  })(),\n  indexWhere: function (xs, f) {\n    for (var i = 0, y; i < xs.length; i++) {\n      y = xs[i];\n      if (f(y)) {\n        return i;\n      }\n    }\n    return -1;\n  },\n  head: function (xs) {\n    return xs[0];\n  },\n  always: function (x) {\n    return function () {\n      return x;\n    };\n  },\n  negate: function (f) {\n    return function (x) {\n      return !f(x);\n    };\n  },\n  empty: function (xs) {\n    return xs.length === 0;\n  },\n  tail: function (xs) {\n    return xs.slice(1, xs.length);\n  },\n  filter: function (f, xs) {\n    var filtered = [];\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (f(x)) {\n        filtered.push(x);\n      }\n    }\n    return filtered;\n  },\n  map: function (f, xs) {\n    return (function () {\n      var result = [];\n      for (var i = 0, x; i < xs.length; i++) {\n        x = xs[i];\n        result.push(f(x));\n      }\n      return result;\n    })();\n  },\n  each: function (xs, f) {\n    for (var key in xs) {\n      if (Object.prototype.hasOwnProperty.call(xs, key)) {\n        var value = xs[key];\n        f(key, value);\n      }\n    }\n  },\n  toArray: function (xs) {\n    return isArray(xs) ? xs : [xs];\n  },\n  contains: function (xs, x) {\n    return _.indexOf(xs, x) !== -1;\n  },\n  id: function (x) {\n    return x;\n  },\n  last: function (xs) {\n    return xs[xs.length - 1];\n  },\n  all: function (xs) {\n    var f = arguments.length <= 1 || arguments[1] === undefined ? _.id : arguments[1];\n\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (!f(x)) {\n        return false;\n      }\n    }\n    return true;\n  },\n  any: function (xs) {\n    var f = arguments.length <= 1 || arguments[1] === undefined ? _.id : arguments[1];\n\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      if (f(x)) {\n        return true;\n      }\n    }\n    return false;\n  },\n  without: function (x, xs) {\n    return _.filter(function (y) {\n      return y !== x;\n    }, xs);\n  },\n  remove: function (x, xs) {\n    var i = _.indexOf(xs, x);\n    if (i >= 0) {\n      return xs.splice(i, 1);\n    }\n  },\n  fold: function (xs, seed, f) {\n    for (var i = 0, x; i < xs.length; i++) {\n      x = xs[i];\n      seed = f(seed, x);\n    }\n    return seed;\n  },\n  flatMap: function (f, xs) {\n    return _.fold(xs, [], function (ys, x) {\n      return ys.concat(f(x));\n    });\n  },\n  cached: function (f) {\n    var value = None;\n    return function () {\n      if (typeof value !== \"undefined\" && value !== null ? value._isNone : undefined) {\n        value = f();\n        f = undefined;\n      }\n      return value;\n    };\n  },\n  bind: function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  },\n  isFunction: function (f) {\n    return typeof f === \"function\";\n  },\n  toString: function (obj) {\n    var internals, key, value;\n    var hasProp = ({}).hasOwnProperty;\n    try {\n      recursionDepth++;\n      if (obj == null) {\n        return \"undefined\";\n      } else if (_.isFunction(obj)) {\n        return \"function\";\n      } else if (isArray(obj)) {\n        if (recursionDepth > 5) {\n          return \"[..]\";\n        }\n        return \"[\" + _.map(_.toString, obj).toString() + \"]\";\n      } else if ((obj != null ? obj.toString : void 0) != null && obj.toString !== Object.prototype.toString) {\n        return obj.toString();\n      } else if (typeof obj === \"object\") {\n        if (recursionDepth > 5) {\n          return \"{..}\";\n        }\n        internals = (function () {\n          var results = [];\n          for (key in obj) {\n            if (!hasProp.call(obj, key)) continue;\n            value = (function () {\n              var error;\n              try {\n                return obj[key];\n              } catch (error) {\n                return error;\n              }\n            })();\n            results.push(_.toString(key) + \":\" + _.toString(value));\n          }\n          return results;\n        })();\n        return \"{\" + internals + \"}\";\n      } else {\n        return obj;\n      }\n    } finally {\n      recursionDepth--;\n    }\n  }\n};\n\nvar recursionDepth = 0;\n\nBacon._ = _;\n\nvar UpdateBarrier = Bacon.UpdateBarrier = (function () {\n  var rootEvent;\n  var waiterObs = [];\n  var waiters = {};\n  var aftersStack = [];\n  var aftersStackHeight = 0;\n  var flushed = {};\n\n  function ensureStackHeight(h) {\n    if (h <= aftersStackHeight) return;\n    if (!aftersStack[h - 1]) {\n      aftersStack[h - 1] = [[], 0];\n    }\n    aftersStackHeight = h;\n  }\n\n  var afterTransaction = function (obs, f) {\n    if (rootEvent || aftersStack.length) {\n      ensureStackHeight(1);\n      var stackIndexForThisObs = 0;\n      while (stackIndexForThisObs < aftersStackHeight - 1) {\n        if (containsObs(obs, aftersStack[stackIndexForThisObs][0])) {\n          break;\n        }\n        stackIndexForThisObs++;\n      }\n      var listFromStack = aftersStack[stackIndexForThisObs][0];\n      listFromStack.push([obs, f]);\n      if (!rootEvent) {\n        processAfters();\n      }\n    } else {\n        return f();\n      }\n  };\n\n  function containsObs(obs, aftersList) {\n    for (var i = 0; i < aftersList.length; i++) {\n      if (aftersList[i][0].id == obs.id) return true;\n    }\n    return false;\n  }\n\n  function processAfters() {\n    var stackSizeAtStart = aftersStackHeight;\n    if (!stackSizeAtStart) return;\n    while (aftersStackHeight >= stackSizeAtStart) {\n      var topOfStack = aftersStack[aftersStackHeight - 1];\n      if (!topOfStack) throw new Error(\"Unexpected stack top: \" + topOfStack);\n      var topAfters = topOfStack[0];\n      var index = topOfStack[1];\n\n      if (index < topAfters.length) {\n        var _topAfters$index = topAfters[index];\n        var obs = _topAfters$index[0];\n        var after = _topAfters$index[1];\n\n        topOfStack[1]++;\n        ensureStackHeight(aftersStackHeight + 1);\n        var callSuccess = false;\n        try {\n          after();\n          callSuccess = true;\n          while (aftersStackHeight > stackSizeAtStart && aftersStack[aftersStackHeight - 1][0].length == 0) {\n            aftersStackHeight--;\n          }\n        } finally {\n          if (!callSuccess) {\n            aftersStack = [];\n            aftersStackHeight = 0;\n          }\n        }\n      } else {\n          topOfStack[0] = [];\n          topOfStack[1] = 0;\n          break;\n        }\n    }\n  }\n\n  var whenDoneWith = function (obs, f) {\n    if (rootEvent) {\n      var obsWaiters = waiters[obs.id];\n      if (!(typeof obsWaiters !== \"undefined\" && obsWaiters !== null)) {\n        obsWaiters = waiters[obs.id] = [f];\n        return waiterObs.push(obs);\n      } else {\n        return obsWaiters.push(f);\n      }\n    } else {\n      return f();\n    }\n  };\n\n  var flush = function () {\n    while (waiterObs.length > 0) {\n      flushWaiters(0, true);\n    }\n    flushed = {};\n  };\n\n  var flushWaiters = function (index, deps) {\n    var obs = waiterObs[index];\n    var obsId = obs.id;\n    var obsWaiters = waiters[obsId];\n    waiterObs.splice(index, 1);\n    delete waiters[obsId];\n    if (deps && waiterObs.length > 0) {\n      flushDepsOf(obs);\n    }\n    for (var i = 0, f; i < obsWaiters.length; i++) {\n      f = obsWaiters[i];\n      f();\n    }\n  };\n\n  var flushDepsOf = function (obs) {\n    if (flushed[obs.id]) return;\n    var deps = obs.internalDeps();\n    for (var i = 0, dep; i < deps.length; i++) {\n      dep = deps[i];\n      flushDepsOf(dep);\n      if (waiters[dep.id]) {\n        var index = _.indexOf(waiterObs, dep);\n        flushWaiters(index, false);\n      }\n    }\n    flushed[obs.id] = true;\n  };\n\n  var inTransaction = function (event, context, f, args) {\n    if (rootEvent) {\n      return f.apply(context, args);\n    } else {\n      rootEvent = event;\n      try {\n        var result = f.apply(context, args);\n\n        flush();\n      } finally {\n        rootEvent = undefined;\n        processAfters();\n      }\n      return result;\n    }\n  };\n\n  var currentEventId = function () {\n    return rootEvent ? rootEvent.id : undefined;\n  };\n\n  var wrappedSubscribe = function (obs, sink) {\n    var unsubd = false;\n    var shouldUnsub = false;\n    var doUnsub = function () {\n      shouldUnsub = true;\n      return shouldUnsub;\n    };\n    var unsub = function () {\n      unsubd = true;\n      return doUnsub();\n    };\n    doUnsub = obs.dispatcher.subscribe(function (event) {\n      return afterTransaction(obs, function () {\n        if (!unsubd) {\n          var reply = sink(event);\n          if (reply === Bacon.noMore) {\n            return unsub();\n          }\n        }\n      });\n    });\n    if (shouldUnsub) {\n      doUnsub();\n    }\n    return unsub;\n  };\n\n  var hasWaiters = function () {\n    return waiterObs.length > 0;\n  };\n\n  return { whenDoneWith: whenDoneWith, hasWaiters: hasWaiters, inTransaction: inTransaction, currentEventId: currentEventId, wrappedSubscribe: wrappedSubscribe, afterTransaction: afterTransaction };\n})();\n\nfunction Source(obs, sync) {\n  var lazy = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n  this.obs = obs;\n  this.sync = sync;\n  this.lazy = lazy;\n  this.queue = [];\n}\n\nextend(Source.prototype, {\n  _isSource: true,\n\n  subscribe: function (sink) {\n    return this.obs.dispatcher.subscribe(sink);\n  },\n  toString: function () {\n    return this.obs.toString();\n  },\n  markEnded: function () {\n    this.ended = true;\n    return true;\n  },\n  consume: function () {\n    if (this.lazy) {\n      return { value: _.always(this.queue[0]) };\n    } else {\n      return this.queue[0];\n    }\n  },\n  push: function (x) {\n    this.queue = [x];\n    return [x];\n  },\n  mayHave: function () {\n    return true;\n  },\n  hasAtLeast: function () {\n    return this.queue.length;\n  },\n  flatten: true\n});\n\nfunction ConsumingSource() {\n  Source.apply(this, arguments);\n}\n\ninherit(ConsumingSource, Source);\nextend(ConsumingSource.prototype, {\n  consume: function () {\n    return this.queue.shift();\n  },\n  push: function (x) {\n    return this.queue.push(x);\n  },\n  mayHave: function (c) {\n    return !this.ended || this.queue.length >= c;\n  },\n  hasAtLeast: function (c) {\n    return this.queue.length >= c;\n  },\n  flatten: false\n});\n\nfunction BufferingSource(obs) {\n  Source.call(this, obs, true);\n}\n\ninherit(BufferingSource, Source);\nextend(BufferingSource.prototype, {\n  consume: function () {\n    var values = this.queue;\n    this.queue = [];\n    return {\n      value: function () {\n        return values;\n      }\n    };\n  },\n  push: function (x) {\n    return this.queue.push(x.value());\n  },\n  hasAtLeast: function () {\n    return true;\n  }\n});\n\nSource.isTrigger = function (s) {\n  if (s != null ? s._isSource : void 0) {\n    return s.sync;\n  } else {\n    return s != null ? s._isEventStream : void 0;\n  }\n};\n\nSource.fromObservable = function (s) {\n  if (s != null ? s._isSource : void 0) {\n    return s;\n  } else if (s != null ? s._isProperty : void 0) {\n    return new Source(s, false);\n  } else {\n    return new ConsumingSource(s, true);\n  }\n};\n\nfunction Desc(context, method, args) {\n  this.context = context;\n  this.method = method;\n  this.args = args;\n}\n\nextend(Desc.prototype, {\n  _isDesc: true,\n  deps: function () {\n    if (!this.cached) {\n      this.cached = findDeps([this.context].concat(this.args));\n    }\n    return this.cached;\n  },\n  toString: function () {\n    return _.toString(this.context) + \".\" + _.toString(this.method) + \"(\" + _.map(_.toString, this.args) + \")\";\n  }\n});\n\nvar describe = function (context, method) {\n  var ref = context || method;\n  if (ref && ref._isDesc) {\n    return context || method;\n  } else {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return new Desc(context, method, args);\n  }\n};\n\nvar withDesc = function (desc, obs) {\n  obs.desc = desc;\n  return obs;\n};\n\nvar findDeps = function (x) {\n  if (isArray(x)) {\n    return _.flatMap(findDeps, x);\n  } else if (isObservable(x)) {\n    return [x];\n  } else if (typeof x !== \"undefined\" && x !== null ? x._isSource : undefined) {\n    return [x.obs];\n  } else {\n    return [];\n  }\n};\n\nBacon.Desc = Desc;\nBacon.Desc.empty = new Bacon.Desc(\"\", \"\", []);\n\nvar withMethodCallSupport = function (wrapped) {\n  return function (f) {\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (typeof f === \"object\" && args.length) {\n      var context = f;\n      var methodName = args[0];\n      f = function () {\n        return context[methodName].apply(context, arguments);\n      };\n      args = args.slice(1);\n    }\n    return wrapped.apply(undefined, [f].concat(args));\n  };\n};\n\nvar makeFunctionArgs = function (args) {\n  args = Array.prototype.slice.call(args);\n  return makeFunction_.apply(undefined, args);\n};\n\nvar partiallyApplied = function (f, applied) {\n  return function () {\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    return f.apply(undefined, applied.concat(args));\n  };\n};\n\nvar toSimpleExtractor = function (args) {\n  return function (key) {\n    return function (value) {\n      if (!(typeof value !== \"undefined\" && value !== null)) {\n        return;\n      } else {\n        var fieldValue = value[key];\n        if (_.isFunction(fieldValue)) {\n          return fieldValue.apply(value, args);\n        } else {\n          return fieldValue;\n        }\n      }\n    };\n  };\n};\n\nvar toFieldExtractor = function (f, args) {\n  var parts = f.slice(1).split(\".\");\n  var partFuncs = _.map(toSimpleExtractor(args), parts);\n  return function (value) {\n    for (var i = 0, f; i < partFuncs.length; i++) {\n      f = partFuncs[i];\n      value = f(value);\n    }\n    return value;\n  };\n};\n\nvar isFieldKey = function (f) {\n  return typeof f === \"string\" && f.length > 1 && f.charAt(0) === \".\";\n};\n\nvar makeFunction_ = withMethodCallSupport(function (f) {\n  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n\n  if (_.isFunction(f)) {\n    if (args.length) {\n      return partiallyApplied(f, args);\n    } else {\n      return f;\n    }\n  } else if (isFieldKey(f)) {\n    return toFieldExtractor(f, args);\n  } else {\n    return _.always(f);\n  }\n});\n\nvar makeFunction = function (f, args) {\n  return makeFunction_.apply(undefined, [f].concat(args));\n};\n\nvar convertArgsToFunction = function (obs, f, args, method) {\n  if (typeof f !== \"undefined\" && f !== null ? f._isProperty : undefined) {\n    var sampled = f.sampledBy(obs, function (p, s) {\n      return [p, s];\n    });\n    return method.call(sampled, function (_ref) {\n      var p = _ref[0];\n      var s = _ref[1];\n      return p;\n    }).map(function (_ref2) {\n      var p = _ref2[0];\n      var s = _ref2[1];\n      return s;\n    });\n  } else {\n    f = makeFunction(f, args);\n    return method.call(obs, f);\n  }\n};\n\nvar toCombinator = function (f) {\n  if (_.isFunction(f)) {\n    return f;\n  } else if (isFieldKey(f)) {\n    var key = toFieldKey(f);\n    return function (left, right) {\n      return left[key](right);\n    };\n  } else {\n    throw new Exception(\"not a function or a field key: \" + f);\n  }\n};\n\nvar toFieldKey = function (f) {\n  return f.slice(1);\n};\n\nfunction Some(value) {\n  this.value = value;\n}\n\nextend(Some.prototype, {\n  _isSome: true,\n  getOrElse: function () {\n    return this.value;\n  },\n  get: function () {\n    return this.value;\n  },\n  filter: function (f) {\n    if (f(this.value)) {\n      return new Some(this.value);\n    } else {\n      return None;\n    }\n  },\n  map: function (f) {\n    return new Some(f(this.value));\n  },\n  forEach: function (f) {\n    return f(this.value);\n  },\n  isDefined: true,\n  toArray: function () {\n    return [this.value];\n  },\n  inspect: function () {\n    return \"Some(\" + this.value + \")\";\n  },\n  toString: function () {\n    return this.inspect();\n  }\n});\n\nvar None = {\n  _isNone: true,\n  getOrElse: function (value) {\n    return value;\n  },\n  filter: function () {\n    return None;\n  },\n  map: function () {\n    return None;\n  },\n  forEach: function () {},\n  isDefined: false,\n  toArray: function () {\n    return [];\n  },\n  inspect: function () {\n    return \"None\";\n  },\n  toString: function () {\n    return this.inspect();\n  }\n};\n\nvar toOption = function (v) {\n  if ((typeof v !== \"undefined\" && v !== null ? v._isSome : undefined) || (typeof v !== \"undefined\" && v !== null ? v._isNone : undefined)) {\n    return v;\n  } else {\n    return new Some(v);\n  }\n};\n\nBacon.noMore = \"<no-more>\";\nBacon.more = \"<more>\";\n\nvar eventIdCounter = 0;\n\nfunction Event() {\n  this.id = ++eventIdCounter;\n}\n\nEvent.prototype._isEvent = true;\nEvent.prototype.isEvent = function () {\n  return true;\n};\nEvent.prototype.isEnd = function () {\n  return false;\n};\nEvent.prototype.isInitial = function () {\n  return false;\n};\nEvent.prototype.isNext = function () {\n  return false;\n};\nEvent.prototype.isError = function () {\n  return false;\n};\nEvent.prototype.hasValue = function () {\n  return false;\n};\nEvent.prototype.filter = function () {\n  return true;\n};\nEvent.prototype.inspect = function () {\n  return this.toString();\n};\nEvent.prototype.log = function () {\n  return this.toString();\n};\n\nfunction Next(valueF, eager) {\n  if (!(this instanceof Next)) {\n    return new Next(valueF, eager);\n  }\n\n  Event.call(this);\n\n  if (!eager && _.isFunction(valueF) || (valueF != null ? valueF._isNext : void 0)) {\n    this.valueF = valueF;\n    this.valueInternal = void 0;\n  } else {\n    this.valueF = void 0;\n    this.valueInternal = valueF;\n  }\n}\n\ninherit(Next, Event);\n\nNext.prototype.isNext = function () {\n  return true;\n};\nNext.prototype.hasValue = function () {\n  return true;\n};\nNext.prototype.value = function () {\n  var ref;\n  if ((ref = this.valueF) != null ? ref._isNext : void 0) {\n    this.valueInternal = this.valueF.value();\n    this.valueF = void 0;\n  } else if (this.valueF) {\n    this.valueInternal = this.valueF();\n    this.valueF = void 0;\n  }\n  return this.valueInternal;\n};\n\nNext.prototype.fmap = function (f) {\n  var event, value;\n  if (this.valueInternal) {\n    value = this.valueInternal;\n    return this.apply(function () {\n      return f(value);\n    });\n  } else {\n    event = this;\n    return this.apply(function () {\n      return f(event.value());\n    });\n  }\n};\n\nNext.prototype.apply = function (value) {\n  return new Next(value);\n};\nNext.prototype.filter = function (f) {\n  return f(this.value());\n};\nNext.prototype.toString = function () {\n  return _.toString(this.value());\n};\nNext.prototype.log = function () {\n  return this.value();\n};\nNext.prototype._isNext = true;\n\nfunction Initial(valueF, eager) {\n  if (!(this instanceof Initial)) {\n    return new Initial(valueF, eager);\n  }\n  Next.call(this, valueF, eager);\n}\n\ninherit(Initial, Next);\nInitial.prototype._isInitial = true;\nInitial.prototype.isInitial = function () {\n  return true;\n};\nInitial.prototype.isNext = function () {\n  return false;\n};\nInitial.prototype.apply = function (value) {\n  return new Initial(value);\n};\nInitial.prototype.toNext = function () {\n  return new Next(this);\n};\n\nfunction End() {\n  if (!(this instanceof End)) {\n    return new End();\n  }\n  Event.call(this);\n}\n\ninherit(End, Event);\nEnd.prototype.isEnd = function () {\n  return true;\n};\nEnd.prototype.fmap = function () {\n  return this;\n};\nEnd.prototype.apply = function () {\n  return this;\n};\nEnd.prototype.toString = function () {\n  return \"<end>\";\n};\n\nfunction Error(error) {\n  if (!(this instanceof Error)) {\n    return new Error(error);\n  }\n  this.error = error;\n  Event.call(this);\n}\n\ninherit(Error, Event);\nError.prototype.isError = function () {\n  return true;\n};\nError.prototype.fmap = function () {\n  return this;\n};\nError.prototype.apply = function () {\n  return this;\n};\nError.prototype.toString = function () {\n  return \"<error> \" + _.toString(this.error);\n};\n\nBacon.Event = Event;\nBacon.Initial = Initial;\nBacon.Next = Next;\nBacon.End = End;\nBacon.Error = Error;\n\nvar initialEvent = function (value) {\n  return new Initial(value, true);\n};\nvar nextEvent = function (value) {\n  return new Next(value, true);\n};\nvar endEvent = function () {\n  return new End();\n};\nvar toEvent = function (x) {\n  if (x && x._isEvent) {\n    return x;\n  } else {\n    return nextEvent(x);\n  }\n};\n\nvar idCounter = 0;\nvar registerObs = function () {};\n\nfunction Observable(desc) {\n  this.desc = desc;\n  this.id = ++idCounter;\n  this.initialDesc = this.desc;\n}\n\nextend(Observable.prototype, {\n  _isObservable: true,\n\n  subscribe: function (sink) {\n    return UpdateBarrier.wrappedSubscribe(this, sink);\n  },\n\n  subscribeInternal: function (sink) {\n    return this.dispatcher.subscribe(sink);\n  },\n\n  onValue: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.hasValue()) {\n        return f(event.value());\n      }\n    });\n  },\n\n  onValues: function (f) {\n    return this.onValue(function (args) {\n      return f.apply(undefined, args);\n    });\n  },\n\n  onError: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.isError()) {\n        return f(event.error);\n      }\n    });\n  },\n\n  onEnd: function () {\n    var f = makeFunctionArgs(arguments);\n    return this.subscribe(function (event) {\n      if (event.isEnd()) {\n        return f();\n      }\n    });\n  },\n\n  name: function (name) {\n    this._name = name;\n    return this;\n  },\n\n  withDescription: function () {\n    this.desc = describe.apply(undefined, arguments);\n    return this;\n  },\n\n  toString: function () {\n    if (this._name) {\n      return this._name;\n    } else {\n      return this.desc.toString();\n    }\n  },\n\n  deps: function () {\n    return this.desc.deps();\n  },\n\n  internalDeps: function () {\n    return this.initialDesc.deps();\n  }\n});\n\nObservable.prototype.assign = Observable.prototype.onValue;\nObservable.prototype.forEach = Observable.prototype.onValue;\nObservable.prototype.inspect = Observable.prototype.toString;\n\nBacon.Observable = Observable;\n\nfunction CompositeUnsubscribe() {\n  var ss = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n\n  this.unsubscribe = _.bind(this.unsubscribe, this);\n  this.unsubscribed = false;\n  this.subscriptions = [];\n  this.starting = [];\n  for (var i = 0, s; i < ss.length; i++) {\n    s = ss[i];\n    this.add(s);\n  }\n}\n\nextend(CompositeUnsubscribe.prototype, {\n  add: function (subscription) {\n    var _this2 = this;\n\n    if (this.unsubscribed) {\n      return;\n    }\n    var ended = false;\n    var unsub = nop;\n    this.starting.push(subscription);\n    var unsubMe = function () {\n      if (_this2.unsubscribed) {\n        return;\n      }\n      ended = true;\n      _this2.remove(unsub);\n      return _.remove(subscription, _this2.starting);\n    };\n    unsub = subscription(this.unsubscribe, unsubMe);\n    if (!(this.unsubscribed || ended)) {\n      this.subscriptions.push(unsub);\n    } else {\n      unsub();\n    }\n    _.remove(subscription, this.starting);\n    return unsub;\n  },\n\n  remove: function (unsub) {\n    if (this.unsubscribed) {\n      return;\n    }\n    if (_.remove(unsub, this.subscriptions) !== undefined) {\n      return unsub();\n    }\n  },\n\n  unsubscribe: function () {\n    if (this.unsubscribed) {\n      return;\n    }\n    this.unsubscribed = true;\n    var iterable = this.subscriptions;\n    for (var i = 0; i < iterable.length; i++) {\n      iterable[i]();\n    }\n    this.subscriptions = [];\n    this.starting = [];\n    return [];\n  },\n\n  count: function () {\n    if (this.unsubscribed) {\n      return 0;\n    }\n    return this.subscriptions.length + this.starting.length;\n  },\n\n  empty: function () {\n    return this.count() === 0;\n  }\n});\n\nBacon.CompositeUnsubscribe = CompositeUnsubscribe;\n\nfunction Dispatcher(_subscribe, _handleEvent) {\n  this._subscribe = _subscribe;\n  this._handleEvent = _handleEvent;\n  this.subscribe = _.bind(this.subscribe, this);\n  this.handleEvent = _.bind(this.handleEvent, this);\n  this.pushing = false;\n  this.ended = false;\n  this.prevError = undefined;\n  this.unsubSrc = undefined;\n  this.subscriptions = [];\n  this.queue = [];\n}\n\nDispatcher.prototype.hasSubscribers = function () {\n  return this.subscriptions.length > 0;\n};\n\nDispatcher.prototype.removeSub = function (subscription) {\n  this.subscriptions = _.without(subscription, this.subscriptions);\n  return this.subscriptions;\n};\n\nDispatcher.prototype.push = function (event) {\n  if (event.isEnd()) {\n    this.ended = true;\n  }\n  return UpdateBarrier.inTransaction(event, this, this.pushIt, [event]);\n};\n\nDispatcher.prototype.pushToSubscriptions = function (event) {\n  try {\n    var tmp = this.subscriptions;\n    var len = tmp.length;\n    for (var i = 0; i < len; i++) {\n      var sub = tmp[i];\n      var reply = sub.sink(event);\n      if (reply === Bacon.noMore || event.isEnd()) {\n        this.removeSub(sub);\n      }\n    }\n    return true;\n  } catch (error) {\n    this.pushing = false;\n    this.queue = [];\n    throw error;\n  }\n};\n\nDispatcher.prototype.pushIt = function (event) {\n  if (!this.pushing) {\n    if (event === this.prevError) {\n      return;\n    }\n    if (event.isError()) {\n      this.prevError = event;\n    }\n    this.pushing = true;\n    this.pushToSubscriptions(event);\n    this.pushing = false;\n    while (this.queue.length) {\n      event = this.queue.shift();\n      this.push(event);\n    }\n    if (this.hasSubscribers()) {\n      return Bacon.more;\n    } else {\n      this.unsubscribeFromSource();\n      return Bacon.noMore;\n    }\n  } else {\n    this.queue.push(event);\n    return Bacon.more;\n  }\n};\n\nDispatcher.prototype.handleEvent = function (event) {\n  if (this._handleEvent) {\n    return this._handleEvent(event);\n  } else {\n    return this.push(event);\n  }\n};\n\nDispatcher.prototype.unsubscribeFromSource = function () {\n  if (this.unsubSrc) {\n    this.unsubSrc();\n  }\n  this.unsubSrc = undefined;\n};\n\nDispatcher.prototype.subscribe = function (sink) {\n  var subscription;\n  if (this.ended) {\n    sink(endEvent());\n    return nop;\n  } else {\n    assertFunction(sink);\n    subscription = {\n      sink: sink\n    };\n    this.subscriptions.push(subscription);\n    if (this.subscriptions.length === 1) {\n      this.unsubSrc = this._subscribe(this.handleEvent);\n      assertFunction(this.unsubSrc);\n    }\n    return (function (_this) {\n      return function () {\n        _this.removeSub(subscription);\n        if (!_this.hasSubscribers()) {\n          return _this.unsubscribeFromSource();\n        }\n      };\n    })(this);\n  }\n};\n\nBacon.Dispatcher = Dispatcher;\n\nfunction EventStream(desc, subscribe, handler) {\n  if (!(this instanceof EventStream)) {\n    return new EventStream(desc, subscribe, handler);\n  }\n  if (_.isFunction(desc)) {\n    handler = subscribe;\n    subscribe = desc;\n    desc = Desc.empty;\n  }\n  Observable.call(this, desc);\n  assertFunction(subscribe);\n  this.dispatcher = new Dispatcher(subscribe, handler);\n  registerObs(this);\n}\n\ninherit(EventStream, Observable);\nextend(EventStream.prototype, {\n  _isEventStream: true,\n\n  toProperty: function (initValue_) {\n    var initValue = arguments.length === 0 ? None : toOption(function () {\n      return initValue_;\n    });\n    var disp = this.dispatcher;\n    var desc = new Bacon.Desc(this, \"toProperty\", [initValue_]);\n    return new Property(desc, function (sink) {\n      var initSent = false;\n      var subbed = false;\n      var unsub = nop;\n      var reply = Bacon.more;\n      var sendInit = function () {\n        if (!initSent) {\n          return initValue.forEach(function (value) {\n            initSent = true;\n            reply = sink(new Initial(value));\n            if (reply === Bacon.noMore) {\n              unsub();\n              unsub = nop;\n              return nop;\n            }\n          });\n        }\n      };\n\n      unsub = disp.subscribe(function (event) {\n        if (event.hasValue()) {\n          if (event.isInitial() && !subbed) {\n            initValue = new Some(function () {\n              return event.value();\n            });\n            return Bacon.more;\n          } else {\n            if (!event.isInitial()) {\n              sendInit();\n            }\n            initSent = true;\n            initValue = new Some(event);\n            return sink(event);\n          }\n        } else {\n          if (event.isEnd()) {\n            reply = sendInit();\n          }\n          if (reply !== Bacon.noMore) {\n            return sink(event);\n          }\n        }\n      });\n      subbed = true;\n      sendInit();\n      return unsub;\n    });\n  },\n\n  toEventStream: function () {\n    return this;\n  },\n\n  withHandler: function (handler) {\n    return new EventStream(new Bacon.Desc(this, \"withHandler\", [handler]), this.dispatcher.subscribe, handler);\n  }\n});\n\nBacon.EventStream = EventStream;\n\nBacon.never = function () {\n  return new EventStream(describe(Bacon, \"never\"), function (sink) {\n    sink(endEvent());\n    return nop;\n  });\n};\n\nBacon.when = function () {\n  if (arguments.length === 0) {\n    return Bacon.never();\n  }\n  var len = arguments.length;\n  var usage = \"when: expecting arguments in the form (Observable+,function)+\";\n\n  assert(usage, len % 2 === 0);\n  var sources = [];\n  var pats = [];\n  var i = 0;\n  var patterns = [];\n  while (i < len) {\n    patterns[i] = arguments[i];\n    patterns[i + 1] = arguments[i + 1];\n    var patSources = _.toArray(arguments[i]);\n    var f = constantToFunction(arguments[i + 1]);\n    var pat = { f: f, ixs: [] };\n    var triggerFound = false;\n    for (var j = 0, s; j < patSources.length; j++) {\n      s = patSources[j];\n      var index = _.indexOf(sources, s);\n      if (!triggerFound) {\n        triggerFound = Source.isTrigger(s);\n      }\n      if (index < 0) {\n        sources.push(s);\n        index = sources.length - 1;\n      }\n      for (var k = 0, ix; k < pat.ixs.length; k++) {\n        ix = pat.ixs[k];\n        if (ix.index === index) {\n          ix.count++;\n        }\n      }\n      pat.ixs.push({ index: index, count: 1 });\n    }\n\n    assert(\"At least one EventStream required\", triggerFound || !patSources.length);\n\n    if (patSources.length > 0) {\n      pats.push(pat);\n    }\n    i = i + 2;\n  }\n\n  if (!sources.length) {\n    return Bacon.never();\n  }\n\n  sources = _.map(Source.fromObservable, sources);\n  var needsBarrier = _.any(sources, function (s) {\n    return s.flatten;\n  }) && containsDuplicateDeps(_.map(function (s) {\n    return s.obs;\n  }, sources));\n\n  var desc = new Bacon.Desc(Bacon, \"when\", patterns);\n  var resultStream = new EventStream(desc, function (sink) {\n    var triggers = [];\n    var ends = false;\n    var match = function (p) {\n      for (var i1 = 0, i; i1 < p.ixs.length; i1++) {\n        i = p.ixs[i1];\n        if (!sources[i.index].hasAtLeast(i.count)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    var cannotSync = function (source) {\n      return !source.sync || source.ended;\n    };\n    var cannotMatch = function (p) {\n      for (var i1 = 0, i; i1 < p.ixs.length; i1++) {\n        i = p.ixs[i1];\n        if (!sources[i.index].mayHave(i.count)) {\n          return true;\n        }\n      }\n    };\n    var nonFlattened = function (trigger) {\n      return !trigger.source.flatten;\n    };\n    var part = function (source) {\n      return function (unsubAll) {\n        var flushLater = function () {\n          return UpdateBarrier.whenDoneWith(resultStream, flush);\n        };\n        var flushWhileTriggers = function () {\n          if (triggers.length > 0) {\n            var reply = Bacon.more;\n            var trigger = triggers.pop();\n            for (var i1 = 0, p; i1 < pats.length; i1++) {\n              p = pats[i1];\n              if (match(p)) {\n                var events = (function () {\n                  var result = [];\n                  for (var i2 = 0, i; i2 < p.ixs.length; i2++) {\n                    i = p.ixs[i2];\n                    result.push(sources[i.index].consume());\n                  }\n                  return result;\n                })();\n                reply = sink(trigger.e.apply(function () {\n                  var _p;\n\n                  var values = (function () {\n                    var result = [];\n                    for (var i2 = 0, event; i2 < events.length; i2++) {\n                      event = events[i2];\n                      result.push(event.value());\n                    }\n                    return result;\n                  })();\n\n                  return (_p = p).f.apply(_p, values);\n                }));\n                if (triggers.length) {\n                  triggers = _.filter(nonFlattened, triggers);\n                }\n                if (reply === Bacon.noMore) {\n                  return reply;\n                } else {\n                  return flushWhileTriggers();\n                }\n              }\n            }\n          } else {\n            return Bacon.more;\n          }\n        };\n        var flush = function () {\n          var reply = flushWhileTriggers();\n          if (ends) {\n            if (_.all(sources, cannotSync) || _.all(pats, cannotMatch)) {\n              reply = Bacon.noMore;\n              sink(endEvent());\n            }\n          }\n          if (reply === Bacon.noMore) {\n            unsubAll();\n          }\n\n          return reply;\n        };\n        return source.subscribe(function (e) {\n          if (e.isEnd()) {\n            ends = true;\n            source.markEnded();\n            flushLater();\n          } else if (e.isError()) {\n            var reply = sink(e);\n          } else {\n            source.push(e);\n            if (source.sync) {\n              triggers.push({ source: source, e: e });\n              if (needsBarrier || UpdateBarrier.hasWaiters()) {\n                flushLater();\n              } else {\n                flush();\n              }\n            }\n          }\n          if (reply === Bacon.noMore) {\n            unsubAll();\n          }\n          return reply || Bacon.more;\n        });\n      };\n    };\n\n    return new Bacon.CompositeUnsubscribe((function () {\n      var result = [];\n      for (var i1 = 0, s; i1 < sources.length; i1++) {\n        s = sources[i1];\n        result.push(part(s));\n      }\n      return result;\n    })()).unsubscribe;\n  });\n  return resultStream;\n};\n\nvar containsDuplicateDeps = function (observables) {\n  var state = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n\n  var checkObservable = function (obs) {\n    if (_.contains(state, obs)) {\n      return true;\n    } else {\n      var deps = obs.internalDeps();\n      if (deps.length) {\n        state.push(obs);\n        return _.any(deps, checkObservable);\n      } else {\n        state.push(obs);\n        return false;\n      }\n    }\n  };\n\n  return _.any(observables, checkObservable);\n};\n\nvar constantToFunction = function (f) {\n  if (_.isFunction(f)) {\n    return f;\n  } else {\n    return _.always(f);\n  }\n};\n\nBacon.groupSimultaneous = function () {\n  for (var _len5 = arguments.length, streams = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    streams[_key5] = arguments[_key5];\n  }\n\n  if (streams.length === 1 && isArray(streams[0])) {\n    streams = streams[0];\n  }\n  var sources = (function () {\n    var result = [];\n    for (var i = 0, s; i < streams.length; i++) {\n      s = streams[i];\n      result.push(new BufferingSource(s));\n    }\n    return result;\n  })();\n  return withDesc(new Bacon.Desc(Bacon, \"groupSimultaneous\", streams), Bacon.when(sources, function () {\n    for (var _len6 = arguments.length, xs = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      xs[_key6] = arguments[_key6];\n    }\n\n    return xs;\n  }));\n};\n\nfunction PropertyDispatcher(property, subscribe, handleEvent) {\n  Dispatcher.call(this, subscribe, handleEvent);\n  this.property = property;\n  this.subscribe = _.bind(this.subscribe, this);\n  this.current = None;\n  this.currentValueRootId = undefined;\n  this.propertyEnded = false;\n}\n\ninherit(PropertyDispatcher, Dispatcher);\nextend(PropertyDispatcher.prototype, {\n  push: function (event) {\n    if (event.isEnd()) {\n      this.propertyEnded = true;\n    }\n    if (event.hasValue()) {\n      this.current = new Some(event);\n      this.currentValueRootId = UpdateBarrier.currentEventId();\n    }\n    return Dispatcher.prototype.push.call(this, event);\n  },\n\n  maybeSubSource: function (sink, reply) {\n    if (reply === Bacon.noMore) {\n      return nop;\n    } else if (this.propertyEnded) {\n      sink(endEvent());\n      return nop;\n    } else {\n      return Dispatcher.prototype.subscribe.call(this, sink);\n    }\n  },\n\n  subscribe: function (sink) {\n    var _this3 = this;\n\n    var initSent = false;\n\n    var reply = Bacon.more;\n\n    if (this.current.isDefined && (this.hasSubscribers() || this.propertyEnded)) {\n      var dispatchingId = UpdateBarrier.currentEventId();\n      var valId = this.currentValueRootId;\n      if (!this.propertyEnded && valId && dispatchingId && dispatchingId !== valId) {\n        UpdateBarrier.whenDoneWith(this.property, function () {\n          if (_this3.currentValueRootId === valId) {\n            return sink(initialEvent(_this3.current.get().value()));\n          }\n        });\n\n        return this.maybeSubSource(sink, reply);\n      } else {\n        UpdateBarrier.inTransaction(undefined, this, function () {\n          reply = sink(initialEvent(this.current.get().value()));\n          return reply;\n        }, []);\n        return this.maybeSubSource(sink, reply);\n      }\n    } else {\n      return this.maybeSubSource(sink, reply);\n    }\n  }\n});\n\nfunction Property(desc, subscribe, handler) {\n  Observable.call(this, desc);\n  assertFunction(subscribe);\n  this.dispatcher = new PropertyDispatcher(this, subscribe, handler);\n  registerObs(this);\n}\n\ninherit(Property, Observable);\nextend(Property.prototype, {\n  _isProperty: true,\n\n  changes: function () {\n    var _this4 = this;\n\n    return new EventStream(new Bacon.Desc(this, \"changes\", []), function (sink) {\n      return _this4.dispatcher.subscribe(function (event) {\n        if (!event.isInitial()) {\n          return sink(event);\n        }\n      });\n    });\n  },\n\n  withHandler: function (handler) {\n    return new Property(new Bacon.Desc(this, \"withHandler\", [handler]), this.dispatcher.subscribe, handler);\n  },\n\n  toProperty: function () {\n    assertNoArguments(arguments);\n    return this;\n  },\n\n  toEventStream: function () {\n    var _this5 = this;\n\n    return new EventStream(new Bacon.Desc(this, \"toEventStream\", []), function (sink) {\n      return _this5.dispatcher.subscribe(function (event) {\n        if (event.isInitial()) {\n          event = event.toNext();\n        }\n        return sink(event);\n      });\n    });\n  }\n});\n\nBacon.Property = Property;\n\nBacon.constant = function (value) {\n  return new Property(new Bacon.Desc(Bacon, \"constant\", [value]), function (sink) {\n    sink(initialEvent(value));\n    sink(endEvent());\n    return nop;\n  });\n};\n\nBacon.fromBinder = function (binder) {\n  var eventTransformer = arguments.length <= 1 || arguments[1] === undefined ? _.id : arguments[1];\n\n  var desc = new Bacon.Desc(Bacon, \"fromBinder\", [binder, eventTransformer]);\n  return new EventStream(desc, function (sink) {\n    var unbound = false;\n    var shouldUnbind = false;\n    var unbind = function () {\n      if (!unbound) {\n        if (typeof unbinder !== \"undefined\" && unbinder !== null) {\n          unbinder();\n          return unbound = true;\n        } else {\n          return shouldUnbind = true;\n        }\n      }\n    };\n    var unbinder = binder(function () {\n      var ref;\n\n      for (var _len7 = arguments.length, args = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n\n      var value = eventTransformer.apply(this, args);\n      if (!(isArray(value) && ((ref = _.last(value)) != null ? ref._isEvent : undefined))) {\n        value = [value];\n      }\n      var reply = Bacon.more;\n      for (var i = 0, event; i < value.length; i++) {\n        event = value[i];\n        reply = sink(event = toEvent(event));\n        if (reply === Bacon.noMore || event.isEnd()) {\n          unbind();\n          return reply;\n        }\n      }\n      return reply;\n    });\n    if (shouldUnbind) {\n      unbind();\n    }\n    return unbind;\n  });\n};\n\nBacon.Observable.prototype.map = function (p) {\n  for (var _len8 = arguments.length, args = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    args[_key8 - 1] = arguments[_key8];\n  }\n\n  return convertArgsToFunction(this, p, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"map\", [f]), this.withHandler(function (event) {\n      return this.push(event.fmap(f));\n    }));\n  });\n};\n\nvar argumentsToObservables = function (args) {\n  if (isArray(args[0])) {\n    return args[0];\n  } else {\n    return Array.prototype.slice.call(args);\n  }\n};\n\nvar argumentsToObservablesAndFunction = function (args) {\n  if (_.isFunction(args[0])) {\n    return [argumentsToObservables(Array.prototype.slice.call(args, 1)), args[0]];\n  } else {\n    return [argumentsToObservables(Array.prototype.slice.call(args, 0, args.length - 1)), _.last(args)];\n  }\n};\n\nBacon.combineAsArray = function () {\n  var streams = argumentsToObservables(arguments);\n  if (streams.length) {\n    var sources = [];\n    for (var i = 0; i < streams.length; i++) {\n      var stream = isObservable(streams[i]) ? streams[i] : Bacon.constant(streams[i]);\n      sources.push(new Source(stream, true));\n    }\n    return withDesc(new Bacon.Desc(Bacon, \"combineAsArray\", streams), Bacon.when(sources, function () {\n      for (var _len9 = arguments.length, xs = Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        xs[_key9] = arguments[_key9];\n      }\n\n      return xs;\n    }).toProperty());\n  } else {\n    return Bacon.constant([]);\n  }\n};\n\nBacon.onValues = function () {\n  return Bacon.combineAsArray(Array.prototype.slice.call(arguments, 0, arguments.length - 1)).onValues(arguments[arguments.length - 1]);\n};\n\nBacon.combineWith = function () {\n  var _argumentsToObservablesAndFunction = argumentsToObservablesAndFunction(arguments);\n\n  var streams = _argumentsToObservablesAndFunction[0];\n  var f = _argumentsToObservablesAndFunction[1];\n\n  var desc = new Bacon.Desc(Bacon, \"combineWith\", [f].concat(streams));\n  return withDesc(desc, Bacon.combineAsArray(streams).map(function (values) {\n    return f.apply(undefined, values);\n  }));\n};\n\nBacon.Observable.prototype.combine = function (other, f) {\n  var combinator = toCombinator(f);\n  var desc = new Bacon.Desc(this, \"combine\", [other, f]);\n  return withDesc(desc, Bacon.combineAsArray(this, other).map(function (values) {\n    return combinator(values[0], values[1]);\n  }));\n};\n\nBacon.Observable.prototype.withStateMachine = function (initState, f) {\n  var state = initState;\n  var desc = new Bacon.Desc(this, \"withStateMachine\", [initState, f]);\n  return withDesc(desc, this.withHandler(function (event) {\n    var fromF = f(state, event);\n    var newState = fromF[0];\n    var outputs = fromF[1];\n\n    state = newState;\n    var reply = Bacon.more;\n    for (var i = 0, output; i < outputs.length; i++) {\n      output = outputs[i];\n      reply = this.push(output);\n      if (reply === Bacon.noMore) {\n        return reply;\n      }\n    }\n    return reply;\n  }));\n};\n\nvar equals = function (a, b) {\n  return a === b;\n};\n\nvar isNone = function (object) {\n  return typeof object !== \"undefined\" && object !== null ? object._isNone : false;\n};\n\nBacon.Observable.prototype.skipDuplicates = function () {\n  var isEqual = arguments.length <= 0 || arguments[0] === undefined ? equals : arguments[0];\n\n  var desc = new Bacon.Desc(this, \"skipDuplicates\", []);\n  return withDesc(desc, this.withStateMachine(None, function (prev, event) {\n    if (!event.hasValue()) {\n      return [prev, [event]];\n    } else if (event.isInitial() || isNone(prev) || !isEqual(prev.get(), event.value())) {\n      return [new Some(event.value()), [event]];\n    } else {\n      return [prev, []];\n    }\n  }));\n};\n\nBacon.Observable.prototype.awaiting = function (other) {\n  var desc = new Bacon.Desc(this, \"awaiting\", [other]);\n  return withDesc(desc, Bacon.groupSimultaneous(this, other).map(function (values) {\n    return values[1].length === 0;\n  }).toProperty(false).skipDuplicates());\n};\n\nBacon.Observable.prototype.not = function () {\n  return withDesc(new Bacon.Desc(this, \"not\", []), this.map(function (x) {\n    return !x;\n  }));\n};\n\nBacon.Property.prototype.and = function (other) {\n  return withDesc(new Bacon.Desc(this, \"and\", [other]), this.combine(other, function (x, y) {\n    return x && y;\n  }));\n};\n\nBacon.Property.prototype.or = function (other) {\n  return withDesc(new Bacon.Desc(this, \"or\", [other]), this.combine(other, function (x, y) {\n    return x || y;\n  }));\n};\n\nBacon.scheduler = {\n  setTimeout: function (f, d) {\n    return setTimeout(f, d);\n  },\n  setInterval: function (f, i) {\n    return setInterval(f, i);\n  },\n  clearInterval: function (id) {\n    return clearInterval(id);\n  },\n  clearTimeout: function (id) {\n    return clearTimeout(id);\n  },\n  now: function () {\n    return new Date().getTime();\n  }\n};\n\nBacon.EventStream.prototype.bufferWithTime = function (delay) {\n  return withDesc(new Bacon.Desc(this, \"bufferWithTime\", [delay]), this.bufferWithTimeOrCount(delay, Number.MAX_VALUE));\n};\n\nBacon.EventStream.prototype.bufferWithCount = function (count) {\n  return withDesc(new Bacon.Desc(this, \"bufferWithCount\", [count]), this.bufferWithTimeOrCount(undefined, count));\n};\n\nBacon.EventStream.prototype.bufferWithTimeOrCount = function (delay, count) {\n  var flushOrSchedule = function (buffer) {\n    if (buffer.values.length === count) {\n      return buffer.flush();\n    } else if (delay !== undefined) {\n      return buffer.schedule();\n    }\n  };\n  var desc = new Bacon.Desc(this, \"bufferWithTimeOrCount\", [delay, count]);\n  return withDesc(desc, this.buffer(delay, flushOrSchedule, flushOrSchedule));\n};\n\nBacon.EventStream.prototype.buffer = function (delay) {\n  var onInput = arguments.length <= 1 || arguments[1] === undefined ? nop : arguments[1];\n  var onFlush = arguments.length <= 2 || arguments[2] === undefined ? nop : arguments[2];\n\n  var buffer = {\n    scheduled: null,\n    end: undefined,\n    values: [],\n    flush: function () {\n      if (this.scheduled) {\n        Bacon.scheduler.clearTimeout(this.scheduled);\n        this.scheduled = null;\n      }\n      if (this.values.length > 0) {\n        var valuesToPush = this.values;\n        this.values = [];\n        var reply = this.push(nextEvent(valuesToPush));\n        if (this.end != null) {\n          return this.push(this.end);\n        } else if (reply !== Bacon.noMore) {\n          return onFlush(this);\n        }\n      } else {\n        if (this.end != null) {\n          return this.push(this.end);\n        }\n      }\n    },\n    schedule: function () {\n      var _this6 = this;\n\n      if (!this.scheduled) {\n        return this.scheduled = delay(function () {\n          return _this6.flush();\n        });\n      }\n    }\n  };\n  var reply = Bacon.more;\n  if (!_.isFunction(delay)) {\n    var delayMs = delay;\n    delay = function (f) {\n      return Bacon.scheduler.setTimeout(f, delayMs);\n    };\n  }\n  return withDesc(new Bacon.Desc(this, \"buffer\", []), this.withHandler(function (event) {\n    var _this7 = this;\n\n    buffer.push = function (event) {\n      return _this7.push(event);\n    };\n    if (event.isError()) {\n      reply = this.push(event);\n    } else if (event.isEnd()) {\n      buffer.end = event;\n      if (!buffer.scheduled) {\n        buffer.flush();\n      }\n    } else {\n      buffer.values.push(event.value());\n\n      onInput(buffer);\n    }\n    return reply;\n  }));\n};\n\nBacon.Observable.prototype.filter = function (f) {\n  assertObservableIsProperty(f);\n\n  for (var _len10 = arguments.length, args = Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n    args[_key10 - 1] = arguments[_key10];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"filter\", [f]), this.withHandler(function (event) {\n      if (event.filter(f)) {\n        return this.push(event);\n      } else {\n        return Bacon.more;\n      }\n    }));\n  });\n};\n\nBacon.once = function (value) {\n  return new EventStream(new Desc(Bacon, \"once\", [value]), function (sink) {\n    sink(toEvent(value));\n    sink(endEvent());\n    return nop;\n  });\n};\n\nBacon.EventStream.prototype.concat = function (right) {\n  var left = this;\n  return new EventStream(new Bacon.Desc(left, \"concat\", [right]), function (sink) {\n    var unsubRight = nop;\n    var unsubLeft = left.dispatcher.subscribe(function (e) {\n      if (e.isEnd()) {\n        unsubRight = right.toEventStream().dispatcher.subscribe(sink);\n        return unsubRight;\n      } else {\n        return sink(e);\n      }\n    });\n    return function () {\n      return unsubLeft(), unsubRight();\n    };\n  });\n};\n\nBacon.Property.prototype.concat = function (right) {\n  return addPropertyInitValueToStream(this, this.changes().concat(right));\n};\n\nBacon.concatAll = function () {\n  var streams = argumentsToObservables(arguments);\n  if (streams.length) {\n    return withDesc(new Bacon.Desc(Bacon, \"concatAll\", streams), _.fold(_.tail(streams), _.head(streams).toEventStream(), function (a, b) {\n      return a.concat(b);\n    }));\n  } else {\n    return Bacon.never();\n  }\n};\n\nvar addPropertyInitValueToStream = function (property, stream) {\n  var justInitValue = new EventStream(describe(property, \"justInitValue\"), function (sink) {\n    var value = undefined;\n    var unsub = property.dispatcher.subscribe(function (event) {\n      if (!event.isEnd()) {\n        value = event;\n      }\n      return Bacon.noMore;\n    });\n    UpdateBarrier.whenDoneWith(justInitValue, function () {\n      if (typeof value !== \"undefined\" && value !== null) {\n        sink(value);\n      }\n      return sink(endEvent());\n    });\n    return unsub;\n  });\n  return justInitValue.concat(stream).toProperty();\n};\n\nBacon.Observable.prototype.flatMap = function () {\n  return flatMap_(this, makeSpawner(arguments));\n};\n\nBacon.Observable.prototype.flatMapFirst = function () {\n  return flatMap_(this, makeSpawner(arguments), true);\n};\n\nvar makeSpawner = function (args) {\n  if (args.length === 1 && isObservable(args[0])) {\n    return _.always(args[0]);\n  } else {\n    return makeFunctionArgs(args);\n  }\n};\n\nvar makeObservable = function (x) {\n  if (isObservable(x)) {\n    return x;\n  } else {\n    return Bacon.once(x);\n  }\n};\n\nvar flatMap_ = function (root, f, firstOnly, limit) {\n  var rootDep = [root];\n  var childDeps = [];\n  var desc = new Bacon.Desc(root, \"flatMap\" + (firstOnly ? \"First\" : \"\"), [f]);\n  var result = new EventStream(desc, function (sink) {\n    var composite = new CompositeUnsubscribe();\n    var queue = [];\n    var spawn = function (event) {\n      var child = makeObservable(f(event.value()));\n      childDeps.push(child);\n      return composite.add(function (unsubAll, unsubMe) {\n        return child.dispatcher.subscribe(function (event) {\n          if (event.isEnd()) {\n            _.remove(child, childDeps);\n            checkQueue();\n            checkEnd(unsubMe);\n            return Bacon.noMore;\n          } else {\n            if (typeof event !== \"undefined\" && event !== null ? event._isInitial : undefined) {\n              event = event.toNext();\n            }\n            var reply = sink(event);\n            if (reply === Bacon.noMore) {\n              unsubAll();\n            }\n            return reply;\n          }\n        });\n      });\n    };\n    var checkQueue = function () {\n      var event = queue.shift();\n      if (event) {\n        return spawn(event);\n      }\n    };\n    var checkEnd = function (unsub) {\n      unsub();\n      if (composite.empty()) {\n        return sink(endEvent());\n      }\n    };\n    composite.add(function (__, unsubRoot) {\n      return root.dispatcher.subscribe(function (event) {\n        if (event.isEnd()) {\n          return checkEnd(unsubRoot);\n        } else if (event.isError()) {\n          return sink(event);\n        } else if (firstOnly && composite.count() > 1) {\n          return Bacon.more;\n        } else {\n          if (composite.unsubscribed) {\n            return Bacon.noMore;\n          }\n          if (limit && composite.count() > limit) {\n            return queue.push(event);\n          } else {\n            return spawn(event);\n          }\n        }\n      });\n    });\n    return composite.unsubscribe;\n  });\n  result.internalDeps = function () {\n    if (childDeps.length) {\n      return rootDep.concat(childDeps);\n    } else {\n      return rootDep;\n    }\n  };\n  return result;\n};\n\nBacon.Observable.prototype.flatMapWithConcurrencyLimit = function (limit) {\n  for (var _len11 = arguments.length, args = Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    args[_key11 - 1] = arguments[_key11];\n  }\n\n  var desc = new Bacon.Desc(this, \"flatMapWithConcurrencyLimit\", [limit].concat(args));\n  return withDesc(desc, flatMap_(this, makeSpawner(args), false, limit));\n};\n\nBacon.Observable.prototype.flatMapConcat = function () {\n  var desc = new Bacon.Desc(this, \"flatMapConcat\", Array.prototype.slice.call(arguments, 0));\n  return withDesc(desc, this.flatMapWithConcurrencyLimit.apply(this, [1].concat(_slice.call(arguments))));\n};\n\nBacon.later = function (delay, value) {\n  return withDesc(new Bacon.Desc(Bacon, \"later\", [delay, value]), Bacon.fromBinder(function (sink) {\n    var sender = function () {\n      return sink([value, endEvent()]);\n    };\n    var id = Bacon.scheduler.setTimeout(sender, delay);\n    return function () {\n      return Bacon.scheduler.clearTimeout(id);\n    };\n  }));\n};\n\nBacon.Observable.prototype.bufferingThrottle = function (minimumInterval) {\n  var desc = new Bacon.Desc(this, \"bufferingThrottle\", [minimumInterval]);\n  return withDesc(desc, this.flatMapConcat(function (x) {\n    return Bacon.once(x).concat(Bacon.later(minimumInterval).filter(false));\n  }));\n};\n\nBacon.Property.prototype.bufferingThrottle = function () {\n  return Bacon.Observable.prototype.bufferingThrottle.apply(this, arguments).toProperty();\n};\n\nfunction Bus() {\n  if (!(this instanceof Bus)) {\n    return new Bus();\n  }\n\n  this.unsubAll = _.bind(this.unsubAll, this);\n  this.subscribeAll = _.bind(this.subscribeAll, this);\n  this.guardedSink = _.bind(this.guardedSink, this);\n\n  this.sink = undefined;\n  this.subscriptions = [];\n  this.ended = false;\n  EventStream.call(this, new Bacon.Desc(Bacon, \"Bus\", []), this.subscribeAll);\n}\n\ninherit(Bus, EventStream);\nextend(Bus.prototype, {\n  unsubAll: function () {\n    var iterable = this.subscriptions;\n    for (var i = 0, sub; i < iterable.length; i++) {\n      sub = iterable[i];\n      if (typeof sub.unsub === \"function\") {\n        sub.unsub();\n      }\n    }\n  },\n\n  subscribeAll: function (newSink) {\n    if (this.ended) {\n      newSink(endEvent());\n    } else {\n      this.sink = newSink;\n      var iterable = cloneArray(this.subscriptions);\n      for (var i = 0, subscription; i < iterable.length; i++) {\n        subscription = iterable[i];\n        this.subscribeInput(subscription);\n      }\n    }\n    return this.unsubAll;\n  },\n\n  guardedSink: function (input) {\n    var _this8 = this;\n\n    return function (event) {\n      if (event.isEnd()) {\n        _this8.unsubscribeInput(input);\n        return Bacon.noMore;\n      } else {\n        return _this8.sink(event);\n      }\n    };\n  },\n\n  subscribeInput: function (subscription) {\n    subscription.unsub = subscription.input.dispatcher.subscribe(this.guardedSink(subscription.input));\n    return subscription.unsub;\n  },\n\n  unsubscribeInput: function (input) {\n    var iterable = this.subscriptions;\n    for (var i = 0, sub; i < iterable.length; i++) {\n      sub = iterable[i];\n      if (sub.input === input) {\n        if (typeof sub.unsub === \"function\") {\n          sub.unsub();\n        }\n        this.subscriptions.splice(i, 1);\n        return;\n      }\n    }\n  },\n\n  plug: function (input) {\n    var _this9 = this;\n\n    assertObservable(input);\n    if (this.ended) {\n      return;\n    }\n    var sub = { input: input };\n    this.subscriptions.push(sub);\n    if (typeof this.sink !== \"undefined\") {\n      this.subscribeInput(sub);\n    }\n    return function () {\n      return _this9.unsubscribeInput(input);\n    };\n  },\n\n  end: function () {\n    this.ended = true;\n    this.unsubAll();\n    if (typeof this.sink === \"function\") {\n      return this.sink(endEvent());\n    }\n  },\n\n  push: function (value) {\n    if (!this.ended && typeof this.sink === \"function\") {\n      var rootPush = !this.pushing;\n      if (!rootPush) {\n        if (!this.pushQueue) this.pushQueue = [];\n        this.pushQueue.push(value);\n\n        return;\n      }\n      this.pushing = true;\n      try {\n        return this.sink(nextEvent(value));\n      } finally {\n        if (rootPush && this.pushQueue) {\n          var i = 0;\n          while (i < this.pushQueue.length) {\n            var value = this.pushQueue[i];\n            this.sink(nextEvent(value));\n            i++;\n          }\n          this.pushQueue = null;\n        }\n        this.pushing = false;\n      }\n    }\n  },\n\n  error: function (error) {\n    if (typeof this.sink === \"function\") {\n      return this.sink(new Error(error));\n    }\n  }\n});\n\nBacon.Bus = Bus;\n\nvar liftCallback = function (desc, wrapped) {\n  return withMethodCallSupport(function (f) {\n    var stream = partiallyApplied(wrapped, [function (values, callback) {\n      return f.apply(undefined, values.concat([callback]));\n    }]);\n\n    for (var _len12 = arguments.length, args = Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n      args[_key12 - 1] = arguments[_key12];\n    }\n\n    return withDesc(new Bacon.Desc(Bacon, desc, [f].concat(args)), Bacon.combineAsArray(args).flatMap(stream));\n  });\n};\n\nBacon.fromCallback = liftCallback(\"fromCallback\", function (f) {\n  for (var _len13 = arguments.length, args = Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {\n    args[_key13 - 1] = arguments[_key13];\n  }\n\n  return Bacon.fromBinder(function (handler) {\n    makeFunction(f, args)(handler);\n    return nop;\n  }, function (value) {\n    return [value, endEvent()];\n  });\n});\n\nBacon.fromNodeCallback = liftCallback(\"fromNodeCallback\", function (f) {\n  for (var _len14 = arguments.length, args = Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n    args[_key14 - 1] = arguments[_key14];\n  }\n\n  return Bacon.fromBinder(function (handler) {\n    makeFunction(f, args)(handler);\n    return nop;\n  }, function (error, value) {\n    if (error) {\n      return [new Error(error), endEvent()];\n    }\n    return [value, endEvent()];\n  });\n});\n\nBacon.combineTemplate = function (template) {\n  function current(ctxStack) {\n    return ctxStack[ctxStack.length - 1];\n  }\n  function setValue(ctxStack, key, value) {\n    current(ctxStack)[key] = value;\n    return value;\n  }\n  function applyStreamValue(key, index) {\n    return function (ctxStack, values) {\n      setValue(ctxStack, key, values[index]);\n    };\n  }\n  function constantValue(key, value) {\n    return function (ctxStack) {\n      setValue(ctxStack, key, value);\n    };\n  }\n\n  function mkContext(template) {\n    return isArray(template) ? [] : {};\n  }\n\n  function pushContext(key, value) {\n    return function (ctxStack) {\n      var newContext = mkContext(value);\n      setValue(ctxStack, key, newContext);\n      ctxStack.push(newContext);\n    };\n  }\n\n  function containsObservables(value) {\n    if (isObservable(value)) {\n      return true;\n    } else if (value && (value.constructor == Object || value.constructor == Array)) {\n      for (var key in value) {\n        if (Object.prototype.hasOwnProperty.call(value, key)) {\n          var child = value[key];\n          if (containsObservables(child)) return true;\n        }\n      }\n    }\n  }\n\n  function compile(key, value) {\n    if (isObservable(value)) {\n      streams.push(value);\n      funcs.push(applyStreamValue(key, streams.length - 1));\n    } else if (containsObservables(value)) {\n      var popContext = function (ctxStack) {\n        ctxStack.pop();\n      };\n      funcs.push(pushContext(key, value));\n      compileTemplate(value);\n      funcs.push(popContext);\n    } else {\n      funcs.push(constantValue(key, value));\n    }\n  }\n\n  function combinator(values) {\n    var rootContext = mkContext(template);\n    var ctxStack = [rootContext];\n    for (var i = 0, f; i < funcs.length; i++) {\n      f = funcs[i];\n      f(ctxStack, values);\n    }\n    return rootContext;\n  }\n\n  function compileTemplate(template) {\n    _.each(template, compile);\n  }\n\n  var funcs = [];\n  var streams = [];\n\n  var resultProperty = containsObservables(template) ? (compileTemplate(template), Bacon.combineAsArray(streams).map(combinator)) : Bacon.constant(template);\n\n  return withDesc(new Bacon.Desc(Bacon, \"combineTemplate\", [template]), resultProperty);\n};\n\nBacon.Observable.prototype.mapEnd = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"mapEnd\", [f]), this.withHandler(function (event) {\n    if (event.isEnd()) {\n      this.push(nextEvent(f(event)));\n      this.push(endEvent());\n      return Bacon.noMore;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nBacon.Observable.prototype.skipErrors = function () {\n  return withDesc(new Bacon.Desc(this, \"skipErrors\", []), this.withHandler(function (event) {\n    if (event.isError()) {\n      return Bacon.more;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nBacon.EventStream.prototype.takeUntil = function (stopper) {\n  var endMarker = {};\n  return withDesc(new Bacon.Desc(this, \"takeUntil\", [stopper]), Bacon.groupSimultaneous(this.mapEnd(endMarker), stopper.skipErrors()).withHandler(function (event) {\n    if (!event.hasValue()) {\n      return this.push(event);\n    } else {\n      var _event$value = event.value();\n\n      var data = _event$value[0];\n      var stopper = _event$value[1];\n\n      if (stopper.length) {\n        return this.push(endEvent());\n      } else {\n        var reply = Bacon.more;\n        for (var i = 0, value; i < data.length; i++) {\n          value = data[i];\n          if (value === endMarker) {\n            reply = this.push(endEvent());\n          } else {\n            reply = this.push(nextEvent(value));\n          }\n        }\n        return reply;\n      }\n    }\n  }));\n};\n\nBacon.Property.prototype.takeUntil = function (stopper) {\n  var changes = this.changes().takeUntil(stopper);\n  return withDesc(new Bacon.Desc(this, \"takeUntil\", [stopper]), addPropertyInitValueToStream(this, changes));\n};\n\nBacon.Observable.prototype.flatMapLatest = function () {\n  var f = makeSpawner(arguments);\n  var stream = this.toEventStream();\n  return withDesc(new Bacon.Desc(this, \"flatMapLatest\", [f]), stream.flatMap(function (value) {\n    return makeObservable(f(value)).takeUntil(stream);\n  }));\n};\n\nBacon.Property.prototype.delayChanges = function (desc, f) {\n  return withDesc(desc, addPropertyInitValueToStream(this, f(this.changes())));\n};\n\nBacon.EventStream.prototype.delayChanges = function (desc, f) {\n  return withDesc(desc, f(this));\n};\n\nBacon.Observable.prototype.delay = function (delay) {\n  return this.delayChanges(new Bacon.Desc(this, \"delay\", [delay]), function (changes) {\n    return changes.flatMap(function (value) {\n      return Bacon.later(delay, value);\n    });\n  });\n};\n\nBacon.Observable.prototype.debounce = function (delay) {\n  return this.delayChanges(new Bacon.Desc(this, \"debounce\", [delay]), function (changes) {\n    return changes.flatMapLatest(function (value) {\n      return Bacon.later(delay, value);\n    });\n  });\n};\n\nBacon.Observable.prototype.debounceImmediate = function (delay) {\n  return this.delayChanges(new Bacon.Desc(this, \"debounceImmediate\", [delay]), function (changes) {\n    return changes.flatMapFirst(function (value) {\n      return Bacon.once(value).concat(Bacon.later(delay).filter(false));\n    });\n  });\n};\n\nBacon.Observable.prototype.decode = function (cases) {\n  return withDesc(new Bacon.Desc(this, \"decode\", [cases]), this.combine(Bacon.combineTemplate(cases), function (key, values) {\n    return values[key];\n  }));\n};\n\nBacon.Observable.prototype.scan = function (seed, f) {\n  var _this10 = this;\n\n  var resultProperty;\n  f = toCombinator(f);\n  var acc = toOption(seed);\n  var initHandled = false;\n  var subscribe = function (sink) {\n    var initSent = false;\n    var unsub = nop;\n    var reply = Bacon.more;\n    var sendInit = function () {\n      if (!initSent) {\n        return acc.forEach(function (value) {\n          initSent = initHandled = true;\n          reply = sink(new Initial(function () {\n            return value;\n          }));\n          if (reply === Bacon.noMore) {\n            unsub();\n            unsub = nop;\n            return unsub;\n          }\n        });\n      }\n    };\n    unsub = _this10.dispatcher.subscribe(function (event) {\n      if (event.hasValue()) {\n        if (initHandled && event.isInitial()) {\n          return Bacon.more;\n        } else {\n            if (!event.isInitial()) {\n              sendInit();\n            }\n            initSent = initHandled = true;\n            var prev = acc.getOrElse(undefined);\n            var next = f(prev, event.value());\n\n            acc = new Some(next);\n            return sink(event.apply(function () {\n              return next;\n            }));\n          }\n      } else {\n        if (event.isEnd()) {\n          reply = sendInit();\n        }\n        if (reply !== Bacon.noMore) {\n          return sink(event);\n        }\n      }\n    });\n    UpdateBarrier.whenDoneWith(resultProperty, sendInit);\n    return unsub;\n  };\n  resultProperty = new Property(new Bacon.Desc(this, \"scan\", [seed, f]), subscribe);\n  return resultProperty;\n};\n\nBacon.Observable.prototype.diff = function (start, f) {\n  f = toCombinator(f);\n  return withDesc(new Bacon.Desc(this, \"diff\", [start, f]), this.scan([start], function (prevTuple, next) {\n    return [next, f(prevTuple[0], next)];\n  }).filter(function (tuple) {\n    return tuple.length === 2;\n  }).map(function (tuple) {\n    return tuple[1];\n  }));\n};\n\nBacon.Observable.prototype.doAction = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"doAction\", [f]), this.withHandler(function (event) {\n    if (event.hasValue()) {\n      f(event.value());\n    }\n    return this.push(event);\n  }));\n};\n\nBacon.Observable.prototype.doEnd = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"doEnd\", [f]), this.withHandler(function (event) {\n    if (event.isEnd()) {\n      f();\n    }\n    return this.push(event);\n  }));\n};\n\nBacon.Observable.prototype.doError = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"doError\", [f]), this.withHandler(function (event) {\n    if (event.isError()) {\n      f(event.error);\n    }\n    return this.push(event);\n  }));\n};\n\nBacon.Observable.prototype.doLog = function () {\n  for (var _len15 = arguments.length, args = Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n    args[_key15] = arguments[_key15];\n  }\n\n  return withDesc(new Bacon.Desc(this, \"doLog\", args), this.withHandler(function (event) {\n    if (typeof console !== \"undefined\" && console !== null && typeof console.log === \"function\") {\n      console.log.apply(console, args.concat([event.log()]));\n    }\n    return this.push(event);\n  }));\n};\n\nBacon.Observable.prototype.endOnError = function (f) {\n  if (!(typeof f !== \"undefined\" && f !== null)) {\n    f = true;\n  }\n\n  for (var _len16 = arguments.length, args = Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {\n    args[_key16 - 1] = arguments[_key16];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"endOnError\", []), this.withHandler(function (event) {\n      if (event.isError() && f(event.error)) {\n        this.push(event);\n        return this.push(endEvent());\n      } else {\n        return this.push(event);\n      }\n    }));\n  });\n};\n\nObservable.prototype.errors = function () {\n  return withDesc(new Bacon.Desc(this, \"errors\", []), this.filter(function () {\n    return false;\n  }));\n};\n\nBacon.Observable.prototype.take = function (count) {\n  if (count <= 0) {\n    return Bacon.never();\n  }\n  return withDesc(new Bacon.Desc(this, \"take\", [count]), this.withHandler(function (event) {\n    if (!event.hasValue()) {\n      return this.push(event);\n    } else {\n      count--;\n      if (count > 0) {\n        return this.push(event);\n      } else {\n        if (count === 0) {\n          this.push(event);\n        }\n        this.push(endEvent());\n        return Bacon.noMore;\n      }\n    }\n  }));\n};\n\nBacon.Observable.prototype.first = function () {\n  return withDesc(new Bacon.Desc(this, \"first\", []), this.take(1));\n};\n\nBacon.Observable.prototype.mapError = function () {\n  var f = makeFunctionArgs(arguments);\n  return withDesc(new Bacon.Desc(this, \"mapError\", [f]), this.withHandler(function (event) {\n    if (event.isError()) {\n      return this.push(nextEvent(f(event.error)));\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nBacon.Observable.prototype.flatMapError = function (fn) {\n  var desc = new Bacon.Desc(this, \"flatMapError\", [fn]);\n  return withDesc(desc, this.mapError(function (err) {\n    return new Error(err);\n  }).flatMap(function (x) {\n    if (x instanceof Error) {\n      return fn(x.error);\n    } else {\n      return Bacon.once(x);\n    }\n  }));\n};\n\nBacon.EventStream.prototype.flatScan = function (seed, f) {\n  var current = seed;\n  return this.flatMapConcat(function (next) {\n    return makeObservable(f(current, next)).doAction(function (updated) {\n      return current = updated;\n    });\n  }).toProperty(seed);\n};\n\nBacon.EventStream.prototype.sampledBy = function (sampler, combinator) {\n  return withDesc(new Bacon.Desc(this, \"sampledBy\", [sampler, combinator]), this.toProperty().sampledBy(sampler, combinator));\n};\n\nBacon.Property.prototype.sampledBy = function (sampler, combinator) {\n  var lazy = false;\n  if (typeof combinator !== \"undefined\" && combinator !== null) {\n    combinator = toCombinator(combinator);\n  } else {\n    lazy = true;\n    combinator = function (f) {\n      return f.value();\n    };\n  }\n  var thisSource = new Source(this, false, lazy);\n  var samplerSource = new Source(sampler, true, lazy);\n  var stream = Bacon.when([thisSource, samplerSource], combinator);\n  var result = sampler._isProperty ? stream.toProperty() : stream;\n  return withDesc(new Bacon.Desc(this, \"sampledBy\", [sampler, combinator]), result);\n};\n\nBacon.Property.prototype.sample = function (interval) {\n  return withDesc(new Bacon.Desc(this, \"sample\", [interval]), this.sampledBy(Bacon.interval(interval, {})));\n};\n\nBacon.Observable.prototype.map = function (p) {\n  if (p && p._isProperty) {\n    return p.sampledBy(this, former);\n  } else {\n    for (var _len17 = arguments.length, args = Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {\n      args[_key17 - 1] = arguments[_key17];\n    }\n\n    return convertArgsToFunction(this, p, args, function (f) {\n      return withDesc(new Bacon.Desc(this, \"map\", [f]), this.withHandler(function (event) {\n        return this.push(event.fmap(f));\n      }));\n    });\n  }\n};\n\nBacon.Observable.prototype.fold = function (seed, f) {\n  return withDesc(new Bacon.Desc(this, \"fold\", [seed, f]), this.scan(seed, f).sampledBy(this.filter(false).mapEnd().toProperty()));\n};\n\nObservable.prototype.reduce = Observable.prototype.fold;\n\nvar eventMethods = [[\"addEventListener\", \"removeEventListener\"], [\"addListener\", \"removeListener\"], [\"on\", \"off\"], [\"bind\", \"unbind\"]];\n\nvar findHandlerMethods = function (target) {\n  var pair;\n  for (var i = 0; i < eventMethods.length; i++) {\n    pair = eventMethods[i];\n    var methodPair = [target[pair[0]], target[pair[1]]];\n    if (methodPair[0] && methodPair[1]) {\n      return methodPair;\n    }\n  }\n  for (var j = 0; j < eventMethods.length; j++) {\n    pair = eventMethods[j];\n    var addListener = target[pair[0]];\n    if (addListener) {\n      return [addListener, function () {}];\n    }\n  }\n  throw new Error(\"No suitable event methods in \" + target);\n};\n\nBacon.fromEventTarget = function (target, eventName, eventTransformer) {\n  var _findHandlerMethods = findHandlerMethods(target);\n\n  var sub = _findHandlerMethods[0];\n  var unsub = _findHandlerMethods[1];\n\n  var desc = new Bacon.Desc(Bacon, \"fromEvent\", [target, eventName]);\n  return withDesc(desc, Bacon.fromBinder(function (handler) {\n    sub.call(target, eventName, handler);\n    return function () {\n      return unsub.call(target, eventName, handler);\n    };\n  }, eventTransformer));\n};\n\nBacon.fromEvent = Bacon.fromEventTarget;\n\nBacon.fromPoll = function (delay, poll) {\n  var desc = new Bacon.Desc(Bacon, \"fromPoll\", [delay, poll]);\n  return withDesc(desc, Bacon.fromBinder(function (handler) {\n    var id = Bacon.scheduler.setInterval(handler, delay);\n    return function () {\n      return Bacon.scheduler.clearInterval(id);\n    };\n  }, poll));\n};\n\nfunction valueAndEnd(value) {\n  return [value, endEvent()];\n}\n\nBacon.fromPromise = function (promise, abort) {\n  var eventTransformer = arguments.length <= 2 || arguments[2] === undefined ? valueAndEnd : arguments[2];\n\n  return withDesc(new Bacon.Desc(Bacon, \"fromPromise\", [promise]), Bacon.fromBinder(function (handler) {\n    var bound = promise.then(handler, function (e) {\n      return handler(new Error(e));\n    });\n    if (bound && typeof bound.done === \"function\") {\n      bound.done();\n    }\n\n    if (abort) {\n      return function () {\n        if (typeof promise.abort === \"function\") {\n          return promise.abort();\n        }\n      };\n    } else {\n      return function () {};\n    }\n  }, eventTransformer));\n};\n\nBacon.Observable.prototype.groupBy = function (keyF) {\n  var limitF = arguments.length <= 1 || arguments[1] === undefined ? Bacon._.id : arguments[1];\n\n  var streams = {};\n  var src = this;\n  return src.filter(function (x) {\n    return !streams[keyF(x)];\n  }).map(function (x) {\n    var key = keyF(x);\n    var similar = src.filter(function (x) {\n      return keyF(x) === key;\n    });\n    var data = Bacon.once(x).concat(similar);\n    var limited = limitF(data, x).withHandler(function (event) {\n      this.push(event);\n      if (event.isEnd()) {\n        return delete streams[key];\n      }\n    });\n    streams[key] = limited;\n    return limited;\n  });\n};\n\nBacon.fromArray = function (values) {\n  assertArray(values);\n  if (!values.length) {\n    return withDesc(new Bacon.Desc(Bacon, \"fromArray\", values), Bacon.never());\n  } else {\n    var i = 0;\n    var stream = new EventStream(new Bacon.Desc(Bacon, \"fromArray\", [values]), function (sink) {\n      var unsubd = false;\n      var reply = Bacon.more;\n      var pushing = false;\n      var pushNeeded = false;\n      function push() {\n        pushNeeded = true;\n        if (pushing) {\n          return;\n        }\n        pushing = true;\n        while (pushNeeded) {\n          pushNeeded = false;\n          if (reply !== Bacon.noMore && !unsubd) {\n            var value = values[i++];\n            reply = sink(toEvent(value));\n            if (reply !== Bacon.noMore) {\n              if (i === values.length) {\n                sink(endEvent());\n              } else {\n                UpdateBarrier.afterTransaction(stream, push);\n              }\n            }\n          }\n        }\n        pushing = false;\n        return pushing;\n      };\n\n      push();\n      return function () {\n        unsubd = true;\n        return unsubd;\n      };\n    });\n    return stream;\n  }\n};\n\nBacon.EventStream.prototype.holdWhen = function (valve) {\n  var onHold = false;\n  var bufferedValues = [];\n  var src = this;\n  var srcIsEnded = false;\n  return new EventStream(new Bacon.Desc(this, \"holdWhen\", [valve]), function (sink) {\n    var composite = new CompositeUnsubscribe();\n    var subscribed = false;\n    var endIfBothEnded = function (unsub) {\n      if (typeof unsub === \"function\") {\n        unsub();\n      }\n      if (composite.empty() && subscribed) {\n        return sink(endEvent());\n      }\n    };\n    composite.add(function (unsubAll, unsubMe) {\n      return valve.subscribeInternal(function (event) {\n        if (event.hasValue()) {\n          onHold = event.value();\n          if (!onHold) {\n            var toSend = bufferedValues;\n            bufferedValues = [];\n            return (function () {\n              var result = [];\n              for (var i = 0, value; i < toSend.length; i++) {\n                value = toSend[i];\n                result.push(sink(nextEvent(value)));\n              }\n              if (srcIsEnded) {\n                result.push(sink(endEvent()));\n                unsubMe();\n              }\n              return result;\n            })();\n          }\n        } else if (event.isEnd()) {\n          return endIfBothEnded(unsubMe);\n        } else {\n          return sink(event);\n        }\n      });\n    });\n    composite.add(function (unsubAll, unsubMe) {\n      return src.subscribeInternal(function (event) {\n        if (onHold && event.hasValue()) {\n          return bufferedValues.push(event.value());\n        } else if (event.isEnd() && bufferedValues.length) {\n          srcIsEnded = true;\n          return endIfBothEnded(unsubMe);\n        } else {\n          return sink(event);\n        }\n      });\n    });\n    subscribed = true;\n    endIfBothEnded();\n    return composite.unsubscribe;\n  });\n};\n\nBacon.interval = function (delay) {\n  var value = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n  return withDesc(new Bacon.Desc(Bacon, \"interval\", [delay, value]), Bacon.fromPoll(delay, function () {\n    return nextEvent(value);\n  }));\n};\n\nBacon.$ = {};\nBacon.$.asEventStream = function (eventName, selector, eventTransformer) {\n  var _this11 = this;\n\n  if (_.isFunction(selector)) {\n    eventTransformer = selector;\n    selector = undefined;\n  }\n\n  return withDesc(new Bacon.Desc(this.selector || this, \"asEventStream\", [eventName]), Bacon.fromBinder(function (handler) {\n    _this11.on(eventName, selector, handler);\n    return function () {\n      return _this11.off(eventName, selector, handler);\n    };\n  }, eventTransformer));\n};\n\nif (typeof jQuery !== \"undefined\" && jQuery) {\n  jQuery.fn.asEventStream = Bacon.$.asEventStream;\n}\n\nif (typeof Zepto !== \"undefined\" && Zepto) {\n  Zepto.fn.asEventStream = Bacon.$.asEventStream;\n}\n\nBacon.Observable.prototype.last = function () {\n  var lastEvent;\n\n  return withDesc(new Bacon.Desc(this, \"last\", []), this.withHandler(function (event) {\n    if (event.isEnd()) {\n      if (lastEvent) {\n        this.push(lastEvent);\n      }\n      this.push(endEvent());\n      return Bacon.noMore;\n    } else {\n      lastEvent = event;\n    }\n  }));\n};\n\nBacon.Observable.prototype.log = function () {\n  for (var _len18 = arguments.length, args = Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n    args[_key18] = arguments[_key18];\n  }\n\n  this.subscribe(function (event) {\n    if (typeof console !== \"undefined\" && typeof console.log === \"function\") {\n      console.log.apply(console, args.concat([event.log()]));\n    }\n  });\n  return this;\n};\n\nBacon.EventStream.prototype.merge = function (right) {\n  assertEventStream(right);\n  var left = this;\n  return withDesc(new Bacon.Desc(left, \"merge\", [right]), Bacon.mergeAll(this, right));\n};\n\nBacon.mergeAll = function () {\n  var streams = argumentsToObservables(arguments);\n  if (streams.length) {\n    return new EventStream(new Bacon.Desc(Bacon, \"mergeAll\", streams), function (sink) {\n      var ends = 0;\n      var smartSink = function (obs) {\n        return function (unsubBoth) {\n          return obs.dispatcher.subscribe(function (event) {\n            if (event.isEnd()) {\n              ends++;\n              if (ends === streams.length) {\n                return sink(endEvent());\n              } else {\n                return Bacon.more;\n              }\n            } else {\n              var reply = sink(event);\n              if (reply === Bacon.noMore) {\n                unsubBoth();\n              }\n              return reply;\n            }\n          });\n        };\n      };\n      var sinks = _.map(smartSink, streams);\n      return new Bacon.CompositeUnsubscribe(sinks).unsubscribe;\n    });\n  } else {\n    return Bacon.never();\n  }\n};\n\nBacon.repeatedly = function (delay, values) {\n  var index = 0;\n  return withDesc(new Bacon.Desc(Bacon, \"repeatedly\", [delay, values]), Bacon.fromPoll(delay, function () {\n    return values[index++ % values.length];\n  }));\n};\n\nBacon.repeat = function (generator) {\n  var index = 0;\n  return Bacon.fromBinder(function (sink) {\n    var flag = false;\n    var reply = Bacon.more;\n    var unsub = function () {};\n    function handleEvent(event) {\n      if (event.isEnd()) {\n        if (!flag) {\n          return flag = true;\n        } else {\n          return subscribeNext();\n        }\n      } else {\n        return reply = sink(event);\n      }\n    };\n    function subscribeNext() {\n      var next;\n      flag = true;\n      while (flag && reply !== Bacon.noMore) {\n        next = generator(index++);\n        flag = false;\n        if (next) {\n          unsub = next.subscribeInternal(handleEvent);\n        } else {\n          sink(endEvent());\n        }\n      }\n      return flag = true;\n    };\n    subscribeNext();\n    return function () {\n      return unsub();\n    };\n  });\n};\n\nBacon.retry = function (options) {\n  if (!_.isFunction(options.source)) {\n    throw new Exception(\"'source' option has to be a function\");\n  }\n  var source = options.source;\n  var retries = options.retries || 0;\n  var retriesDone = 0;\n  var delay = options.delay || function () {\n    return 0;\n  };\n  var isRetryable = options.isRetryable || function () {\n    return true;\n  };\n  var finished = false;\n  var error = null;\n\n  return withDesc(new Bacon.Desc(Bacon, \"retry\", [options]), Bacon.repeat(function (count) {\n    function valueStream() {\n      return source(count).endOnError().withHandler(function (event) {\n        if (event.isError()) {\n          error = event;\n          if (!(isRetryable(error.error) && (retries === 0 || retriesDone < retries))) {\n            finished = true;\n            return this.push(event);\n          }\n        } else {\n          if (event.hasValue()) {\n            error = null;\n            finished = true;\n          }\n          return this.push(event);\n        }\n      });\n    }\n\n    if (finished) {\n      return null;\n    } else if (error) {\n      var context = {\n        error: error.error,\n        retriesDone: retriesDone\n      };\n      var pause = Bacon.later(delay(context)).filter(false);\n      retriesDone++;\n      return pause.concat(Bacon.once().flatMap(valueStream));\n    } else {\n      return valueStream();\n    }\n  }));\n};\n\nBacon.sequentially = function (delay, values) {\n  var index = 0;\n  return withDesc(new Bacon.Desc(Bacon, \"sequentially\", [delay, values]), Bacon.fromPoll(delay, function () {\n    var value = values[index++];\n    if (index < values.length) {\n      return value;\n    } else if (index === values.length) {\n      return [value, endEvent()];\n    } else {\n      return endEvent();\n    }\n  }));\n};\n\nBacon.Observable.prototype.skip = function (count) {\n  return withDesc(new Bacon.Desc(this, \"skip\", [count]), this.withHandler(function (event) {\n    if (!event.hasValue()) {\n      return this.push(event);\n    } else if (count > 0) {\n      count--;\n      return Bacon.more;\n    } else {\n      return this.push(event);\n    }\n  }));\n};\n\nBacon.EventStream.prototype.skipUntil = function (starter) {\n  var started = starter.take(1).map(true).toProperty(false);\n  return withDesc(new Bacon.Desc(this, \"skipUntil\", [starter]), this.filter(started));\n};\n\nBacon.EventStream.prototype.skipWhile = function (f) {\n  assertObservableIsProperty(f);\n  var ok = false;\n\n  for (var _len19 = arguments.length, args = Array(_len19 > 1 ? _len19 - 1 : 0), _key19 = 1; _key19 < _len19; _key19++) {\n    args[_key19 - 1] = arguments[_key19];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"skipWhile\", [f]), this.withHandler(function (event) {\n      if (ok || !event.hasValue() || !f(event.value())) {\n        if (event.hasValue()) {\n          ok = true;\n        }\n        return this.push(event);\n      } else {\n        return Bacon.more;\n      }\n    }));\n  });\n};\n\nBacon.Observable.prototype.slidingWindow = function (n) {\n  var minValues = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];\n\n  return withDesc(new Bacon.Desc(this, \"slidingWindow\", [n, minValues]), this.scan([], function (window, value) {\n    return window.concat([value]).slice(-n);\n  }).filter(function (values) {\n    return values.length >= minValues;\n  }));\n};\n\nvar spies = [];\nvar registerObs = function (obs) {\n  if (spies.length) {\n    if (!registerObs.running) {\n      try {\n        registerObs.running = true;\n        spies.forEach(function (spy) {\n          spy(obs);\n        });\n      } finally {\n        delete registerObs.running;\n      }\n    }\n  }\n};\n\nBacon.spy = function (spy) {\n  return spies.push(spy);\n};\n\nBacon.Property.prototype.startWith = function (seed) {\n  return withDesc(new Bacon.Desc(this, \"startWith\", [seed]), this.scan(seed, function (prev, next) {\n    return next;\n  }));\n};\n\nBacon.EventStream.prototype.startWith = function (seed) {\n  return withDesc(new Bacon.Desc(this, \"startWith\", [seed]), Bacon.once(seed).concat(this));\n};\n\nBacon.Observable.prototype.takeWhile = function (f) {\n  assertObservableIsProperty(f);\n\n  for (var _len20 = arguments.length, args = Array(_len20 > 1 ? _len20 - 1 : 0), _key20 = 1; _key20 < _len20; _key20++) {\n    args[_key20 - 1] = arguments[_key20];\n  }\n\n  return convertArgsToFunction(this, f, args, function (f) {\n    return withDesc(new Bacon.Desc(this, \"takeWhile\", [f]), this.withHandler(function (event) {\n      if (event.filter(f)) {\n        return this.push(event);\n      } else {\n        this.push(endEvent());\n        return Bacon.noMore;\n      }\n    }));\n  });\n};\n\nBacon.Observable.prototype.throttle = function (delay) {\n  return this.delayChanges(new Bacon.Desc(this, \"throttle\", [delay]), function (changes) {\n    return changes.bufferWithTime(delay).map(function (values) {\n      return values[values.length - 1];\n    });\n  });\n};\n\nObservable.prototype.firstToPromise = function (PromiseCtr) {\n  var _this12 = this;\n\n  if (typeof PromiseCtr !== \"function\") {\n    if (typeof Promise === \"function\") {\n      PromiseCtr = Promise;\n    } else {\n      throw new Exception(\"There isn't default Promise, use shim or parameter\");\n    }\n  }\n\n  return new PromiseCtr(function (resolve, reject) {\n    return _this12.subscribe(function (event) {\n      if (event.hasValue()) {\n        resolve(event.value());\n      }\n      if (event.isError()) {\n        reject(event.error);\n      }\n\n      return Bacon.noMore;\n    });\n  });\n};\n\nObservable.prototype.toPromise = function (PromiseCtr) {\n  return this.last().firstToPromise(PromiseCtr);\n};\n\nBacon[\"try\"] = function (f) {\n  return function (value) {\n    try {\n      return Bacon.once(f(value));\n    } catch (e) {\n      return new Bacon.Error(e);\n    }\n  };\n};\n\nBacon.update = function (initial) {\n  function lateBindFirst(f) {\n    return function () {\n      for (var _len22 = arguments.length, args = Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n        args[_key22] = arguments[_key22];\n      }\n\n      return function (i) {\n        return f.apply(undefined, [i].concat(args));\n      };\n    };\n  }\n\n  for (var _len21 = arguments.length, patterns = Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {\n    patterns[_key21 - 1] = arguments[_key21];\n  }\n\n  var i = patterns.length - 1;\n  while (i > 0) {\n    if (!(patterns[i] instanceof Function)) {\n      patterns[i] = _.always(patterns[i]);\n    }\n    patterns[i] = lateBindFirst(patterns[i]);\n    i = i - 2;\n  }\n  return withDesc(new Bacon.Desc(Bacon, \"update\", [initial].concat(patterns)), Bacon.when.apply(Bacon, patterns).scan(initial, function (x, f) {\n    return f(x);\n  }));\n};\n\nBacon.zipAsArray = function () {\n  for (var _len23 = arguments.length, args = Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n    args[_key23] = arguments[_key23];\n  }\n\n  var streams = argumentsToObservables(args);\n  return withDesc(new Bacon.Desc(Bacon, \"zipAsArray\", streams), Bacon.zipWith(streams, function () {\n    for (var _len24 = arguments.length, xs = Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n      xs[_key24] = arguments[_key24];\n    }\n\n    return xs;\n  }));\n};\n\nBacon.zipWith = function () {\n  for (var _len25 = arguments.length, args = Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n    args[_key25] = arguments[_key25];\n  }\n\n  var observablesAndFunction = argumentsToObservablesAndFunction(args);\n  var streams = observablesAndFunction[0];\n  var f = observablesAndFunction[1];\n\n  streams = _.map(function (s) {\n    return s.toEventStream();\n  }, streams);\n  return withDesc(new Bacon.Desc(Bacon, \"zipWith\", [f].concat(streams)), Bacon.when(streams, f));\n};\n\nBacon.Observable.prototype.zip = function (other, f) {\n  return withDesc(new Bacon.Desc(this, \"zip\", [other]), Bacon.zipWith([this, other], f || Array));\n};\n\nfunction ESObservable(observable) {\n  this.observable = observable;\n}\n\nESObservable.prototype.subscribe = function (observerOrOnNext, onError, onComplete) {\n  var observer = typeof observerOrOnNext === 'function' ? { next: observerOrOnNext, error: onError, complete: onComplete } : observerOrOnNext;\n  var subscription = {\n    closed: false,\n    unsubscribe: function () {\n      subscription.closed = true;\n      cancel();\n    }\n  };\n\n  var cancel = this.observable.subscribe(function (event) {\n    if (event.isError()) {\n      if (observer.error) observer.error(event.error);\n      subscription.unsubscribe();\n    } else if (event.isEnd()) {\n      subscription.closed = true;\n      if (observer.complete) observer.complete();\n    } else if (observer.next) {\n      observer.next(event.value());\n    }\n  });\n  return subscription;\n};\n\nESObservable.prototype[symbol('observable')] = function () {\n  return this;\n};\n\nBacon.Observable.prototype.toESObservable = function () {\n  return new ESObservable(this);\n};\n\nBacon.Observable.prototype[symbol('observable')] = Bacon.Observable.prototype.toESObservable;\n\nBacon.fromESObservable = function (_observable) {\n  var observable;\n  if (_observable[symbol(\"observable\")]) {\n    observable = _observable[symbol(\"observable\")]();\n  } else {\n    observable = _observable;\n  }\n\n  var desc = new Bacon.Desc(Bacon, \"fromESObservable\", [observable]);\n  return new Bacon.EventStream(desc, function (sink) {\n    var cancel = observable.subscribe({\n      error: function () {\n        sink(new Bacon.Error());\n        sink(new Bacon.End());\n      },\n      next: function (value) {\n        sink(new Bacon.Next(value, true));\n      },\n      complete: function () {\n        sink(new Bacon.End());\n      }\n    });\n\n    if (cancel.unsubscribe) {\n      return function () {\n        cancel.unsubscribe();\n      };\n    } else {\n      return cancel;\n    }\n  });\n};\n\nif (typeof define !== \"undefined\" && define !== null && define.amd != null) {\n  define([], function () {\n    return Bacon;\n  });\n  if (typeof this !== \"undefined\" && this !== null) {\n    this.Bacon = Bacon;\n  }\n} else if (typeof module !== \"undefined\" && module !== null && module.exports != null) {\n  module.exports = Bacon;\n  Bacon.Bacon = Bacon;\n} else {\n    this.Bacon = Bacon;\n  }\n}).call(this);\n"],"sourceRoot":""}